
/*
 * Project:     Lettuce
 * Author:      dlbuhtig4096@github
 * Version:     2025-01-31
 */
                       
syntax = "proto3";

message Lettuce {
    message BattleEngine {
        message ProtocPlugin {
            enum CustomOptionModuleId {
                MODULE_UNSPECIFIED = 0;
                MODULE_VALUE = 1;
                MODULE_GAME = 2;
                MODULE_STORE = 3;
                MODULE_ORIGIN = 4;
                MODULE_COMMAND = 11;
                MODULE_ACTION = 21;
                MODULE_HINT = 22;
                MODULE_LOGIC_STATE = 31;
                MODULE_TRIGGER = 41;
                MODULE_CE_OPERATION = 51;
                MODULE_CE_ACTIVE_CONDITION = 52;
                MODULE_CE_EXISTENCE_CONDITION = 53;
                MODULE_HIDDEN_PROTO = 101;
                MODULE_PROTO_CONVERTER = 102;
                MODULE_UPDATION_PROTO = 111;
                MODULE_UPDATION_CS = 112;
                MODULE_IGNORE = 201;
            }
            enum CustomOptionTemplateId {
                TEMPLATE_UNSPECIFIED = 0;
                TEMPLATE_CLASS = 1;
                TEMPLATE_STRUCT = 2;
                TEMPLATE_READONLY_STRUCT = 3;
                TEMPLATE_PROTO_MESSAGE = 4;
                TEMPLATE_PROTO_ENUM = 5;
                TEMPLATE_COMMAND_REQUEST = 11;
                TEMPLATE_COMMAND_RESPONSE = 12;
                TEMPLATE_COMMAND_EXECUTOR = 13;
                TEMPLATE_COMMAND_CONVERTER = 14;
                TEMPLATE_ACTION = 21;
                TEMPLATE_HINT = 22;
                TEMPLATE_CE_OPERATION = 51;
                TEMPLATE_HIDEABLE_CLASS = 61;
                TEMPLATE_ENUM = 1001;
                TEMPLATE_HIDDEN_CONV = 1002;
                TEMPLATE_HIDDEN_IFS = 1003;
                TEMPLATE_PROTO_CONV_COMMON = 1011;
                TEMPLATE_PROTO_CONV_ACTION = 1012;
                TEMPLATE_PROTO_CONV_HINT = 1013;
                TEMPLATE_PROTO_CONV_COMMAND = 1014;
                TEMPLATE_PROTO_CONV_CE_ACTIVE_CONDITION = 1015;
                TEMPLATE_PROTO_CONV_CE_EXISTENCE_CONDITION = 1016;
                TEMPLATE_PROTO_CONV_CE_OPERATION = 1017;
                TEMPLATE_PROTO_CONV_LOGIC_STATE = 1018;
                TEMPLATE_PROTO_CONV_TRIGGER = 1019;
                TEMPLATE_UPDATION_SINGLE = 1101;
                TEMPLATE_UPDATION_REPEATED = 1102;
            }
            enum CustomOptionScopeType {
                SCOPE_UNSPECIFIED = 0;
                SCOPE_GLOBAL = 1;
                SCOPE_INTACT = 2;
                SCOPE_HIDDEN = 3;
            }
            enum CustomOptionBoolean {
                BOOL_UNSPECIFIED = 0;
                BOOL_TRUE = 1;
                BOOL_FALSE = 2;
            }
            message HiddenOptions {
                Lettuce.BattleEngine.ProtocPlugin.CustomOptionScopeType scope = 11;
                string hidden_name = 12;
                Lettuce.BattleEngine.ProtocPlugin.CustomOptionBoolean autogen_converter = 13;
            }
            message ModuleInputOptions {
                Lettuce.BattleEngine.ProtocPlugin.CustomOptionModuleId module = 1;
                Lettuce.BattleEngine.ProtocPlugin.CustomOptionTemplateId template = 11;
                string name = 21;
                string base = 31;
                Lettuce.BattleEngine.ProtocPlugin.CustomOptionBoolean cloneable = 41;
                bool ignore = 51;
            }
            message ModuleDefaultTemplate {
                Lettuce.BattleEngine.ProtocPlugin.CustomOptionModuleId module = 1;
                Lettuce.BattleEngine.ProtocPlugin.CustomOptionTemplateId value = 2;
            }
            message TemplateDefaultString {
                Lettuce.BattleEngine.ProtocPlugin.CustomOptionModuleId module = 1;
                Lettuce.BattleEngine.ProtocPlugin.CustomOptionTemplateId template = 2;
                string value = 3;
            }
            message TemplateDefaultBoolean {
                Lettuce.BattleEngine.ProtocPlugin.CustomOptionModuleId module = 1;
                Lettuce.BattleEngine.ProtocPlugin.CustomOptionTemplateId template = 2;
                Lettuce.BattleEngine.ProtocPlugin.CustomOptionBoolean value = 3;
            }
            message FileOptions {
                Lettuce.BattleEngine.ProtocPlugin.CustomOptionScopeType default_scope = 1;
                Lettuce.BattleEngine.ProtocPlugin.CustomOptionModuleId default_module = 11;
                repeated Lettuce.BattleEngine.ProtocPlugin.ModuleDefaultTemplate default_template = 21;
                repeated Lettuce.BattleEngine.ProtocPlugin.TemplateDefaultString default_base = 31;
                repeated Lettuce.BattleEngine.ProtocPlugin.TemplateDefaultBoolean default_cloneable = 41;
                Lettuce.BattleEngine.ProtocPlugin.CustomOptionBoolean default_with_updation = 51;
            }
            message MessageOptions {
                Lettuce.BattleEngine.ProtocPlugin.HiddenOptions hidden = 1;
                repeated Lettuce.BattleEngine.ProtocPlugin.ModuleInputOptions input = 2;
                string cs_type = 3;
                Lettuce.BattleEngine.ProtocPlugin.CustomOptionBoolean with_updation = 4;
            }
            message FieldOptions {
                string hidden_name = 1;
            }
            message OneOfOptions {
                string cs_type = 1;
                string cs_namespace = 2;
            }
            message EnumOptions {
                repeated Lettuce.BattleEngine.ProtocPlugin.CustomOptionModuleId module = 1;
                Lettuce.BattleEngine.ProtocPlugin.CustomOptionBoolean with_updation = 2;
            }
        }
        message Schema {
            message Action {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                Lettuce.BattleEngine.Schema.InjectionData injection = 2;
                oneof action {
                    Lettuce.BattleEngine.Schema.DebugExecuteCommandAction debug_execute_command = 100;
                    Lettuce.BattleEngine.Schema.AttachEnergyFromZoneAction attach_energy_from_zone = 1001;
                    Lettuce.BattleEngine.Schema.DetermineAttackAction determine_attack = 1002;
                    Lettuce.BattleEngine.Schema.DetermineTurnEndAction determine_turn_end = 1003;
                    Lettuce.BattleEngine.Schema.EvolveAction evolve = 1004;
                    Lettuce.BattleEngine.Schema.PlayPokemonAction play_pokemon = 1005;
                    Lettuce.BattleEngine.Schema.PlayTrainerAction play_trainer = 1006;
                    Lettuce.BattleEngine.Schema.RetreatAction retreat = 1007;
                    Lettuce.BattleEngine.Schema.SelectBenchOnKnockedOutAction select_bench_on_knocked_out = 1008;
                    Lettuce.BattleEngine.Schema.FlipCoinAction flip_coin = 1009;
                    Lettuce.BattleEngine.Schema.SelectFieldPokemonAction select_field_pokemon = 1010;
                    Lettuce.BattleEngine.Schema.ActivateAbilityAction activate_ability = 1011;
                    Lettuce.BattleEngine.Schema.SelectLibraryRevealedCardAction select_library_revealed_card = 1012;
                    Lettuce.BattleEngine.Schema.SelectAttachedEnergyAction select_attached_energy = 1013;
                    Lettuce.BattleEngine.Schema.ConcedeAction concede = 1014;
                    Lettuce.BattleEngine.Schema.PrepareActiveFieldAction prepare_active_field = 1015;
                    Lettuce.BattleEngine.Schema.PrepareBenchFieldAction prepare_bench_field = 1016;
                    Lettuce.BattleEngine.Schema.EndPrepareFieldAction end_prepare_field = 1017;
                    Lettuce.BattleEngine.Schema.DiscardFieldPokemonAction discard_field_pokemon = 1018;
                    Lettuce.BattleEngine.Schema.SelectAttackAction select_attack = 1019;
                    Lettuce.BattleEngine.Schema.ConfirmAction confirm = 1020;
                    Lettuce.BattleEngine.Schema.AttachEnergyByEffectAction attach_energy_by_effect = 1030;
                    Lettuce.BattleEngine.Schema.SelectDiscardPileCardAction select_discard_pile_card = 1040;
                    Lettuce.BattleEngine.Schema.ForceCompleteGameAction force_complete_game = 1050;
                    Lettuce.BattleEngine.Schema.AttachPokemonToolAction attach_pokemon_tool = 1060;
                    Lettuce.BattleEngine.Schema.SelectHandCardAction select_hand_card = 1070;
                    Lettuce.BattleEngine.Schema.SelectPlayerAction select_player = 1080;
                }
            }
            message PrepareActiveFieldAction {
                Lettuce.BattleEngine.Schema.CardId active = 1;
            }
            message PrepareBenchFieldAction {
                Lettuce.BattleEngine.Schema.BenchFieldSet bench = 1;
            }
            message EndPrepareFieldAction {
            }
            message AttachEnergyFromZoneAction {
                Lettuce.BattleEngine.Schema.BattleObjectId pokemon = 1;
            }
            message DetermineAttackAction {
                Lettuce.BattleEngine.Schema.PokemonAttackId attack_id = 1;
            }
            message DetermineTurnEndAction {
            }
            message EvolveAction {
                Lettuce.BattleEngine.Schema.BattleObjectId from = 1;
                Lettuce.BattleEngine.Schema.CardId to = 2;
            }
            message PlayPokemonAction {
                Lettuce.BattleEngine.Schema.BenchFieldSet bench = 1;
            }
            message PlayTrainerAction {
                Lettuce.BattleEngine.Schema.CardId card_id = 1;
            }
            message RetreatAction {
                Lettuce.BattleEngine.Schema.BattleObjectId bench = 1;
                Lettuce.BattleEngine.Schema.EnergySet energies = 2;
            }
            message ActivateAbilityAction {
                Lettuce.BattleEngine.Schema.CardId target = 1;
            }
            message DiscardFieldPokemonAction {
                Lettuce.BattleEngine.Schema.BattleObjectId pokemon = 1;
            }
            message SelectBenchOnKnockedOutAction {
                Lettuce.BattleEngine.Schema.BattleObjectId bench = 1;
            }
            message FlipCoinAction {
            }
            message ConcedeAction {
            }
            message SelectFieldPokemonAction {
                repeated Lettuce.BattleEngine.Schema.BattleObjectId pokemons = 1;
            }
            message SelectLibraryRevealedCardAction {
                repeated Lettuce.BattleEngine.Schema.CardId cards = 1;
            }
            message SelectAttachedEnergyAction {
                Lettuce.BattleEngine.Schema.BattleObjectId pokemon = 1;
                Lettuce.BattleEngine.Schema.EnergySet energies = 2;
            }
            message SelectAttackAction {
                Lettuce.BattleEngine.Schema.PokemonAttackId attack_id = 1;
            }
            message ConfirmAction {
            }
            message AttachEnergyByEffectAction {
                repeated Lettuce.BattleEngine.Schema.EnergyAttachRequest attach_requests = 1;
            }
            message SelectDiscardPileCardAction {
                repeated Lettuce.BattleEngine.Schema.CardId cards = 1;
            }
            message ForceCompleteGameAction {
                Lettuce.BattleEngine.Schema.PlayerId winner = 1;
                Lettuce.BattleEngine.Schema.BattleResultState result = 2;
            }
            message AttachPokemonToolAction {
                Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                Lettuce.BattleEngine.Schema.CardId tool = 2;
            }
            message SelectHandCardAction {
                repeated Lettuce.BattleEngine.Schema.CardId cards = 1;
            }
            message SelectPlayerAction {
                Lettuce.BattleEngine.Schema.PlayerId selected_player_id = 1;
            }
            message DebugExecuteCommandAction {
                Lettuce.BattleEngine.Schema.CommandRequest request = 1;
            }
            message CommandRequest {
                oneof request {
                    Lettuce.BattleEngine.Schema.ExecuteEndPhaseCommandRequest execute_end_phase = 2;
                    Lettuce.BattleEngine.Schema.ExecuteChangeTurnCommandRequest execute_change_turn = 8;
                    Lettuce.BattleEngine.Schema.ExpectActionOnDetermineAttackCommandRequest expect_action_on_determine_attack = 70;
                    Lettuce.BattleEngine.Schema.EndDetermineAttackCommandRequest end_determine_attack = 87;
                    Lettuce.BattleEngine.Schema.ExecuteAttackPreExecutionStepCommandRequest execute_attack_pre_execution_step = 10;
                    Lettuce.BattleEngine.Schema.ExecuteAttackDamageCalculationStepCommandRequest execute_attack_damage_calculation_step = 5;
                    Lettuce.BattleEngine.Schema.ExecuteAttackDamageStepCommandRequest execute_attack_damage_step = 11;
                    Lettuce.BattleEngine.Schema.ExecuteAttackPostExecutionStepCommandRequest execute_attack_post_execution_step = 12;
                    Lettuce.BattleEngine.Schema.ExecuteAttackEndStepCommandRequest execute_attack_end_step = 13;
                    Lettuce.BattleEngine.Schema.ExecutePokemonCheckupSpecialConditionStepCommandRequest execute_pokemon_checkup_special_condition_step = 17;
                    Lettuce.BattleEngine.Schema.ExecutePokemonCheckupDiscardEnergyStepCommandRequest execute_pokemon_checkup_discard_energy_step = 18;
                    Lettuce.BattleEngine.Schema.ExecutePokemonCheckupEffectStepCommandRequest execute_pokemon_checkup_effect_step = 209;
                    Lettuce.BattleEngine.Schema.FixAttackDamageCalculationCommandRequest fix_attack_damage_calculation = 7;
                    Lettuce.BattleEngine.Schema.ProgressSpecialConditionCheckCommandRequest progress_special_condition_check = 15;
                    Lettuce.BattleEngine.Schema.ExecuteSpecialConditionCheckCommandRequest execute_special_condition_check = 16;
                    Lettuce.BattleEngine.Schema.DoneSpecialConditionCheckCommandRequest done_special_condition_check = 33;
                    Lettuce.BattleEngine.Schema.ExecuteStartPhaseDrawStepCommandRequest execute_start_phase_draw_step = 103;
                    Lettuce.BattleEngine.Schema.ExecuteStartPhaseSpawnEnergyStepCommandRequest execute_start_phase_spawn_energy_step = 104;
                    Lettuce.BattleEngine.Schema.ApplyPoisonedDamageCommandRequest apply_poisoned_damage = 39;
                    Lettuce.BattleEngine.Schema.ApplyBurnedDamageCommandRequest apply_burned_damage = 93;
                    Lettuce.BattleEngine.Schema.StartBattlePreparationInitialSetupCommandRequest start_battle_preparation_initial_setup = 82;
                    Lettuce.BattleEngine.Schema.DecideFirstTurnPlayerCommandRequest decide_first_turn_player = 77;
                    Lettuce.BattleEngine.Schema.SetupInitialEnergyZoneCommandRequest setup_initial_energy_zone = 78;
                    Lettuce.BattleEngine.Schema.SetupInitialLibraryCommandRequest setup_initial_library = 79;
                    Lettuce.BattleEngine.Schema.SetupInitialHandCommandRequest setup_initial_hand = 80;
                    Lettuce.BattleEngine.Schema.StartPrepareFieldCommandRequest start_prepare_field = 81;
                    Lettuce.BattleEngine.Schema.SetPokemonToActiveCommandRequest set_pokemon_to_active = 19;
                    Lettuce.BattleEngine.Schema.SetPokemonToBenchCommandRequest set_pokemon_to_bench = 20;
                    Lettuce.BattleEngine.Schema.EndPrepareFieldCommandRequest end_prepare_field = 21;
                    Lettuce.BattleEngine.Schema.FlipAllFaceDownCardsCommandRequest flip_all_face_down_cards = 22;
                    Lettuce.BattleEngine.Schema.StartFirstTurnCommandRequest start_first_turn = 83;
                    Lettuce.BattleEngine.Schema.CompleteGameCommandRequest complete_game = 84;
                    Lettuce.BattleEngine.Schema.ConcedeCommandRequest concede = 23;
                    Lettuce.BattleEngine.Schema.AddAttackPlusDamageAmountCommandRequest add_attack_plus_damage_amount = 24;
                    Lettuce.BattleEngine.Schema.SetAttackPreExecutionIgnoreWeaknessCommandRequest set_attack_pre_execution_ignore_weakness = 25;
                    Lettuce.BattleEngine.Schema.SetAttackFailedCommandRequest set_attack_failed = 26;
                    Lettuce.BattleEngine.Schema.SetOriginalAttackDamageAmountCommandRequest set_original_attack_damage_amount = 27;
                    Lettuce.BattleEngine.Schema.MisfireCopyAttackCommandRequest misfire_copy_attack = 220;
                    Lettuce.BattleEngine.Schema.SetExtraAttackOrderCommandRequest set_extra_attack_order = 6;
                    Lettuce.BattleEngine.Schema.SetExtraAttackOrderRandomlyCommandRequest set_extra_attack_order_randomly = 94;
                    Lettuce.BattleEngine.Schema.SetChildAttackCommandRequest set_child_attack = 102;
                    Lettuce.BattleEngine.Schema.ProgressPhaseCommandRequest progress_phase = 28;
                    Lettuce.BattleEngine.Schema.ProgressAttackPhaseCommandRequest progress_attack_phase = 76;
                    Lettuce.BattleEngine.Schema.ProgressStepCommandRequest progress_step = 29;
                    Lettuce.BattleEngine.Schema.ExecutePhaseCommandRequest execute_phase = 85;
                    Lettuce.BattleEngine.Schema.ExecuteStepCommandRequest execute_step = 86;
                    Lettuce.BattleEngine.Schema.DoneStepCommandRequest done_step = 30;
                    Lettuce.BattleEngine.Schema.DonePhaseCommandRequest done_phase = 31;
                    Lettuce.BattleEngine.Schema.ReserveTurnEndCommandRequest reserve_turn_end = 213;
                    Lettuce.BattleEngine.Schema.SkipAttackDamageStepCommandRequest skip_attack_damage_step = 218;
                    Lettuce.BattleEngine.Schema.ExecuteLogicCommandRequest execute_logic = 32;
                    Lettuce.BattleEngine.Schema.FinishLogicCommandRequest finish_logic = 34;
                    Lettuce.BattleEngine.Schema.UpdateLogicStateCommandRequest update_logic_state = 35;
                    Lettuce.BattleEngine.Schema.AddOrUpdateLogicStateCommandRequest add_or_update_logic_state = 36;
                    Lettuce.BattleEngine.Schema.RemoveLogicStateCommandRequest remove_logic_state = 37;
                    Lettuce.BattleEngine.Schema.ReserveProcedureExecutionCommandRequest reserve_procedure_execution = 38;
                    Lettuce.BattleEngine.Schema.ExecuteTriggeredLogicCheckProcedureCommandRequest execute_triggered_logic_check_procedure = 40;
                    Lettuce.BattleEngine.Schema.ExecuteKnockedOutCheckProcedureCommandRequest execute_knocked_out_check_procedure = 41;
                    Lettuce.BattleEngine.Schema.ExecuteWinnerCheckProcedureCommandRequest execute_winner_check_procedure = 42;
                    Lettuce.BattleEngine.Schema.ProgressProcedureCommandRequest progress_procedure = 43;
                    Lettuce.BattleEngine.Schema.PutActiveFromBenchOnKnockedOutCommandRequest put_active_from_bench_on_knocked_out = 44;
                    Lettuce.BattleEngine.Schema.SelectNextActiveOnKnockedOutCommandRequest select_next_active_on_knocked_out = 73;
                    Lettuce.BattleEngine.Schema.PlayTrainerCommandRequest play_trainer = 45;
                    Lettuce.BattleEngine.Schema.ActivateAbilityCommandRequest activate_ability = 46;
                    Lettuce.BattleEngine.Schema.DiscardActivatingTrainerCommandRequest discard_activating_trainer = 47;
                    Lettuce.BattleEngine.Schema.EvolvePokemonCommandRequest evolve_pokemon = 48;
                    Lettuce.BattleEngine.Schema.PlayPokemonToBenchCommandRequest play_pokemon_to_bench = 49;
                    Lettuce.BattleEngine.Schema.PlayPokemonToBenchFromDiscardPileCommandRequest play_pokemon_to_bench_from_discard_pile = 101;
                    Lettuce.BattleEngine.Schema.PlayPokemonToBenchRandomlyFromLibraryCommandRequest play_pokemon_to_bench_randomly_from_library = 96;
                    Lettuce.BattleEngine.Schema.PlayStageSpecifiedPokemonToBenchRandomlyFromLibraryCommandRequest play_stage_specified_pokemon_to_bench_randomly_from_library = 201;
                    Lettuce.BattleEngine.Schema.RetreatPokemonCommandRequest retreat_pokemon = 50;
                    Lettuce.BattleEngine.Schema.AttachPokemonToolCommandRequest attach_pokemon_tool = 200;
                    Lettuce.BattleEngine.Schema.DiscardPokemonToolCommandRequest discard_pokemon_tool = 206;
                    Lettuce.BattleEngine.Schema.DiscardAllPokemonToolCommandRequest discard_all_pokemon_tool = 212;
                    Lettuce.BattleEngine.Schema.ExchangeBenchToActiveCommandRequest exchange_bench_to_active = 51;
                    Lettuce.BattleEngine.Schema.ApplyContinuousEffectCommandRequest apply_continuous_effect = 52;
                    Lettuce.BattleEngine.Schema.UpdateContinuousEffectCommandRequest update_continuous_effect = 98;
                    Lettuce.BattleEngine.Schema.DebugRemoveContinuousEffectCommandRequest debug_remove_continuous_effect = 105;
                    Lettuce.BattleEngine.Schema.ApplySpecialConditionsCommandRequest apply_special_conditions = 53;
                    Lettuce.BattleEngine.Schema.DiscardFieldPokemonCommandRequest discard_field_pokemon = 14;
                    Lettuce.BattleEngine.Schema.RecoverSpecialConditionsCommandRequest recover_special_conditions = 74;
                    Lettuce.BattleEngine.Schema.ShuffleFieldPokemonIntoLibraryCommandRequest shuffle_field_pokemon_into_library = 97;
                    Lettuce.BattleEngine.Schema.MoveEnergiesCommandRequest move_energies = 54;
                    Lettuce.BattleEngine.Schema.MoveAllEnergiesFromFieldCommandRequest move_all_energies_from_field = 55;
                    Lettuce.BattleEngine.Schema.AttachActiveEnergyFromZoneCommandRequest attach_active_energy_from_zone = 56;
                    Lettuce.BattleEngine.Schema.AttachEnergyCommandRequest attach_energy = 57;
                    Lettuce.BattleEngine.Schema.DiscardEnergyCommandRequest discard_energy = 58;
                    Lettuce.BattleEngine.Schema.DiscardEnergyRandomlyFromAllFieldCommandRequest discard_energy_randomly_from_all_field = 63;
                    Lettuce.BattleEngine.Schema.DestroyEnergyRandomlyCommandRequest destroy_energy_randomly = 59;
                    Lettuce.BattleEngine.Schema.SpawnEnergyCommandRequest spawn_energy = 60;
                    Lettuce.BattleEngine.Schema.AttachEnergyFromDiscardPileCommandRequest attach_energy_from_discard_pile = 208;
                    Lettuce.BattleEngine.Schema.DrawCardFromLibraryCommandRequest draw_card_from_library = 61;
                    Lettuce.BattleEngine.Schema.PickBasicPokemonRandomlyFromLibraryCommandRequest pick_basic_pokemon_randomly_from_library = 62;
                    Lettuce.BattleEngine.Schema.PickTypeSpecifiedPokemonRandomlyFromLibraryCommandRequest pick_type_specified_pokemon_randomly_from_library = 68;
                    Lettuce.BattleEngine.Schema.DrawRevealedCardCommandRequest draw_revealed_card = 100;
                    Lettuce.BattleEngine.Schema.ExchangeHandCardForLibraryPokemonCommandRequest exchange_hand_card_for_library_pokemon = 203;
                    Lettuce.BattleEngine.Schema.PickNameSpecifiedPokemonRandomlyFromLibraryCommandRequest pick_name_specified_pokemon_randomly_from_library = 204;
                    Lettuce.BattleEngine.Schema.RevealLibraryTopCardCommandRequest reveal_library_top_card = 64;
                    Lettuce.BattleEngine.Schema.PutRevealedCardToLibraryTopCommandRequest put_revealed_card_to_library_top = 65;
                    Lettuce.BattleEngine.Schema.PutRevealedCardToLibraryBottomCommandRequest put_revealed_card_to_library_bottom = 99;
                    Lettuce.BattleEngine.Schema.DiscardFromHandCommandRequest discard_from_hand = 66;
                    Lettuce.BattleEngine.Schema.DiscardMultipleFromHandCommandRequest discard_multiple_from_hand = 88;
                    Lettuce.BattleEngine.Schema.DiscardFromHandRandomlyCommandRequest discard_from_hand_randomly = 89;
                    Lettuce.BattleEngine.Schema.ShuffleHandIntoLibraryCommandRequest shuffle_hand_into_library = 67;
                    Lettuce.BattleEngine.Schema.RevealAndShuffleSelectHandIntoLibraryCommandRequest reveal_and_shuffle_select_hand_into_library = 215;
                    Lettuce.BattleEngine.Schema.RevealHandCommandRequest reveal_hand = 91;
                    Lettuce.BattleEngine.Schema.ReturnRevealedHandCommandRequest return_revealed_hand = 92;
                    Lettuce.BattleEngine.Schema.ReturnPokemonToHandCommandRequest return_pokemon_to_hand = 95;
                    Lettuce.BattleEngine.Schema.PickStageSpecifiedRandomlyFromDiscardPileCommandRequest pick_stage_specified_randomly_from_discard_pile = 211;
                    Lettuce.BattleEngine.Schema.ApplyAbilityEffectDamageCommandRequest apply_ability_effect_damage = 69;
                    Lettuce.BattleEngine.Schema.ApplyAttackEffectDamageCommandRequest apply_attack_effect_damage = 214;
                    Lettuce.BattleEngine.Schema.ApplyHealDamageCommandRequest apply_heal_damage = 71;
                    Lettuce.BattleEngine.Schema.ApplyPokemonToolEffectDamageCommandRequest apply_pokemon_tool_effect_damage = 202;
                    Lettuce.BattleEngine.Schema.MoveDamageAllCommandRequest move_damage_all = 205;
                    Lettuce.BattleEngine.Schema.ReduceCurrentHpCommandRequest reduce_current_hp = 207;
                    Lettuce.BattleEngine.Schema.FlipCoinCommandRequest flip_coin = 72;
                    Lettuce.BattleEngine.Schema.NoOperationCommandRequest no_operation = 75;
                    Lettuce.BattleEngine.Schema.ClearExpectedActionsCommandRequest clear_expected_actions = 3;
                    Lettuce.BattleEngine.Schema.SetExpectedActionsCommandRequest set_expected_actions = 4;
                    Lettuce.BattleEngine.Schema.DiscardLibraryCardsFromTopCommandRequest discard_library_cards_from_top = 210;
                    Lettuce.BattleEngine.Schema.ChangeInactiveEnergyInEnergyZoneRandomlyCommandRequest change_inactive_energy_in_energy_zone_randomly = 216;
                    Lettuce.BattleEngine.Schema.ShuffleRandomHandCardIntoLibraryCommandRequest shuffle_random_hand_card_into_library = 217;
                    Lettuce.BattleEngine.Schema.SpecialConditionInconsistentCheckProcedureCommandRequest special_condition_inconsistent_check_procedure = 219;
                }
            }
            message CommandResponse {
                oneof response {
                    Lettuce.BattleEngine.Schema.ExecuteEndPhaseCommandResponse execute_end_phase = 2;
                    Lettuce.BattleEngine.Schema.ExecuteChangeTurnCommandResponse execute_change_turn = 8;
                    Lettuce.BattleEngine.Schema.ExpectActionOnDetermineAttackCommandResponse expect_action_on_determine_attack = 70;
                    Lettuce.BattleEngine.Schema.EndDetermineAttackCommandResponse end_determine_attack = 87;
                    Lettuce.BattleEngine.Schema.ExecuteAttackPreExecutionStepCommandResponse execute_attack_pre_execution_step = 10;
                    Lettuce.BattleEngine.Schema.ExecuteAttackDamageCalculationStepCommandResponse execute_attack_damage_calculation_step = 5;
                    Lettuce.BattleEngine.Schema.ExecuteAttackDamageStepCommandResponse execute_attack_damage_step = 11;
                    Lettuce.BattleEngine.Schema.ExecuteAttackPostExecutionStepCommandResponse execute_attack_post_execution_step = 12;
                    Lettuce.BattleEngine.Schema.ExecuteAttackEndStepCommandResponse execute_attack_end_step = 13;
                    Lettuce.BattleEngine.Schema.ExecutePokemonCheckupSpecialConditionStepCommandResponse execute_pokemon_checkup_special_condition_step = 17;
                    Lettuce.BattleEngine.Schema.ExecutePokemonCheckupDiscardEnergyStepCommandResponse execute_pokemon_checkup_discard_energy_step = 18;
                    Lettuce.BattleEngine.Schema.ExecutePokemonCheckupEffectStepCommandResponse execute_pokemon_checkup_effect_step = 209;
                    Lettuce.BattleEngine.Schema.FixAttackDamageCalculationCommandResponse fix_attack_damage_calculation = 7;
                    Lettuce.BattleEngine.Schema.ProgressSpecialConditionCheckCommandResponse progress_special_condition_check = 15;
                    Lettuce.BattleEngine.Schema.ExecuteSpecialConditionCheckCommandResponse execute_special_condition_check = 16;
                    Lettuce.BattleEngine.Schema.DoneSpecialConditionCheckCommandResponse done_special_condition_check = 33;
                    Lettuce.BattleEngine.Schema.ExecuteStartPhaseDrawStepCommandResponse execute_start_phase_draw_step = 103;
                    Lettuce.BattleEngine.Schema.ExecuteStartPhaseSpawnEnergyStepCommandResponse execute_start_phase_spawn_energy_step = 104;
                    Lettuce.BattleEngine.Schema.ApplyPoisonedDamageCommandResponse apply_poisoned_damage = 39;
                    Lettuce.BattleEngine.Schema.ApplyBurnedDamageCommandResponse apply_burned_damage = 93;
                    Lettuce.BattleEngine.Schema.StartBattlePreparationInitialSetupCommandResponse start_battle_preparation_initial_setup = 82;
                    Lettuce.BattleEngine.Schema.DecideFirstTurnPlayerCommandResponse decide_first_turn_player = 77;
                    Lettuce.BattleEngine.Schema.SetupInitialEnergyZoneCommandResponse setup_initial_energy_zone = 78;
                    Lettuce.BattleEngine.Schema.SetupInitialLibraryCommandResponse setup_initial_library = 79;
                    Lettuce.BattleEngine.Schema.SetupInitialHandCommandResponse setup_initial_hand = 80;
                    Lettuce.BattleEngine.Schema.StartPrepareFieldCommandResponse start_prepare_field = 81;
                    Lettuce.BattleEngine.Schema.SetPokemonToActiveCommandResponse set_pokemon_to_active = 19;
                    Lettuce.BattleEngine.Schema.SetPokemonToBenchCommandResponse set_pokemon_to_bench = 20;
                    Lettuce.BattleEngine.Schema.EndPrepareFieldCommandResponse end_prepare_field = 21;
                    Lettuce.BattleEngine.Schema.FlipAllFaceDownCardsCommandResponse flip_all_face_down_cards = 22;
                    Lettuce.BattleEngine.Schema.StartFirstTurnCommandResponse start_first_turn = 83;
                    Lettuce.BattleEngine.Schema.CompleteGameCommandResponse complete_game = 84;
                    Lettuce.BattleEngine.Schema.ConcedeCommandResponse concede = 23;
                    Lettuce.BattleEngine.Schema.AddAttackPlusDamageAmountCommandResponse add_attack_plus_damage_amount = 24;
                    Lettuce.BattleEngine.Schema.SetAttackPreExecutionIgnoreWeaknessCommandResponse set_attack_pre_execution_ignore_weakness = 25;
                    Lettuce.BattleEngine.Schema.SetAttackFailedCommandResponse set_attack_failed = 26;
                    Lettuce.BattleEngine.Schema.SetOriginalAttackDamageAmountCommandResponse set_original_attack_damage_amount = 27;
                    Lettuce.BattleEngine.Schema.MisfireCopyAttackCommandResponse misfire_copy_attack = 220;
                    Lettuce.BattleEngine.Schema.SetExtraAttackOrderCommandResponse set_extra_attack_order = 6;
                    Lettuce.BattleEngine.Schema.SetExtraAttackOrderRandomlyCommandResponse set_extra_attack_order_randomly = 94;
                    Lettuce.BattleEngine.Schema.SetChildAttackCommandResponse set_child_attack = 102;
                    Lettuce.BattleEngine.Schema.ProgressPhaseCommandResponse progress_phase = 28;
                    Lettuce.BattleEngine.Schema.ProgressAttackPhaseCommandResponse progress_attack_phase = 76;
                    Lettuce.BattleEngine.Schema.ProgressStepCommandResponse progress_step = 29;
                    Lettuce.BattleEngine.Schema.ExecutePhaseCommandResponse execute_phase = 85;
                    Lettuce.BattleEngine.Schema.ExecuteStepCommandResponse execute_step = 86;
                    Lettuce.BattleEngine.Schema.DoneStepCommandResponse done_step = 30;
                    Lettuce.BattleEngine.Schema.DonePhaseCommandResponse done_phase = 31;
                    Lettuce.BattleEngine.Schema.ReserveTurnEndCommandResponse reserve_turn_end = 213;
                    Lettuce.BattleEngine.Schema.SkipAttackDamageStepCommandResponse skip_attack_damage_step = 218;
                    Lettuce.BattleEngine.Schema.ExecuteLogicCommandResponse execute_logic = 32;
                    Lettuce.BattleEngine.Schema.FinishLogicCommandResponse finish_logic = 34;
                    Lettuce.BattleEngine.Schema.UpdateLogicStateCommandResponse update_logic_state = 35;
                    Lettuce.BattleEngine.Schema.AddOrUpdateLogicStateCommandResponse add_or_update_logic_state = 36;
                    Lettuce.BattleEngine.Schema.RemoveLogicStateCommandResponse remove_logic_state = 37;
                    Lettuce.BattleEngine.Schema.ReserveProcedureExecutionCommandResponse reserve_procedure_execution = 38;
                    Lettuce.BattleEngine.Schema.ExecuteTriggeredLogicCheckProcedureCommandResponse execute_triggered_logic_check_procedure = 40;
                    Lettuce.BattleEngine.Schema.ExecuteKnockedOutCheckProcedureCommandResponse execute_knocked_out_check_procedure = 41;
                    Lettuce.BattleEngine.Schema.ExecuteWinnerCheckProcedureCommandResponse execute_winner_check_procedure = 42;
                    Lettuce.BattleEngine.Schema.ProgressProcedureCommandResponse progress_procedure = 43;
                    Lettuce.BattleEngine.Schema.PutActiveFromBenchOnKnockedOutCommandResponse put_active_from_bench_on_knocked_out = 44;
                    Lettuce.BattleEngine.Schema.SelectNextActiveOnKnockedOutCommandResponse select_next_active_on_knocked_out = 73;
                    Lettuce.BattleEngine.Schema.PlayTrainerCommandResponse play_trainer = 45;
                    Lettuce.BattleEngine.Schema.ActivateAbilityCommandResponse activate_ability = 46;
                    Lettuce.BattleEngine.Schema.DiscardActivatingTrainerCommandResponse discard_activating_trainer = 47;
                    Lettuce.BattleEngine.Schema.EvolvePokemonCommandResponse evolve_pokemon = 48;
                    Lettuce.BattleEngine.Schema.PlayPokemonToBenchCommandResponse play_pokemon_to_bench = 49;
                    Lettuce.BattleEngine.Schema.PlayPokemonToBenchFromDiscardPileCommandResponse play_pokemon_to_bench_from_discard_pile = 101;
                    Lettuce.BattleEngine.Schema.PlayPokemonToBenchRandomlyFromLibraryCommandResponse play_pokemon_to_bench_randomly_from_library = 96;
                    Lettuce.BattleEngine.Schema.PlayStageSpecifiedPokemonToBenchRandomlyFromLibraryCommandResponse play_stage_specified_pokemon_to_bench_randomly_from_library = 201;
                    Lettuce.BattleEngine.Schema.RetreatPokemonCommandResponse retreat_pokemon = 50;
                    Lettuce.BattleEngine.Schema.AttachPokemonToolCommandResponse attach_pokemon_tool = 200;
                    Lettuce.BattleEngine.Schema.DiscardPokemonToolCommandResponse discard_pokemon_tool = 206;
                    Lettuce.BattleEngine.Schema.DiscardAllPokemonToolCommandResponse discard_all_pokemon_tool = 212;
                    Lettuce.BattleEngine.Schema.ExchangeBenchToActiveCommandResponse exchange_bench_to_active = 51;
                    Lettuce.BattleEngine.Schema.ApplyContinuousEffectCommandResponse apply_continuous_effect = 52;
                    Lettuce.BattleEngine.Schema.UpdateContinuousEffectCommandResponse update_continuous_effect = 98;
                    Lettuce.BattleEngine.Schema.DebugRemoveContinuousEffectCommandResponse debug_remove_continuous_effect = 105;
                    Lettuce.BattleEngine.Schema.ApplySpecialConditionsCommandResponse apply_special_conditions = 53;
                    Lettuce.BattleEngine.Schema.DiscardFieldPokemonCommandResponse discard_field_pokemon = 14;
                    Lettuce.BattleEngine.Schema.RecoverSpecialConditionsCommandResponse recover_special_conditions = 74;
                    Lettuce.BattleEngine.Schema.ShuffleFieldPokemonIntoLibraryCommandResponse shuffle_field_pokemon_into_library = 97;
                    Lettuce.BattleEngine.Schema.MoveEnergiesCommandResponse move_energies = 54;
                    Lettuce.BattleEngine.Schema.MoveAllEnergiesFromFieldCommandResponse move_all_energies_from_field = 55;
                    Lettuce.BattleEngine.Schema.AttachActiveEnergyFromZoneCommandResponse attach_active_energy_from_zone = 56;
                    Lettuce.BattleEngine.Schema.AttachEnergyCommandResponse attach_energy = 57;
                    Lettuce.BattleEngine.Schema.DiscardEnergyCommandResponse discard_energy = 58;
                    Lettuce.BattleEngine.Schema.DiscardEnergyRandomlyFromAllFieldCommandResponse discard_energy_randomly_from_all_field = 63;
                    Lettuce.BattleEngine.Schema.DestroyEnergyRandomlyCommandResponse destroy_energy_randomly = 59;
                    Lettuce.BattleEngine.Schema.SpawnEnergyCommandResponse spawn_energy = 60;
                    Lettuce.BattleEngine.Schema.AttachEnergyFromDiscardPileCommandResponse attach_energy_from_discard_pile = 208;
                    Lettuce.BattleEngine.Schema.DrawCardFromLibraryCommandResponse draw_card_from_library = 61;
                    Lettuce.BattleEngine.Schema.PickBasicPokemonRandomlyFromLibraryCommandResponse pick_basic_pokemon_randomly_from_library = 62;
                    Lettuce.BattleEngine.Schema.PickTypeSpecifiedPokemonRandomlyFromLibraryCommandResponse pick_type_specified_pokemon_randomly_from_library = 68;
                    Lettuce.BattleEngine.Schema.DrawRevealedCardCommandResponse draw_revealed_card = 100;
                    Lettuce.BattleEngine.Schema.ExchangeHandCardForLibraryPokemonCommandResponse exchange_hand_card_for_library_pokemon = 203;
                    Lettuce.BattleEngine.Schema.PickNameSpecifiedPokemonRandomlyFromLibraryCommandResponse pick_name_specified_pokemon_randomly_from_library = 204;
                    Lettuce.BattleEngine.Schema.RevealLibraryTopCardCommandResponse reveal_library_top_card = 64;
                    Lettuce.BattleEngine.Schema.PutRevealedCardToLibraryTopCommandResponse put_revealed_card_to_library_top = 65;
                    Lettuce.BattleEngine.Schema.PutRevealedCardToLibraryBottomCommandResponse put_revealed_card_to_library_bottom = 99;
                    Lettuce.BattleEngine.Schema.DiscardFromHandCommandResponse discard_from_hand = 66;
                    Lettuce.BattleEngine.Schema.DiscardMultipleFromHandCommandResponse discard_multiple_from_hand = 88;
                    Lettuce.BattleEngine.Schema.DiscardFromHandRandomlyCommandResponse discard_from_hand_randomly = 89;
                    Lettuce.BattleEngine.Schema.ShuffleHandIntoLibraryCommandResponse shuffle_hand_into_library = 67;
                    Lettuce.BattleEngine.Schema.RevealAndShuffleSelectHandIntoLibraryCommandResponse reveal_and_shuffle_select_hand_into_library = 215;
                    Lettuce.BattleEngine.Schema.RevealHandCommandResponse reveal_hand = 91;
                    Lettuce.BattleEngine.Schema.ReturnRevealedHandCommandResponse return_revealed_hand = 92;
                    Lettuce.BattleEngine.Schema.ReturnPokemonToHandCommandResponse return_pokemon_to_hand = 95;
                    Lettuce.BattleEngine.Schema.PickStageSpecifiedRandomlyFromDiscardPileCommandResponse pick_stage_specified_randomly_from_discard_pile = 211;
                    Lettuce.BattleEngine.Schema.ApplyAbilityEffectDamageCommandResponse apply_ability_effect_damage = 69;
                    Lettuce.BattleEngine.Schema.ApplyAttackEffectDamageCommandResponse apply_attack_effect_damage = 214;
                    Lettuce.BattleEngine.Schema.ApplyHealDamageCommandResponse apply_heal_damage = 71;
                    Lettuce.BattleEngine.Schema.ApplyPokemonToolEffectDamageCommandResponse apply_pokemon_tool_effect_damage = 202;
                    Lettuce.BattleEngine.Schema.MoveDamageAllCommandResponse move_damage_all = 205;
                    Lettuce.BattleEngine.Schema.ReduceCurrentHpCommandResponse reduce_current_hp = 207;
                    Lettuce.BattleEngine.Schema.FlipCoinCommandResponse flip_coin = 72;
                    Lettuce.BattleEngine.Schema.NoOperationCommandResponse no_operation = 75;
                    Lettuce.BattleEngine.Schema.ClearExpectedActionsCommandResponse clear_expected_actions = 3;
                    Lettuce.BattleEngine.Schema.SetExpectedActionsCommandResponse set_expected_actions = 4;
                    Lettuce.BattleEngine.Schema.DiscardLibraryCardsFromTopCommandResponse discard_library_cards_from_top = 210;
                    Lettuce.BattleEngine.Schema.ChangeInactiveEnergyInEnergyZoneRandomlyCommandResponse change_inactive_energy_in_energy_zone_randomly = 216;
                    Lettuce.BattleEngine.Schema.ShuffleRandomHandCardIntoLibraryCommandResponse shuffle_random_hand_card_into_library = 217;
                    Lettuce.BattleEngine.Schema.SpecialConditionInconsistentCheckProcedureCommandResponse special_condition_inconsistent_check_procedure = 219;
                }
            }
            message HiddenCommandRequest {
                oneof request {
                    Lettuce.BattleEngine.Schema.HiddenExecuteStartPhaseDrawStepCommandRequest execute_start_phase_draw_step = 103;
                    Lettuce.BattleEngine.Schema.HiddenSetPokemonToActiveCommandRequest set_pokemon_to_active = 19;
                    Lettuce.BattleEngine.Schema.HiddenSetPokemonToBenchCommandRequest set_pokemon_to_bench = 20;
                    Lettuce.BattleEngine.Schema.HiddenUpdateLogicStateCommandRequest update_logic_state = 35;
                    Lettuce.BattleEngine.Schema.HiddenAddOrUpdateLogicStateCommandRequest add_or_update_logic_state = 36;
                    Lettuce.BattleEngine.Schema.HiddenDrawCardFromLibraryCommandRequest draw_card_from_library = 61;
                    Lettuce.BattleEngine.Schema.HiddenPickBasicPokemonRandomlyFromLibraryCommandRequest pick_basic_pokemon_randomly_from_library = 62;
                    Lettuce.BattleEngine.Schema.HiddenPickTypeSpecifiedPokemonRandomlyFromLibraryCommandRequest pick_type_specified_pokemon_randomly_from_library = 68;
                    Lettuce.BattleEngine.Schema.HiddenDrawRevealedCardCommandRequest draw_revealed_card = 100;
                    Lettuce.BattleEngine.Schema.HiddenExchangeHandCardForLibraryPokemonCommandRequest exchange_hand_card_for_library_pokemon = 203;
                    Lettuce.BattleEngine.Schema.HiddenPickNameSpecifiedPokemonRandomlyFromLibraryCommandRequest pick_name_specified_pokemon_randomly_from_library = 204;
                    Lettuce.BattleEngine.Schema.HiddenRevealLibraryTopCardCommandRequest reveal_library_top_card = 64;
                    Lettuce.BattleEngine.Schema.HiddenPutRevealedCardToLibraryTopCommandRequest put_revealed_card_to_library_top = 65;
                    Lettuce.BattleEngine.Schema.HiddenPutRevealedCardToLibraryBottomCommandRequest put_revealed_card_to_library_bottom = 99;
                    Lettuce.BattleEngine.Schema.HiddenShuffleHandIntoLibraryCommandRequest shuffle_hand_into_library = 67;
                }
            }
            message HiddenCommandResponse {
                oneof response {
                    Lettuce.BattleEngine.Schema.HiddenExecuteStartPhaseDrawStepCommandResponse execute_start_phase_draw_step = 103;
                    Lettuce.BattleEngine.Schema.HiddenSetPokemonToActiveCommandResponse set_pokemon_to_active = 19;
                    Lettuce.BattleEngine.Schema.HiddenSetPokemonToBenchCommandResponse set_pokemon_to_bench = 20;
                    Lettuce.BattleEngine.Schema.HiddenUpdateLogicStateCommandResponse update_logic_state = 35;
                    Lettuce.BattleEngine.Schema.HiddenAddOrUpdateLogicStateCommandResponse add_or_update_logic_state = 36;
                    Lettuce.BattleEngine.Schema.HiddenDrawCardFromLibraryCommandResponse draw_card_from_library = 61;
                    Lettuce.BattleEngine.Schema.HiddenPickBasicPokemonRandomlyFromLibraryCommandResponse pick_basic_pokemon_randomly_from_library = 62;
                    Lettuce.BattleEngine.Schema.HiddenPickTypeSpecifiedPokemonRandomlyFromLibraryCommandResponse pick_type_specified_pokemon_randomly_from_library = 68;
                    Lettuce.BattleEngine.Schema.HiddenDrawRevealedCardCommandResponse draw_revealed_card = 100;
                    Lettuce.BattleEngine.Schema.HiddenExchangeHandCardForLibraryPokemonCommandResponse exchange_hand_card_for_library_pokemon = 203;
                    Lettuce.BattleEngine.Schema.HiddenPickNameSpecifiedPokemonRandomlyFromLibraryCommandResponse pick_name_specified_pokemon_randomly_from_library = 204;
                    Lettuce.BattleEngine.Schema.HiddenRevealLibraryTopCardCommandResponse reveal_library_top_card = 64;
                    Lettuce.BattleEngine.Schema.HiddenPutRevealedCardToLibraryTopCommandResponse put_revealed_card_to_library_top = 65;
                    Lettuce.BattleEngine.Schema.HiddenPutRevealedCardToLibraryBottomCommandResponse put_revealed_card_to_library_bottom = 99;
                    Lettuce.BattleEngine.Schema.HiddenShuffleHandIntoLibraryCommandResponse shuffle_hand_into_library = 67;
                }
            }
            message ExecuteEndPhaseCommandRequest {
            }
            message ExecuteEndPhaseCommandResponse {
            }
            message ExecuteChangeTurnCommandRequest {
            }
            message ExecuteChangeTurnCommandResponse {
            }
            message ExpectActionOnDetermineAttackCommandRequest {
                Lettuce.BattleEngine.Schema.PokemonAttackId attack_id = 1;
            }
            message ExpectActionOnDetermineAttackCommandResponse {
            }
            message EndDetermineAttackCommandRequest {
            }
            message EndDetermineAttackCommandResponse {
            }
            message ExecuteAttackPreExecutionStepCommandRequest {
            }
            message ExecuteAttackPreExecutionStepCommandResponse {
            }
            message ExecuteAttackDamageCalculationStepCommandRequest {
            }
            message ExecuteAttackDamageCalculationStepCommandResponse {
            }
            message ExecuteAttackDamageStepCommandRequest {
            }
            message ExecuteAttackDamageStepCommandResponse {
            }
            message ExecuteAttackPostExecutionStepCommandRequest {
            }
            message ExecuteAttackPostExecutionStepCommandResponse {
            }
            message ExecuteAttackEndStepCommandRequest {
            }
            message ExecuteAttackEndStepCommandResponse {
                Lettuce.BattleEngine.Schema.BattleObjectId attacker = 1;
                bool has_attack_failed = 2;
                Lettuce.BattleEngine.Schema.PokemonAttackId attack_id = 3;
                Lettuce.BattleEngine.Schema.AttackFailedReason attack_failed_reason = 4;
            }
            message ExecutePokemonCheckupSpecialConditionStepCommandRequest {
            }
            message ExecutePokemonCheckupSpecialConditionStepCommandResponse {
            }
            message ExecutePokemonCheckupDiscardEnergyStepCommandRequest {
            }
            message ExecutePokemonCheckupDiscardEnergyStepCommandResponse {
                Lettuce.BattleEngine.Schema.PlayerId turn_player_id = 1;
                Lettuce.BattleEngine.Schema.EnergyType discarded = 2;
            }
            message ExecutePokemonCheckupEffectStepCommandRequest {
            }
            message ExecutePokemonCheckupEffectStepCommandResponse {
            }
            message FixAttackDamageCalculationCommandRequest {
            }
            message FixAttackDamageCalculationCommandResponse {
            }
            message ProgressSpecialConditionCheckCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId check_player = 1;
                Lettuce.BattleEngine.Schema.SpecialConditionCheckProgress check_progress = 2;
            }
            message ProgressSpecialConditionCheckCommandResponse {
            }
            message ExecuteSpecialConditionCheckCommandRequest {
            }
            message ExecuteSpecialConditionCheckCommandResponse {
            }
            message DoneSpecialConditionCheckCommandRequest {
            }
            message DoneSpecialConditionCheckCommandResponse {
            }
            message ExecuteStartPhaseDrawStepCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
            }
            message ExecuteStartPhaseDrawStepCommandResponse {
                repeated Lettuce.BattleEngine.Schema.CardId card_ids = 1;
                Lettuce.BattleEngine.Schema.DrawCardResultType draw_card_result_type = 2;
            }
            message HiddenExecuteStartPhaseDrawStepCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
            }
            message HiddenExecuteStartPhaseDrawStepCommandResponse {
                Lettuce.BattleEngine.Schema.DrawCardResultType draw_card_result_type = 1;
                int32 draw_count = 2;
            }
            message ExecuteStartPhaseSpawnEnergyStepCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
            }
            message ExecuteStartPhaseSpawnEnergyStepCommandResponse {
            }
            message ApplyPoisonedDamageCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId check_player = 1;
                Lettuce.BattleEngine.Schema.DamageAmount damage_value = 2;
            }
            message ApplyPoisonedDamageCommandResponse {
                Lettuce.BattleEngine.Schema.DamageAmount damage = 1;
            }
            message ApplyBurnedDamageCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId check_player = 1;
                Lettuce.BattleEngine.Schema.DamageAmount damage_amount = 2;
            }
            message ApplyBurnedDamageCommandResponse {
                Lettuce.BattleEngine.Schema.DamageAmount damage_amount = 1;
            }
            message StartBattlePreparationInitialSetupCommandRequest {
            }
            message StartBattlePreparationInitialSetupCommandResponse {
            }
            message DecideFirstTurnPlayerCommandRequest {
            }
            message DecideFirstTurnPlayerCommandResponse {
            }
            message SetupInitialEnergyZoneCommandRequest {
            }
            message SetupInitialEnergyZoneCommandResponse {
            }
            message SetupInitialLibraryCommandRequest {
            }
            message SetupInitialLibraryCommandResponse {
            }
            message SetupInitialHandCommandRequest {
            }
            message SetupInitialHandCommandResponse {
            }
            message StartPrepareFieldCommandRequest {
            }
            message StartPrepareFieldCommandResponse {
            }
            message SetPokemonToActiveCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player = 1;
                Lettuce.BattleEngine.Schema.CardId active = 2;
            }
            message SetPokemonToActiveCommandResponse {
            }
            message HiddenSetPokemonToActiveCommandRequest {
            }
            message HiddenSetPokemonToActiveCommandResponse {
            }
            message SetPokemonToBenchCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player = 1;
                Lettuce.BattleEngine.Schema.BenchFieldSet bench = 2;
            }
            message SetPokemonToBenchCommandResponse {
            }
            message HiddenSetPokemonToBenchCommandRequest {
            }
            message HiddenSetPokemonToBenchCommandResponse {
            }
            message EndPrepareFieldCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player = 1;
            }
            message EndPrepareFieldCommandResponse {
            }
            message FlipAllFaceDownCardsCommandRequest {
            }
            message FlipAllFaceDownCardsCommandResponse {
                repeated Lettuce.BattleEngine.Schema.ContinuousEffectId applied_effects = 1;
            }
            message StartFirstTurnCommandRequest {
            }
            message StartFirstTurnCommandResponse {
            }
            message CompleteGameCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId winner_player = 1;
                bool is_draw = 2;
                Lettuce.BattleEngine.Schema.BattleResultState result_state = 3;
            }
            message CompleteGameCommandResponse {
            }
            message ConcedeCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
            }
            message ConcedeCommandResponse {
            }
            message AddAttackPlusDamageAmountCommandRequest {
                Lettuce.BattleEngine.Schema.DamageAmount amount = 1;
            }
            message AddAttackPlusDamageAmountCommandResponse {
            }
            message SetAttackPreExecutionIgnoreWeaknessCommandRequest {
            }
            message SetAttackPreExecutionIgnoreWeaknessCommandResponse {
            }
            message SetAttackFailedCommandRequest {
                Lettuce.BattleEngine.Schema.AttackFailedReason reason = 1;
            }
            message SetAttackFailedCommandResponse {
            }
            message SetOriginalAttackDamageAmountCommandRequest {
                Lettuce.BattleEngine.Schema.DamageAmount amount = 1;
            }
            message SetOriginalAttackDamageAmountCommandResponse {
            }
            message MisfireCopyAttackCommandRequest {
            }
            message MisfireCopyAttackCommandResponse {
            }
            message SetExtraAttackOrderCommandRequest {
                repeated Lettuce.BattleEngine.Schema.ExtraAttackOrder orders = 1;
            }
            message SetExtraAttackOrderCommandResponse {
            }
            message SetExtraAttackOrderRandomlyCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId controller = 1;
                int32 count = 2;
                Lettuce.BattleEngine.Schema.DamageAmount damage = 3;
                Lettuce.BattleEngine.Schema.ExtraAttackOrderOption damage_calculation_option_for_active = 4;
                Lettuce.BattleEngine.Schema.ExtraAttackOrderOption damage_calculation_option_for_bench = 5;
            }
            message SetExtraAttackOrderRandomlyCommandResponse {
            }
            message SetChildAttackCommandRequest {
                Lettuce.BattleEngine.Schema.PokemonAttackId attack_id = 1;
            }
            message SetChildAttackCommandResponse {
            }
            message ProgressPhaseCommandRequest {
                Lettuce.BattleEngine.Schema.PhaseType phase_type = 1;
            }
            message ProgressPhaseCommandResponse {
                Lettuce.BattleEngine.Schema.PhaseType phase_type = 1;
            }
            message ProgressAttackPhaseCommandRequest {
                Lettuce.BattleEngine.Schema.PokemonAttackId attack_id = 1;
            }
            message ProgressAttackPhaseCommandResponse {
                Lettuce.BattleEngine.Schema.PhaseType phase_type = 1;
            }
            message ProgressStepCommandRequest {
                Lettuce.BattleEngine.Schema.StepType step_type = 1;
            }
            message ProgressStepCommandResponse {
                Lettuce.BattleEngine.Schema.StepType step_type = 1;
            }
            message ExecutePhaseCommandRequest {
                Lettuce.BattleEngine.Schema.PhaseType phase_type = 1;
            }
            message ExecutePhaseCommandResponse {
                Lettuce.BattleEngine.Schema.PhaseType phase_type = 1;
            }
            message ExecuteStepCommandRequest {
            }
            message ExecuteStepCommandResponse {
            }
            message DoneStepCommandRequest {
            }
            message DoneStepCommandResponse {
            }
            message DonePhaseCommandRequest {
            }
            message DonePhaseCommandResponse {
            }
            message ReserveTurnEndCommandRequest {
            }
            message ReserveTurnEndCommandResponse {
            }
            message SkipAttackDamageStepCommandRequest {
            }
            message SkipAttackDamageStepCommandResponse {
            }
            message ExecuteLogicCommandRequest {
                Lettuce.BattleEngine.Schema.LogicSpecifier logic_specifier = 1;
            }
            message ExecuteLogicCommandResponse {
                Lettuce.BattleEngine.Schema.OneShotEffectApplySpecificationResult apply_result = 1;
            }
            message FinishLogicCommandRequest {
                Lettuce.BattleEngine.Schema.LogicSpecifier logic_specifier = 1;
            }
            message FinishLogicCommandResponse {
            }
            message UpdateLogicStateCommandRequest {
                Lettuce.BattleEngine.Schema.LogicStateScopeType scope = 1;
                Lettuce.BattleEngine.Schema.Logic.LogicState state = 2;
            }
            message UpdateLogicStateCommandResponse {
            }
            message HiddenUpdateLogicStateCommandRequest {
            }
            message HiddenUpdateLogicStateCommandResponse {
            }
            message AddOrUpdateLogicStateCommandRequest {
                Lettuce.BattleEngine.Schema.LogicStateScopeType scope = 1;
                Lettuce.BattleEngine.Schema.Logic.LogicState state = 2;
            }
            message AddOrUpdateLogicStateCommandResponse {
            }
            message HiddenAddOrUpdateLogicStateCommandRequest {
            }
            message HiddenAddOrUpdateLogicStateCommandResponse {
            }
            message RemoveLogicStateCommandRequest {
                Lettuce.BattleEngine.Schema.LogicStateScopeType scope = 1;
                Lettuce.BattleEngine.Schema.LogicSpecifier logic_specifier = 2;
            }
            message RemoveLogicStateCommandResponse {
            }
            message ReserveProcedureExecutionCommandRequest {
            }
            message ReserveProcedureExecutionCommandResponse {
            }
            message ExecuteTriggeredLogicCheckProcedureCommandRequest {
            }
            message ExecuteTriggeredLogicCheckProcedureCommandResponse {
            }
            message ExecuteKnockedOutCheckProcedureCommandRequest {
            }
            message ExecuteKnockedOutCheckProcedureCommandResponse {
            }
            message ExecuteWinnerCheckProcedureCommandRequest {
            }
            message ExecuteWinnerCheckProcedureCommandResponse {
                repeated Lettuce.BattleEngine.Schema.KnockedOutPokemon player1_knocked_out_pokemon = 1;
                repeated Lettuce.BattleEngine.Schema.KnockedOutPokemon player2_knocked_out_pokemon = 2;
            }
            message ProgressProcedureCommandRequest {
                Lettuce.BattleEngine.Schema.ProcedureType procedure_type = 1;
            }
            message ProgressProcedureCommandResponse {
            }
            message PutActiveFromBenchOnKnockedOutCommandRequest {
            }
            message PutActiveFromBenchOnKnockedOutCommandResponse {
                Lettuce.BattleEngine.Schema.BattleObjectId player1_put_pokemon = 1;
                Lettuce.BattleEngine.Schema.BattleObjectId player2_put_pokemon = 2;
                repeated Lettuce.BattleEngine.Schema.ContinuousEffectId applied_effects = 3;
            }
            message SelectNextActiveOnKnockedOutCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                Lettuce.BattleEngine.Schema.BattleObjectId next_active = 2;
            }
            message SelectNextActiveOnKnockedOutCommandResponse {
            }
            message PlayTrainerCommandRequest {
                Lettuce.BattleEngine.Schema.CardId card_id = 1;
            }
            message PlayTrainerCommandResponse {
            }
            message ActivateAbilityCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player = 1;
                Lettuce.BattleEngine.Schema.CardId card_id = 2;
            }
            message ActivateAbilityCommandResponse {
            }
            message DiscardActivatingTrainerCommandRequest {
            }
            message DiscardActivatingTrainerCommandResponse {
                Lettuce.BattleEngine.Schema.PlayerId player = 1;
                Lettuce.BattleEngine.Schema.CardId discarded_card = 2;
            }
            message EvolvePokemonCommandRequest {
                Lettuce.BattleEngine.Schema.BattleObjectId from = 1;
                Lettuce.BattleEngine.Schema.CardId to = 2;
            }
            message EvolvePokemonCommandResponse {
                Lettuce.BattleEngine.Schema.CardId evolved_from_pokemon_card = 1;
                repeated Lettuce.BattleEngine.Schema.SpecialConditionRecovery recoveries = 2;
                repeated Lettuce.BattleEngine.Schema.ContinuousEffectId applied_effects = 3;
            }
            message PlayPokemonToBenchCommandRequest {
                Lettuce.BattleEngine.Schema.BenchFieldSet bench = 1;
            }
            message PlayPokemonToBenchCommandResponse {
                repeated Lettuce.BattleEngine.Schema.ContinuousEffectId applied_effects = 1;
            }
            message PlayPokemonToBenchFromDiscardPileCommandRequest {
                repeated Lettuce.BattleEngine.Schema.CardId cards = 1;
            }
            message PlayPokemonToBenchFromDiscardPileCommandResponse {
                repeated Lettuce.BattleEngine.Schema.PlayerId players = 1;
                repeated Lettuce.BattleEngine.Schema.ContinuousEffectId applied_effects = 2;
            }
            message PlayPokemonToBenchRandomlyFromLibraryCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player = 1;
                Lettuce.BattleEngine.Schema.CardName name = 2;
                int32 count = 3;
            }
            message PlayPokemonToBenchRandomlyFromLibraryCommandResponse {
                repeated Lettuce.BattleEngine.Schema.BattleObjectId played_pokemons = 1;
                bool is_shuffled = 2;
                repeated Lettuce.BattleEngine.Schema.ContinuousEffectId applied_effects = 3;
            }
            message PlayStageSpecifiedPokemonToBenchRandomlyFromLibraryCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player = 1;
                Lettuce.BattleEngine.Schema.EvolutionStage stage = 2;
                int32 count = 3;
            }
            message PlayStageSpecifiedPokemonToBenchRandomlyFromLibraryCommandResponse {
                repeated Lettuce.BattleEngine.Schema.BattleObjectId played_pokemons = 1;
                bool is_shuffled = 2;
                repeated Lettuce.BattleEngine.Schema.ContinuousEffectId applied_effects = 3;
            }
            message RetreatPokemonCommandRequest {
                Lettuce.BattleEngine.Schema.BattleObjectId bench = 1;
                Lettuce.BattleEngine.Schema.EnergySet energies = 2;
            }
            message RetreatPokemonCommandResponse {
                Lettuce.BattleEngine.Schema.BattleObjectId retreated_pokemon = 1;
                repeated Lettuce.BattleEngine.Schema.SpecialConditionRecovery recoveries = 2;
                Lettuce.BattleEngine.Schema.EnergySet discarded = 3;
                repeated Lettuce.BattleEngine.Schema.ContinuousEffectId applied_effects = 4;
            }
            message AttachPokemonToolCommandRequest {
                Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                Lettuce.BattleEngine.Schema.CardId tool = 2;
            }
            message AttachPokemonToolCommandResponse {
            }
            message DiscardPokemonToolCommandRequest {
                Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                Lettuce.BattleEngine.Schema.BattleObjectId tool = 2;
            }
            message DiscardPokemonToolCommandResponse {
                Lettuce.BattleEngine.Schema.CardId discarded_card = 1;
            }
            message DiscardAllPokemonToolCommandRequest {
                Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                Lettuce.BattleEngine.Schema.LogicSpecifier logic_specifier = 2;
            }
            message DiscardAllPokemonToolCommandResponse {
                repeated Lettuce.BattleEngine.Schema.CardId tools = 1;
                bool is_prevented = 2;
            }
            message ExchangeBenchToActiveCommandRequest {
                Lettuce.BattleEngine.Schema.BattleObjectId bench = 1;
                Lettuce.BattleEngine.Schema.LogicSpecifier applier_logic = 2;
            }
            message ExchangeBenchToActiveCommandResponse {
                Lettuce.BattleEngine.Schema.BattleObjectId changed_pokemon = 1;
                repeated Lettuce.BattleEngine.Schema.SpecialConditionRecovery recoveries = 2;
                repeated Lettuce.BattleEngine.Schema.ContinuousEffectId applied_effects = 3;
                bool is_prevented = 4;
            }
            message ApplyContinuousEffectCommandRequest {
                repeated Lettuce.BattleEngine.Schema.Effect.ContinuousEffect effect = 1;
                Lettuce.BattleEngine.Schema.LogicSpecifier applier_logic = 2;
            }
            message ApplyContinuousEffectCommandResponse {
                repeated Lettuce.BattleEngine.Schema.BattleObjectId prevented_pokemons = 1;
            }
            message UpdateContinuousEffectCommandRequest {
                Lettuce.BattleEngine.Schema.Effect.ContinuousEffect effect = 1;
            }
            message UpdateContinuousEffectCommandResponse {
            }
            message DebugRemoveContinuousEffectCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId target_player = 1;
                Lettuce.BattleEngine.Schema.BattleObjectId target_pokemon = 2;
                repeated Lettuce.BattleEngine.Schema.ContinuousEffectId target_continuous_effect = 3;
            }
            message DebugRemoveContinuousEffectCommandResponse {
            }
            message ApplySpecialConditionsCommandRequest {
                Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                repeated Lettuce.BattleEngine.Schema.SpecialConditionType types_ = 2;
                Lettuce.BattleEngine.Schema.LogicSpecifier applier_logic = 3;
                Lettuce.BattleEngine.Schema.DamageAmount damage_value = 6;
            }
            message ApplySpecialConditionsCommandResponse {
                Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                repeated Lettuce.BattleEngine.Schema.SpecialConditionType types_ = 2;
                Lettuce.BattleEngine.Schema.LogicSpecifier applier_logic = 3;
                bool is_prevented = 4;
                repeated Lettuce.BattleEngine.Schema.SpecialConditionType same_type_applied = 5;
                Lettuce.BattleEngine.Schema.DamageAmount damage_value = 6;
            }
            message DiscardFieldPokemonCommandRequest {
                Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
            }
            message DiscardFieldPokemonCommandResponse {
                repeated Lettuce.BattleEngine.Schema.CardId cards = 1;
            }
            message RecoverSpecialConditionsCommandRequest {
                Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                repeated Lettuce.BattleEngine.Schema.SpecialConditionType types_ = 2;
                Lettuce.BattleEngine.Schema.PlayerId check_player = 3;
                Lettuce.BattleEngine.Schema.SpecialConditionCheckProgress check_progress = 4;
            }
            message RecoverSpecialConditionsCommandResponse {
                repeated Lettuce.BattleEngine.Schema.SpecialConditionRecovery recoveries = 1;
            }
            message ShuffleFieldPokemonIntoLibraryCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                Lettuce.BattleEngine.Schema.BattleObjectId target = 2;
                Lettuce.BattleEngine.Schema.LogicSpecifier applier_logic = 3;
            }
            message ShuffleFieldPokemonIntoLibraryCommandResponse {
                repeated Lettuce.BattleEngine.Schema.Card put_cards = 1;
                bool is_prevented = 2;
                bool is_shuffled = 3;
                Lettuce.BattleEngine.Schema.CardId discarded_tool_card = 4;
            }
            message MoveEnergiesCommandRequest {
                Lettuce.BattleEngine.Schema.BattleObjectId from = 1;
                Lettuce.BattleEngine.Schema.BattleObjectId to = 2;
                Lettuce.BattleEngine.Schema.EnergySet energies = 3;
            }
            message MoveEnergiesCommandResponse {
                Lettuce.BattleEngine.Schema.EnergyMove energy_move = 1;
            }
            message MoveAllEnergiesFromFieldCommandRequest {
                Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                Lettuce.BattleEngine.Schema.EnergyType energy_type = 2;
            }
            message MoveAllEnergiesFromFieldCommandResponse {
                repeated Lettuce.BattleEngine.Schema.EnergyMove energy_moves = 1;
            }
            message AttachActiveEnergyFromZoneCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                Lettuce.BattleEngine.Schema.BattleObjectId pokemon = 2;
            }
            message AttachActiveEnergyFromZoneCommandResponse {
                Lettuce.BattleEngine.Schema.EnergyType attached_energy = 1;
            }
            message AttachEnergyCommandRequest {
                repeated Lettuce.BattleEngine.Schema.EnergyAttachRequest request = 1;
            }
            message AttachEnergyCommandResponse {
                repeated Lettuce.BattleEngine.Schema.EnergyAttachResponse response = 1;
            }
            message DiscardEnergyCommandRequest {
                Lettuce.BattleEngine.Schema.BattleObjectId pokemon = 1;
                Lettuce.BattleEngine.Schema.EnergySet energies = 2;
                Lettuce.BattleEngine.Schema.LogicSpecifier applier_logic = 3;
            }
            message DiscardEnergyCommandResponse {
                Lettuce.BattleEngine.Schema.EnergySet discarded_energies = 1;
                bool is_prevented = 2;
            }
            message DiscardEnergyRandomlyFromAllFieldCommandRequest {
                int32 count = 1;
                Lettuce.BattleEngine.Schema.LogicSpecifier applier_logic = 2;
            }
            message DiscardEnergyRandomlyFromAllFieldCommandResponse {
                repeated Lettuce.BattleEngine.Schema.EnergyDiscard discarded_energies = 1;
                repeated Lettuce.BattleEngine.Schema.BattleObjectId prevented_pokemons = 2;
            }
            message DestroyEnergyRandomlyCommandRequest {
                Lettuce.BattleEngine.Schema.BattleObjectId pokemon = 1;
                int32 count = 2;
                Lettuce.BattleEngine.Schema.LogicSpecifier applier_logic = 3;
            }
            message DestroyEnergyRandomlyCommandResponse {
                Lettuce.BattleEngine.Schema.EnergySet destroyed = 1;
                bool is_prevented = 2;
            }
            message SpawnEnergyCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
            }
            message SpawnEnergyCommandResponse {
            }
            message AttachEnergyFromDiscardPileCommandRequest {
                repeated Lettuce.BattleEngine.Schema.EnergyAttachRequest request = 1;
            }
            message AttachEnergyFromDiscardPileCommandResponse {
                repeated Lettuce.BattleEngine.Schema.EnergyAttachResponse response = 1;
            }
            message DrawCardFromLibraryCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                Lettuce.BattleEngine.Schema.CardId invocator_card = 2;
                int32 count = 3;
            }
            message DrawCardFromLibraryCommandResponse {
                repeated Lettuce.BattleEngine.Schema.CardId card_ids = 1;
                Lettuce.BattleEngine.Schema.DrawCardResultType draw_card_result_type = 2;
            }
            message HiddenDrawCardFromLibraryCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                Lettuce.BattleEngine.Schema.CardId invocator_card = 2;
                int32 count = 3;
            }
            message HiddenDrawCardFromLibraryCommandResponse {
                int32 count = 1;
                Lettuce.BattleEngine.Schema.DrawCardResultType draw_card_result_type = 2;
            }
            message PickBasicPokemonRandomlyFromLibraryCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                Lettuce.BattleEngine.Schema.CardId invocator_card = 2;
                int32 count = 3;
            }
            message PickBasicPokemonRandomlyFromLibraryCommandResponse {
                repeated Lettuce.BattleEngine.Schema.CardId card_ids = 1;
                bool is_shuffled = 2;
                Lettuce.BattleEngine.Schema.DrawCardResultType draw_card_result_type = 3;
            }
            message HiddenPickBasicPokemonRandomlyFromLibraryCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                Lettuce.BattleEngine.Schema.CardId invocator_card = 2;
                int32 count = 3;
            }
            message HiddenPickBasicPokemonRandomlyFromLibraryCommandResponse {
                int32 count = 1;
                bool is_shuffled = 2;
                Lettuce.BattleEngine.Schema.DrawCardResultType draw_card_result_type = 3;
            }
            message PickTypeSpecifiedPokemonRandomlyFromLibraryCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                Lettuce.BattleEngine.Schema.CardId invocator_card = 2;
                Lettuce.BattleEngine.Schema.EnergyType pokemon_type = 3;
                int32 count = 4;
            }
            message PickTypeSpecifiedPokemonRandomlyFromLibraryCommandResponse {
                repeated Lettuce.BattleEngine.Schema.CardId card_ids = 1;
                bool is_shuffled = 2;
                Lettuce.BattleEngine.Schema.DrawCardResultType draw_card_result_type = 3;
            }
            message HiddenPickTypeSpecifiedPokemonRandomlyFromLibraryCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                Lettuce.BattleEngine.Schema.CardId invocator_card = 2;
                Lettuce.BattleEngine.Schema.EnergyType pokemon_type = 3;
                int32 count = 4;
            }
            message HiddenPickTypeSpecifiedPokemonRandomlyFromLibraryCommandResponse {
                int32 count = 1;
                bool is_shuffled = 2;
                Lettuce.BattleEngine.Schema.DrawCardResultType draw_card_result_type = 3;
            }
            message DrawRevealedCardCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
            }
            message DrawRevealedCardCommandResponse {
                repeated Lettuce.BattleEngine.Schema.CardId draw_cards = 1;
            }
            message HiddenDrawRevealedCardCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
            }
            message HiddenDrawRevealedCardCommandResponse {
                int32 count = 1;
            }
            message ExchangeHandCardForLibraryPokemonCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                repeated Lettuce.BattleEngine.Schema.CardId hand_card_ids = 2;
            }
            message ExchangeHandCardForLibraryPokemonCommandResponse {
                repeated Lettuce.BattleEngine.Schema.CardId hand_card_ids = 1;
                repeated Lettuce.BattleEngine.Schema.Card library_cards = 2;
                repeated Lettuce.BattleEngine.Schema.CardId refund_hand_card_ids = 3;
                bool is_shuffled_after_card_to_library = 4;
                bool is_shuffled_at_last = 5;
            }
            message HiddenExchangeHandCardForLibraryPokemonCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                int32 hand_card_count = 2;
            }
            message HiddenExchangeHandCardForLibraryPokemonCommandResponse {
                int32 hand_card_count = 1;
                int32 library_card_count = 2;
                bool is_shuffled_after_card_to_library = 3;
                bool is_shuffled_at_last = 4;
            }
            message PickNameSpecifiedPokemonRandomlyFromLibraryCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                Lettuce.BattleEngine.Schema.CardName name1 = 2;
                Lettuce.BattleEngine.Schema.CardName name2 = 3;
                Lettuce.BattleEngine.Schema.CardName name3 = 4;
                int32 count = 5;
            }
            message PickNameSpecifiedPokemonRandomlyFromLibraryCommandResponse {
                repeated Lettuce.BattleEngine.Schema.CardId card_ids = 1;
                bool is_shuffled = 2;
                Lettuce.BattleEngine.Schema.DrawCardResultType draw_card_result_type = 3;
            }
            message HiddenPickNameSpecifiedPokemonRandomlyFromLibraryCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                Lettuce.BattleEngine.Schema.CardName name1 = 2;
                Lettuce.BattleEngine.Schema.CardName name2 = 3;
                Lettuce.BattleEngine.Schema.CardName name3 = 4;
                int32 count = 5;
            }
            message HiddenPickNameSpecifiedPokemonRandomlyFromLibraryCommandResponse {
                int32 count = 1;
                bool is_shuffled = 2;
                Lettuce.BattleEngine.Schema.DrawCardResultType draw_card_result_type = 3;
            }
            message RevealLibraryTopCardCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                Lettuce.BattleEngine.Schema.PlayerId viewer_player_id = 2;
                int32 count = 3;
            }
            message RevealLibraryTopCardCommandResponse {
                repeated Lettuce.BattleEngine.Schema.Card revealed_cards = 1;
            }
            message HiddenRevealLibraryTopCardCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                Lettuce.BattleEngine.Schema.PlayerId viewer_player_id = 2;
                int32 count = 3;
            }
            message HiddenRevealLibraryTopCardCommandResponse {
                int32 count = 1;
            }
            message PutRevealedCardToLibraryTopCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                repeated Lettuce.BattleEngine.Schema.CardId cards = 2;
                Lettuce.BattleEngine.Schema.PlayerId invocator_player_id = 3;
            }
            message PutRevealedCardToLibraryTopCommandResponse {
                repeated Lettuce.BattleEngine.Schema.Card put_cards = 1;
            }
            message HiddenPutRevealedCardToLibraryTopCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                int32 count = 2;
                Lettuce.BattleEngine.Schema.PlayerId invocator_player_id = 3;
            }
            message HiddenPutRevealedCardToLibraryTopCommandResponse {
                int32 count = 1;
            }
            message PutRevealedCardToLibraryBottomCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                repeated Lettuce.BattleEngine.Schema.CardId cards = 2;
            }
            message PutRevealedCardToLibraryBottomCommandResponse {
                repeated Lettuce.BattleEngine.Schema.Card put_cards = 1;
            }
            message HiddenPutRevealedCardToLibraryBottomCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                int32 count = 2;
            }
            message HiddenPutRevealedCardToLibraryBottomCommandResponse {
                int32 count = 1;
            }
            message DiscardFromHandCommandRequest {
                Lettuce.BattleEngine.Schema.CardId target_id = 1;
                Lettuce.BattleEngine.Schema.PlayerId player_id = 2;
            }
            message DiscardFromHandCommandResponse {
            }
            message DiscardMultipleFromHandCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                repeated Lettuce.BattleEngine.Schema.CardId target_ids = 2;
            }
            message DiscardMultipleFromHandCommandResponse {
            }
            message DiscardFromHandRandomlyCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                int32 count = 2;
            }
            message DiscardFromHandRandomlyCommandResponse {
                repeated Lettuce.BattleEngine.Schema.CardId discarded_cards = 1;
            }
            message ShuffleHandIntoLibraryCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
            }
            message ShuffleHandIntoLibraryCommandResponse {
                repeated Lettuce.BattleEngine.Schema.Card shuffled_cards = 1;
                bool is_shuffled = 2;
            }
            message HiddenShuffleHandIntoLibraryCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
            }
            message HiddenShuffleHandIntoLibraryCommandResponse {
                int32 count = 1;
                bool is_shuffled = 2;
            }
            message RevealAndShuffleSelectHandIntoLibraryCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                repeated Lettuce.BattleEngine.Schema.CardId select_card_ids = 2;
            }
            message RevealAndShuffleSelectHandIntoLibraryCommandResponse {
                repeated Lettuce.BattleEngine.Schema.Card shuffled_cards = 1;
                bool is_shuffled = 2;
            }
            message RevealHandCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
            }
            message RevealHandCommandResponse {
            }
            message ReturnRevealedHandCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
            }
            message ReturnRevealedHandCommandResponse {
            }
            message ReturnPokemonToHandCommandRequest {
                Lettuce.BattleEngine.Schema.BattleObjectId pokemon = 1;
                Lettuce.BattleEngine.Schema.LogicSpecifier applier_logic = 2;
            }
            message ReturnPokemonToHandCommandResponse {
                Lettuce.BattleEngine.Schema.CardId discarded_tool_card = 1;
                repeated Lettuce.BattleEngine.Schema.Card cards = 2;
                bool is_prevented = 3;
            }
            message PickStageSpecifiedRandomlyFromDiscardPileCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                Lettuce.BattleEngine.Schema.EvolutionStage stage = 2;
                int32 count = 3;
            }
            message PickStageSpecifiedRandomlyFromDiscardPileCommandResponse {
                repeated Lettuce.BattleEngine.Schema.Card cards = 1;
                Lettuce.BattleEngine.Schema.PickDiscardedCardResultType pick_discarded_card_result_type = 2;
            }
            message ApplyAbilityEffectDamageCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId applier = 1;
                Lettuce.BattleEngine.Schema.CardId applier_card = 2;
                repeated Lettuce.BattleEngine.Schema.BattleObjectId targets = 3;
                Lettuce.BattleEngine.Schema.DamageAmount amount = 4;
            }
            message ApplyAbilityEffectDamageCommandResponse {
            }
            message ApplyAttackEffectDamageCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId applier = 1;
                Lettuce.BattleEngine.Schema.CardId applier_card = 2;
                repeated Lettuce.BattleEngine.Schema.BattleObjectId targets = 3;
                Lettuce.BattleEngine.Schema.DamageAmount amount = 4;
                Lettuce.BattleEngine.Schema.ContinuousEffectId effect_id = 5;
            }
            message ApplyAttackEffectDamageCommandResponse {
                repeated Lettuce.BattleEngine.Schema.EffectDamageResult results = 1;
            }
            message ApplyHealDamageCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId applier = 1;
                Lettuce.BattleEngine.Schema.LogicSpecifier applier_logic = 2;
                repeated Lettuce.BattleEngine.Schema.BattleObjectId targets = 3;
                Lettuce.BattleEngine.Schema.DamageAmount amount = 4;
            }
            message ApplyHealDamageCommandResponse {
                repeated Lettuce.BattleEngine.Schema.HealResult results = 1;
            }
            message ApplyPokemonToolEffectDamageCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId applier = 1;
                Lettuce.BattleEngine.Schema.BattleObjectId applier_tool = 2;
                repeated Lettuce.BattleEngine.Schema.BattleObjectId targets = 3;
                Lettuce.BattleEngine.Schema.DamageAmount amount = 4;
            }
            message ApplyPokemonToolEffectDamageCommandResponse {
            }
            message MoveDamageAllCommandRequest {
                Lettuce.BattleEngine.Schema.BattleObjectId from = 1;
                Lettuce.BattleEngine.Schema.BattleObjectId to = 2;
            }
            message MoveDamageAllCommandResponse {
                Lettuce.BattleEngine.Schema.DamageAmount amount = 1;
            }
            message ReduceCurrentHpCommandRequest {
                Lettuce.BattleEngine.Schema.LogicSpecifier applier_logic = 1;
                Lettuce.BattleEngine.Schema.PlayerId applier = 2;
                Lettuce.BattleEngine.Schema.BattleObjectId target_id = 3;
                Lettuce.BattleEngine.Schema.DamageAmount damage = 4;
            }
            message ReduceCurrentHpCommandResponse {
                bool is_prevented = 1;
            }
            message FlipCoinCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                Lettuce.BattleEngine.Schema.FlipCoinFlipType flip_type = 2;
                int32 count = 3;
                Lettuce.BattleEngine.Schema.LogicSpecifier applier_logic = 4;
                Lettuce.BattleEngine.Schema.ContinuousEffectId effect = 5;
            }
            message FlipCoinCommandResponse {
                repeated Lettuce.BattleEngine.Schema.FlipCoinResultType results = 1;
            }
            message NoOperationCommandRequest {
            }
            message NoOperationCommandResponse {
            }
            message ClearExpectedActionsCommandRequest {
            }
            message ClearExpectedActionsCommandResponse {
            }
            message SetExpectedActionsCommandRequest {
                repeated Lettuce.BattleEngine.Schema.ExpectedAction expected_actions = 1;
                int32 action_requirement_id = 2;
                Lettuce.BattleEngine.Schema.LogicSpecifier cause_logic = 3;
            }
            message SetExpectedActionsCommandResponse {
            }
            message DiscardLibraryCardsFromTopCommandRequest {
                int32 discard_amount = 1;
                Lettuce.BattleEngine.Schema.PlayerId player_id = 2;
            }
            message DiscardLibraryCardsFromTopCommandResponse {
                repeated Lettuce.BattleEngine.Schema.CardId card_ids = 1;
            }
            message ChangeInactiveEnergyInEnergyZoneRandomlyCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
            }
            message ChangeInactiveEnergyInEnergyZoneRandomlyCommandResponse {
                Lettuce.BattleEngine.Schema.EnergyType before_energy_type = 1;
                Lettuce.BattleEngine.Schema.EnergyType after_energy_type = 2;
            }
            message ShuffleRandomHandCardIntoLibraryCommandRequest {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                int32 card_count = 2;
            }
            message ShuffleRandomHandCardIntoLibraryCommandResponse {
                repeated Lettuce.BattleEngine.Schema.Card randomly_selected_cards = 1;
                bool is_shuffled = 2;
            }
            message SpecialConditionInconsistentCheckProcedureCommandRequest {
            }
            message SpecialConditionInconsistentCheckProcedureCommandResponse {
            }
            message Game {
                Lettuce.BattleEngine.Schema.Origin origin = 1;
                Lettuce.BattleEngine.Schema.Store store = 2;
                Lettuce.BattleEngine.Schema.Meta meta = 3;
            }
            message Meta {
                int64 version = 1;
            }
            message HiddenGame {
                Lettuce.BattleEngine.Schema.HiddenOrigin origin = 1;
                Lettuce.BattleEngine.Schema.HiddenStore store = 2;
                Lettuce.BattleEngine.Schema.Meta meta = 3;
            }
            message HiddenGameUpdation {
                Lettuce.BattleEngine.Schema.HiddenOriginUpdation origin = 1;
                Lettuce.BattleEngine.Schema.HiddenStoreUpdation store = 2;
                Lettuce.BattleEngine.Schema.MetaUpdation meta = 3;
            }
            message GameProgress {
                repeated Lettuce.BattleEngine.Schema.CommandExecutedResult command_executed_results = 1;
            }
            message CommandExecutedResult {
                Lettuce.BattleEngine.Schema.HiddenGameUpdation updation = 1;
                oneof request {
                    Lettuce.BattleEngine.Schema.CommandRequest command_request = 2;
                    Lettuce.BattleEngine.Schema.HiddenCommandRequest hidden_command_request = 3;
                }
                oneof response {
                    Lettuce.BattleEngine.Schema.CommandResponse command_response = 4;
                    Lettuce.BattleEngine.Schema.HiddenCommandResponse hidden_command_response = 5;
                }
            }
            message NextActionInfo {
                repeated Lettuce.BattleEngine.Schema.ActionHint self_action_hints = 1;
            }
            message GameRecord {
                Lettuce.BattleEngine.Schema.Game game = 1;
                repeated Lettuce.BattleEngine.Schema.Action actions = 2;
            }
            message GameUpdation {
                Lettuce.BattleEngine.Schema.OriginUpdation origin = 1;
                Lettuce.BattleEngine.Schema.StoreUpdation store = 2;
                Lettuce.BattleEngine.Schema.MetaUpdation meta = 3;
            }
            message MetaUpdation {
                optional int64 version = 1;
            }
            message ActionHint {
                bool can_play = 1;
                repeated Lettuce.BattleEngine.Schema.ExpectedActionNotice notices = 2;
                oneof hint {
                    Lettuce.BattleEngine.Schema.NoHint no_hint = 1000;
                    Lettuce.BattleEngine.Schema.EvolveActionHint evolve = 1001;
                    Lettuce.BattleEngine.Schema.RetreatActionHint retreat = 1002;
                    Lettuce.BattleEngine.Schema.ActivateAbilityActionHint activate_ability = 1003;
                    Lettuce.BattleEngine.Schema.DetermineAttackActionHint determine_attack = 1004;
                    Lettuce.BattleEngine.Schema.FlipCoinActionHint flip_coin = 1005;
                    Lettuce.BattleEngine.Schema.PlayPokemonActionHint play_pokemon = 1006;
                    Lettuce.BattleEngine.Schema.PlayTrainerActionHint play_trainer = 1007;
                    Lettuce.BattleEngine.Schema.PrepareActiveFieldActionHint prepare_active_field = 1008;
                    Lettuce.BattleEngine.Schema.PrepareBenchFieldActionHint prepare_bench_field = 1009;
                    Lettuce.BattleEngine.Schema.EndPrepareFieldActionHint end_prepare_field = 1010;
                    Lettuce.BattleEngine.Schema.SelectFieldPokemonActionHint select_field_pokemon = 1011;
                    Lettuce.BattleEngine.Schema.DetermineTurnEndActionHint determine_turn_end = 1012;
                    Lettuce.BattleEngine.Schema.SelectAttachedEnergyActionHint select_attached_energy = 1013;
                    Lettuce.BattleEngine.Schema.AttachEnergyFromZoneActionHint attach_energy_from_zone = 1014;
                    Lettuce.BattleEngine.Schema.SelectLibraryRevealedCardActionHint select_library_revealed_card = 1015;
                    Lettuce.BattleEngine.Schema.SelectBenchOnKnockedOutActionHint select_bench_on_knocked_out = 1016;
                    Lettuce.BattleEngine.Schema.ConcedeActionHint concede = 1017;
                    Lettuce.BattleEngine.Schema.DiscardFieldPokemonActionHint discard_field_pokemon = 1018;
                    Lettuce.BattleEngine.Schema.SelectAttackActionHint select_attack = 1019;
                    Lettuce.BattleEngine.Schema.ConfirmActionHint confirm = 1020;
                    Lettuce.BattleEngine.Schema.AttachEnergyByEffectActionHint attach_energy_by_effect = 1030;
                    Lettuce.BattleEngine.Schema.SelectDiscardPileCardActionHint select_discard_pile_card = 1040;
                    Lettuce.BattleEngine.Schema.ForceCompleteGameActionHint force_complete_game = 1050;
                    Lettuce.BattleEngine.Schema.AttachPokemonToolActionHint attach_pokemon_tool = 1060;
                    Lettuce.BattleEngine.Schema.SelectHandCardActionHint select_hand_card = 1070;
                    Lettuce.BattleEngine.Schema.SelectPlayerActionHint select_player = 1080;
                }
            }
            message NoHint {
            }
            message EvolveActionHint {
                repeated Lettuce.BattleEngine.Schema.EvolvableInfo candidates = 1;
            }
            message EvolvableInfo {
                Lettuce.BattleEngine.Schema.BattleObjectId from = 1;
                Lettuce.BattleEngine.Schema.CardId to = 2;
            }
            message RetreatActionHint {
                repeated Lettuce.BattleEngine.Schema.BattleObjectId candidates = 1;
                Lettuce.BattleEngine.Schema.EnergySet required_energies = 2;
                Lettuce.BattleEngine.Schema.EnergySet retreater_attached_energies = 3;
                Lettuce.BattleEngine.Schema.EnergySet retreater_usable_energies = 4;
            }
            message ActivateAbilityActionHint {
                repeated Lettuce.BattleEngine.Schema.CardId candidates = 1;
            }
            message ActivateAbilityActionCandidate {
                Lettuce.BattleEngine.Schema.PokemonAbilityId ability_id = 1;
                bool satisfying_additional_attack_condition = 2;
                repeated Lettuce.BattleEngine.Schema.ActionHint sequential_action_hints = 3;
            }
            message DetermineAttackActionHint {
                Lettuce.BattleEngine.Schema.CardId card_id = 1;
                repeated Lettuce.BattleEngine.Schema.DetermineAttackActionCandidate candidates = 2;
            }
            message DetermineAttackActionCandidate {
                Lettuce.BattleEngine.Schema.PokemonAttackId attack_id = 1;
                bool satisfying_additional_attack_condition = 2;
                repeated Lettuce.BattleEngine.Schema.ActionHint sequential_action_hints = 3;
            }
            message FlipCoinActionHint {
                int32 flip_count = 1;
                Lettuce.BattleEngine.Schema.FlipCoinFlipType flip_type = 2;
                repeated Lettuce.BattleEngine.Schema.FlipCoinResultType results = 3;
            }
            message PlayPokemonActionHint {
                repeated Lettuce.BattleEngine.Schema.CardId candidates = 1;
                repeated int32 playable_bench_positions = 2;
            }
            message PlayTrainerActionValidationResult {
                Lettuce.BattleEngine.Schema.CardId card_id = 1;
                Lettuce.BattleEngine.Schema.ActionSpecificationResultReason reason = 2;
                bool can_play = 3;
                repeated Lettuce.BattleEngine.Schema.ActionHint sequential_action_hints = 4;
                repeated Lettuce.BattleEngine.Schema.ActionSpecificationResultReasonParameter reason_parameters = 5;
            }
            message PlayTrainerActionHint {
                repeated Lettuce.BattleEngine.Schema.PlayTrainerActionValidationResult validation_results = 1;
            }
            message PrepareActiveFieldActionHint {
                repeated Lettuce.BattleEngine.Schema.CardId candidates = 1;
            }
            message PrepareBenchFieldActionHint {
                repeated Lettuce.BattleEngine.Schema.CardId candidates = 1;
                repeated int32 positions = 2;
            }
            message EndPrepareFieldActionHint {
            }
            message SelectFieldPokemonActionHint {
                repeated Lettuce.BattleEngine.Schema.BattleObjectId candidates = 1;
                int32 select_count = 2;
            }
            message DetermineTurnEndActionHint {
            }
            message SelectAttachedEnergyActionHint {
                repeated Lettuce.BattleEngine.Schema.AttachedEnergy candidates = 1;
                Lettuce.BattleEngine.Schema.EnergySet selectable_energies = 2;
                Lettuce.BattleEngine.Schema.EnergySet select_required_energies = 3;
            }
            message AttachEnergyFromZoneActionHint {
                repeated Lettuce.BattleEngine.Schema.BattleObjectId candidates = 1;
            }
            message SelectLibraryRevealedCardActionHint {
                int32 select_count = 1;
                repeated Lettuce.BattleEngine.Schema.CardId candidates = 2;
            }
            message SelectBenchOnKnockedOutActionHint {
                repeated Lettuce.BattleEngine.Schema.BattleObjectId candidates = 1;
            }
            message ConcedeActionHint {
            }
            message DiscardFieldPokemonActionHint {
                repeated Lettuce.BattleEngine.Schema.BattleObjectId candidates = 1;
            }
            message SelectAttackActionHint {
                repeated Lettuce.BattleEngine.Schema.PokemonAttackSet candidates = 1;
            }
            message ConfirmActionHint {
                Lettuce.BattleEngine.Schema.ConfirmTargetType target = 1;
            }
            message AttachEnergyByEffectActionHint {
                repeated Lettuce.BattleEngine.Schema.AttachEnergyByEffectActionCandidate candidates = 1;
                Lettuce.BattleEngine.Schema.EnergySet energies = 2;
            }
            message AttachEnergyByEffectActionCandidate {
                Lettuce.BattleEngine.Schema.BattleObjectId object_id = 1;
                Lettuce.BattleEngine.Schema.EnergySet attached_energies = 2;
            }
            message SelectDiscardPileCardActionHint {
                repeated Lettuce.BattleEngine.Schema.CardId candidates = 1;
                int32 select_count = 2;
            }
            message ForceCompleteGameActionHint {
            }
            message AttachPokemonToolActionHint {
                repeated Lettuce.BattleEngine.Schema.AttachPokemonToolCandidate candidates = 1;
            }
            message AttachPokemonToolCandidate {
                Lettuce.BattleEngine.Schema.CardId tool = 1;
                repeated Lettuce.BattleEngine.Schema.BattleObjectId target_candidates = 2;
            }
            message SelectHandCardActionHint {
                repeated Lettuce.BattleEngine.Schema.CardId candidates = 1;
                int32 select_count = 2;
                Lettuce.BattleEngine.Schema.PlayerId player_id = 3;
            }
            message SelectPlayerActionHint {
                repeated Lettuce.BattleEngine.Schema.PlayerId candidates = 1;
                Lettuce.BattleEngine.Schema.CardId card_id = 2;
            }
            message Origin {
                Lettuce.BattleEngine.Schema.Match match = 1;
                Lettuce.BattleEngine.Schema.Regulation regulation = 2;
                Lettuce.BattleEngine.Schema.RandomSpecification random = 3;
            }
            message Match {
                Lettuce.BattleEngine.Schema.OriginPlayer player1 = 1;
                Lettuce.BattleEngine.Schema.OriginPlayer player2 = 2;
            }
            message RandomSpecification {
                uint64 seed = 1;
            }
            message Regulation {
                int32 final_turn_number = 1;
                Lettuce.BattleEngine.Schema.PrizeRegulation prize = 2;
                Lettuce.BattleEngine.Schema.PlayerId first_turn_player = 3;
                bool skip_prepare_library = 4;
                bool skip_prepare_field = 5;
                bool skip_prepare_hand = 6;
            }
            message PrizeRegulation {
                bool change_winning_prize = 1;
                Lettuce.BattleEngine.Schema.PrizeAmount winning_prize = 2;
            }
            message OriginPlayer {
                Lettuce.BattleEngine.Schema.PlayerId battle_player_id = 1;
                Lettuce.BattleEngine.Schema.Deck deck = 3;
                string app_player_id = 4;
            }
            message Deck {
                repeated Lettuce.BattleEngine.Schema.OriginCard cards = 1;
                repeated Lettuce.BattleEngine.Schema.EnergyType energy_types = 2;
                Lettuce.BattleEngine.Schema.DeckSupply supply = 3;
                bool keeps_origin_deck_order_on_prepare_library = 4;
            }
            message DeckSupply {
                string deck_shield_id = 1;
                string play_mat_id = 2;
                string battle_coin_id = 3;
            }
            message OriginCard {
                Lettuce.BattleEngine.Schema.CardId id = 1;
                Lettuce.BattleEngine.Schema.MasterCardId master_card_id = 2;
                Lettuce.BattleEngine.Schema.CardViewInfo view_info = 3;
            }
            message HiddenDeck {
                bool has_public = 1;
                Lettuce.BattleEngine.Schema.Deck public = 2;
                Lettuce.BattleEngine.Schema.PrivateDeck private_deck = 3;
            }
            message PrivateDeck {
                repeated Lettuce.BattleEngine.Schema.EnergyType energy_types = 2;
                Lettuce.BattleEngine.Schema.DeckSupply supply = 3;
            }
            message HiddenRandomSpecification {
            }
            message HiddenMatch {
                Lettuce.BattleEngine.Schema.HiddenOriginPlayer player1 = 1;
                Lettuce.BattleEngine.Schema.HiddenOriginPlayer player2 = 2;
            }
            message HiddenOrigin {
                Lettuce.BattleEngine.Schema.HiddenMatch match = 1;
                Lettuce.BattleEngine.Schema.Regulation regulation = 2;
                Lettuce.BattleEngine.Schema.HiddenRandomSpecification random = 3;
            }
            message HiddenOriginPlayer {
                Lettuce.BattleEngine.Schema.PlayerId battle_player_id = 1;
                Lettuce.BattleEngine.Schema.HiddenDeck deck = 3;
                string app_player_id = 4;
            }
            message HiddenMatchUpdation {
                Lettuce.BattleEngine.Schema.HiddenOriginPlayerUpdation player1 = 1;
                Lettuce.BattleEngine.Schema.HiddenOriginPlayerUpdation player2 = 2;
            }
            message HiddenOriginPlayerUpdation {
                Lettuce.BattleEngine.Schema.PlayerIdUpdation battle_player_id = 1;
                Lettuce.BattleEngine.Schema.HiddenDeckUpdation deck = 3;
                string app_player_id = 4;
            }
            message HiddenOriginUpdation {
                Lettuce.BattleEngine.Schema.HiddenMatchUpdation match = 1;
                Lettuce.BattleEngine.Schema.RegulationUpdation regulation = 2;
                Lettuce.BattleEngine.Schema.HiddenRandomSpecificationUpdation random = 3;
            }
            message HiddenDeckUpdation {
                optional bool has_public = 1;
                Lettuce.BattleEngine.Schema.DeckUpdation public = 2;
                Lettuce.BattleEngine.Schema.PrivateDeckUpdation private_deck = 3;
            }
            message HiddenRandomSpecificationUpdation {
            }
            message PrivateDeckUpdation {
                repeated Lettuce.BattleEngine.Schema.EnergyTypeEnumRepeatedUpdation energy_types = 2;
                Lettuce.BattleEngine.Schema.DeckSupplyUpdation supply = 3;
            }
            message DeckSupplyUpdation {
                string deck_shield_id = 1;
                string play_mat_id = 2;
                string battle_coin_id = 3;
            }
            message DeckUpdation {
                repeated Lettuce.BattleEngine.Schema.OriginCardRepeatedUpdation cards = 1;
                repeated Lettuce.BattleEngine.Schema.EnergyTypeEnumRepeatedUpdation energy_types = 2;
                Lettuce.BattleEngine.Schema.DeckSupplyUpdation supply = 3;
                optional bool keeps_origin_deck_order_on_prepare_library = 4;
            }
            message MatchUpdation {
                Lettuce.BattleEngine.Schema.OriginPlayerUpdation player1 = 1;
                Lettuce.BattleEngine.Schema.OriginPlayerUpdation player2 = 2;
            }
            message OriginCardRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.OriginCard add = 2;
                    Lettuce.BattleEngine.Schema.OriginCardUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message OriginCardUpdation {
                Lettuce.BattleEngine.Schema.CardIdUpdation id = 1;
                Lettuce.BattleEngine.Schema.MasterCardIdUpdation master_card_id = 2;
                Lettuce.BattleEngine.Schema.CardViewInfoUpdation view_info = 3;
            }
            message OriginPlayerUpdation {
                Lettuce.BattleEngine.Schema.PlayerIdUpdation battle_player_id = 1;
                Lettuce.BattleEngine.Schema.DeckUpdation deck = 3;
                string app_player_id = 4;
            }
            message OriginUpdation {
                Lettuce.BattleEngine.Schema.MatchUpdation match = 1;
                Lettuce.BattleEngine.Schema.RegulationUpdation regulation = 2;
                Lettuce.BattleEngine.Schema.RandomSpecificationUpdation random = 3;
            }
            message PrizeRegulationUpdation {
                optional bool change_winning_prize = 1;
                Lettuce.BattleEngine.Schema.PrizeAmountUpdation winning_prize = 2;
            }
            message RandomSpecificationUpdation {
                optional uint64 seed = 1;
            }
            message RegulationUpdation {
                optional int32 final_turn_number = 1;
                Lettuce.BattleEngine.Schema.PrizeRegulationUpdation prize = 2;
                Lettuce.BattleEngine.Schema.PlayerIdUpdation first_turn_player = 3;
                optional bool skip_prepare_library = 4;
                optional bool skip_prepare_field = 5;
                optional bool skip_prepare_hand = 6;
            }
            message Int32ValueRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    int32 add = 2;
                    int32 updation = 3;
                    bool removed = 4;
                }
            }
            message Int64ValueRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    int64 add = 2;
                    int64 updation = 3;
                    bool removed = 4;
                }
            }
            message UInt64ValueRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    uint64 add = 2;
                    uint64 updation = 3;
                    bool removed = 4;
                }
            }
            message BoolValueRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    bool add = 2;
                    bool updation = 3;
                    bool removed = 4;
                }
            }
            message StringValueRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    string add = 2;
                    string updation = 3;
                    bool removed = 4;
                }
            }
            message SpecialCondition {
                Lettuce.BattleEngine.Schema.SpecialConditionType type = 1;
                Lettuce.BattleEngine.Schema.SpecialConditionCause cause = 2;
                int32 applied_turn_number = 3;
                Lettuce.BattleEngine.Schema.DamageAmount override_damage = 4;
            }
            message SpecialConditionCause {
                Lettuce.BattleEngine.Schema.CardId card = 1;
            }
            message SpecialConditionCauseUpdation {
                Lettuce.BattleEngine.Schema.CardIdUpdation card = 1;
            }
            message SpecialConditionRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.SpecialCondition add = 2;
                    Lettuce.BattleEngine.Schema.SpecialConditionUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message SpecialConditionUpdation {
                Lettuce.BattleEngine.Schema.SpecialConditionTypeEnumUpdation type = 1;
                Lettuce.BattleEngine.Schema.SpecialConditionCauseUpdation cause = 2;
                optional int32 applied_turn_number = 3;
                Lettuce.BattleEngine.Schema.DamageAmountUpdation override_damage = 4;
            }
            message Store {
                Lettuce.BattleEngine.Schema.Turn turn = 1;
                Lettuce.BattleEngine.Schema.Players players = 2;
                Lettuce.BattleEngine.Schema.Field field = 3;
                Lettuce.BattleEngine.Schema.Result result = 4;
                Lettuce.BattleEngine.Schema.Logic.LogicStore logic_store = 5;
                Lettuce.BattleEngine.Schema.Random random = 6;
                Lettuce.BattleEngine.Schema.Effect.ContinuousEffectStore continuous_effect_store = 7;
                Lettuce.BattleEngine.Schema.Card activating_trainer = 8;
                Lettuce.BattleEngine.Schema.BattleObjectStore battle_object_store = 9;
                Lettuce.BattleEngine.Schema.BattlePreparation battle_preparation = 10;
                Lettuce.BattleEngine.Schema.CardStore card_store = 11;
            }
            message CardStore {
            }
            message BattleObjectStore {
                Lettuce.BattleEngine.Schema.BattleObjectId last_published_id = 2;
            }
            message Phase {
                Lettuce.BattleEngine.Schema.PhaseType phase_type = 1;
                Lettuce.BattleEngine.Schema.PhaseState phase_state = 2;
                Lettuce.BattleEngine.Schema.Step step = 3;
                Lettuce.BattleEngine.Schema.ActionPhaseInfo action_phase_info = 4;
            }
            message Step {
                Lettuce.BattleEngine.Schema.StepType step_type = 1;
                Lettuce.BattleEngine.Schema.StepState step_state = 2;
                Lettuce.BattleEngine.Schema.AttackPhaseAttackJudgementStepInfo attack_phase_attack_judgement_step_info = 3;
                Lettuce.BattleEngine.Schema.AttackDamageCalculationStepInfo attack_damage_calculation_step_info = 4;
                Lettuce.BattleEngine.Schema.AttackPhaseCommonStepInfo attack_phase_common_step_info = 6;
                Lettuce.BattleEngine.Schema.PokemonCheckupSpecialConditionStepInfo pokemon_checkup_special_condition_step_info = 7;
            }
            message PrepareFieldInfo {
                repeated Lettuce.BattleEngine.Schema.PlayerId prepare_ended_players = 1;
            }
            message ActionPhaseInfo {
                Lettuce.BattleEngine.Schema.ActionPhaseDetermineAttackInfo determine_attack_info = 1;
                bool is_turn_end_reserved = 2;
            }
            message ActionPhaseDetermineAttackInfo {
                bool is_action_on_determine_attack_expected = 1;
                Lettuce.BattleEngine.Schema.PokemonAttackId action_expected_attack_id = 2;
            }
            message AttackPhaseCommonStepInfo {
                Lettuce.BattleEngine.Schema.PokemonAttackId attack_id = 1;
                Lettuce.BattleEngine.Schema.PokemonAttackId child_attack_id = 2;
            }
            message AttackPhaseAttackJudgementStepInfo {
                bool is_attack_failed = 1;
                Lettuce.BattleEngine.Schema.AttackFailedReason attack_failed_reason = 2;
                bool is_misfire_copy_attack = 3;
            }
            message PokemonCheckupSpecialConditionStepInfo {
                Lettuce.BattleEngine.Schema.PlayerId check_player = 1;
                Lettuce.BattleEngine.Schema.SpecialConditionCheckProgress check_progress = 2;
                Lettuce.BattleEngine.Schema.SpecialConditionCheckProgressState check_progress_state = 3;
            }
            message OriginalAttackDamageOverride {
                bool should_override = 1;
                Lettuce.BattleEngine.Schema.DamageAmount override_value = 2;
            }
            message AttackDamageCalculationStepInfo {
                Lettuce.BattleEngine.Schema.PublicBasicAttackDamage public_basic_damage = 1;
                Lettuce.BattleEngine.Schema.DamageAmount plus_damage_amount = 2;
                bool ignores_weakness = 3;
                bool ignores_resistance = 4;
                bool ignores_attacker_effects = 5;
                bool ignores_defender_effects = 6;
                Lettuce.BattleEngine.Schema.OriginalAttackDamageOverride original_attack_damage_override = 7;
                bool is_calculation_fixed = 8;
                repeated Lettuce.BattleEngine.Schema.ExtraAttackOrder extra_attacks = 9;
                Lettuce.BattleEngine.Schema.AttackDamageCalculationResult calculation_result = 10;
                Lettuce.BattleEngine.Schema.AttackDamageAppliedResult applied_result = 12;
                bool skips_damage_step = 13;
            }
            message AttackDamageCalculationResult {
                bool skips_main_attack = 1;
                Lettuce.BattleEngine.Schema.DamageAmount damage = 2;
                bool is_weakness = 3;
                bool is_resisted = 4;
                int32 effect_delta = 5;
                repeated Lettuce.BattleEngine.Schema.ExtraAttackCalculationResult extra_attacks = 6;
            }
            message AttackDamageAppliedResult {
                bool skips_main_attack = 1;
                Lettuce.BattleEngine.Schema.DamageAmount damage = 2;
                bool is_weakness = 3;
                bool is_resisted = 4;
                int32 effect_delta = 5;
                bool is_prevented = 6;
                repeated Lettuce.BattleEngine.Schema.ExtraAttackAppliedResult extra_attacks = 7;
            }
            message TurnFlags {
                bool retreated = 1;
                Lettuce.BattleEngine.Schema.CardId used_support = 2;
                bool determined_attack = 3;
            }
            message Turn {
                int32 number = 1;
                Lettuce.BattleEngine.Schema.Phase phase = 2;
                Lettuce.BattleEngine.Schema.TurnFlags flags = 3;
                Lettuce.BattleEngine.Schema.PlayerId turn_player_id = 4;
                Lettuce.BattleEngine.Schema.ActionRequirement action_requirement = 5;
                Lettuce.BattleEngine.Schema.Procedure procedure = 6;
                Lettuce.BattleEngine.Schema.PlayerId prev_turn_player = 7;
            }
            message BattlePreparation {
                Lettuce.BattleEngine.Schema.BattlePreparationState state = 1;
                Lettuce.BattleEngine.Schema.PlayerId first_turn_player = 2;
                Lettuce.BattleEngine.Schema.PrepareFieldInfo prepare_field_info = 3;
            }
            message Procedure {
                Lettuce.BattleEngine.Schema.ProcedureType procedure_type = 1;
                Lettuce.BattleEngine.Schema.ProcedureState procedure_state = 2;
                Lettuce.BattleEngine.Schema.KnockedOutCheckInfo knocked_out_check_info = 3;
            }
            message KnockedOutCheckInfo {
                Lettuce.BattleEngine.Schema.BattleObjectId player1_next_active = 1;
                Lettuce.BattleEngine.Schema.BattleObjectId player2_next_active = 2;
            }
            message ActionRequirement {
                repeated Lettuce.BattleEngine.Schema.ExpectedAction expected_actions = 1;
                int32 action_requirement_id = 2;
                int32 action_required_count_in_this_turn = 3;
                Lettuce.BattleEngine.Schema.LogicSpecifier cause_logic = 4;
            }
            message Players {
                Lettuce.BattleEngine.Schema.Player player1 = 1;
                Lettuce.BattleEngine.Schema.Player player2 = 2;
            }
            message Player {
                Lettuce.BattleEngine.Schema.PlayerId id = 1;
                Lettuce.BattleEngine.Schema.Hand hand = 2;
                Lettuce.BattleEngine.Schema.Library library = 3;
                Lettuce.BattleEngine.Schema.DiscardPile discard_pile = 4;
                Lettuce.BattleEngine.Schema.EnergyZone energy_zone = 5;
                Lettuce.BattleEngine.Schema.PrizeAmount prize = 6;
                Lettuce.BattleEngine.Schema.LibraryRevealment library_revealment = 7;
                Lettuce.BattleEngine.Schema.HandRevealment hand_revealment = 8;
                Lettuce.BattleEngine.Schema.PlayerFlags flags = 9;
                Lettuce.BattleEngine.Schema.InferableHiddenCards inferable_nondeterministic_cards = 10;
            }
            message PlayerFlags {
                int32 last_pokemon_knocked_out_by_attack_damage_turn = 1;
            }
            message Hand {
                repeated Lettuce.BattleEngine.Schema.Card cards = 1;
                Lettuce.BattleEngine.Schema.InferableHiddenCards inferable_cards = 2;
            }
            message HandRevealment {
                repeated Lettuce.BattleEngine.Schema.CardId cards = 1;
            }
            message Library {
                repeated Lettuce.BattleEngine.Schema.Card cards = 1;
                Lettuce.BattleEngine.Schema.InferableOrderedHiddenCards inferable_self_ordered_cards = 2;
                Lettuce.BattleEngine.Schema.InferableOrderedHiddenCards inferable_opponent_ordered_cards = 3;
                Lettuce.BattleEngine.Schema.InferableHiddenCards inferable_opponent_unordered_cards = 4;
            }
            message LibraryRevealment {
                repeated Lettuce.BattleEngine.Schema.Card cards = 1;
                repeated Lettuce.BattleEngine.Schema.PlayerId viewer_player_ids = 2;
                bool is_inferred = 3;
                bool is_opponent_more_predictable = 4;
                bool is_self_more_predictable = 5;
            }
            message DiscardPile {
                repeated Lettuce.BattleEngine.Schema.Card cards = 1;
                Lettuce.BattleEngine.Schema.EnergySet energies = 2;
            }
            message EnergyZone {
                Lettuce.BattleEngine.Schema.EnergyType active = 1;
                Lettuce.BattleEngine.Schema.EnergyType inactive = 2;
            }
            message Card {
                Lettuce.BattleEngine.Schema.CardId id = 1;
                Lettuce.BattleEngine.Schema.PlayerId controller = 2;
                Lettuce.BattleEngine.Schema.OriginCard origin = 3;
            }
            message FaceDownCard {
                Lettuce.BattleEngine.Schema.Card card = 1;
            }
            message Field {
                Lettuce.BattleEngine.Schema.PlayerField player1_field = 1;
                Lettuce.BattleEngine.Schema.PlayerField player2_field = 2;
            }
            message PokemonObject {
                Lettuce.BattleEngine.Schema.BattleObjectId id = 1;
                Lettuce.BattleEngine.Schema.PlayerId controller = 2;
                repeated Lettuce.BattleEngine.Schema.Card pokemons = 3;
                Lettuce.BattleEngine.Schema.DamageAmount damage = 4;
                Lettuce.BattleEngine.Schema.EnergySet attached_energy_set = 5;
                bool will_knocked_out = 6;
                int32 pokemon_played_turn_number = 7;
                Lettuce.BattleEngine.Schema.CardId will_knocked_out_from = 8;
                Lettuce.BattleEngine.Schema.PokemonObjectFlags object_flags = 9;
                Lettuce.BattleEngine.Schema.EnergyType will_knocked_out_from_attack_type = 10;
                repeated Lettuce.BattleEngine.Schema.PokemonToolObject tools = 11;
            }
            message ActivePokemonObject {
                Lettuce.BattleEngine.Schema.PokemonObject pokemon = 1;
                repeated Lettuce.BattleEngine.Schema.SpecialCondition special_conditions = 3;
            }
            message BenchPokemonObject {
                Lettuce.BattleEngine.Schema.PokemonObject pokemon = 1;
            }
            message PokemonToolObject {
                Lettuce.BattleEngine.Schema.BattleObjectId id = 1;
                Lettuce.BattleEngine.Schema.PlayerId controller = 2;
                repeated Lettuce.BattleEngine.Schema.Card cards = 3;
            }
            message ActiveField {
                Lettuce.BattleEngine.Schema.PlayerId owner = 1;
                Lettuce.BattleEngine.Schema.ActivePokemonObject active_pokemon = 2;
                Lettuce.BattleEngine.Schema.FaceDownCard face_down_card = 3;
            }
            message BenchField {
                Lettuce.BattleEngine.Schema.PlayerId owner = 1;
                Lettuce.BattleEngine.Schema.BenchPokemonObject bench_pokemon = 2;
                Lettuce.BattleEngine.Schema.FaceDownCard face_down_card = 3;
            }
            message PlayerField {
                Lettuce.BattleEngine.Schema.PlayerId owner_id = 1;
                Lettuce.BattleEngine.Schema.ActiveField active_field = 2;
                repeated Lettuce.BattleEngine.Schema.BenchField bench_fields = 3;
            }
            message PokemonObjectFlags {
                bool will_knocked_out_by_attack_damage = 1;
                Lettuce.BattleEngine.Schema.PokemonAttackId will_knocked_out_by_attack_id = 2;
            }
            message Result {
                Lettuce.BattleEngine.Schema.BattleResultState state = 1;
                Lettuce.BattleEngine.Schema.PlayerId winner = 2;
                Lettuce.BattleEngine.Schema.PlayerId conceded_player = 3;
            }
            message Random {
                uint64 state1 = 1;
                uint64 state2 = 2;
            }
            message KnockedOutPokemon {
                Lettuce.BattleEngine.Schema.CardId knocked_out_pokemon_card = 1;
                repeated Lettuce.BattleEngine.Schema.CardId discarded_cards = 2;
                Lettuce.BattleEngine.Schema.PrizeAmount added_prize = 3;
                bool is_active_pokemon = 4;
                Lettuce.BattleEngine.Schema.EnergyType knocked_out_by_attack_type = 5;
                Lettuce.BattleEngine.Schema.Card knocked_out_by_card = 6;
            }
            message InferableCard {
                Lettuce.BattleEngine.Schema.MasterCardId id = 2;
            }
            message InferableOrderedCard {
                int32 order = 1;
                Lettuce.BattleEngine.Schema.InferableCard card = 2;
            }
            message InferableHiddenCards {
                repeated Lettuce.BattleEngine.Schema.InferableCard cards = 1;
            }
            message InferableOrderedHiddenCards {
                repeated Lettuce.BattleEngine.Schema.InferableOrderedCard cards = 1;
            }
            message HiddenFaceDownCard {
                bool has_public = 1;
                Lettuce.BattleEngine.Schema.Card public = 2;
                bool has_face_down_card = 3;
            }
            message HiddenHand {
                bool has_public = 1;
                Lettuce.BattleEngine.Schema.Hand public = 2;
                int32 count = 3;
            }
            message HiddenHandRevealment {
                bool has_public = 1;
                Lettuce.BattleEngine.Schema.EmbodiedHandRevealment public = 2;
                int32 count = 3;
            }
            message EmbodiedHandRevealment {
                repeated Lettuce.BattleEngine.Schema.Card cards = 1;
            }
            message HiddenLibrary {
                int32 count = 1;
                Lettuce.BattleEngine.Schema.InferableOrderedHiddenCards inferable_self_ordered_cards = 2;
                Lettuce.BattleEngine.Schema.InferableOrderedHiddenCards inferable_opponent_ordered_cards = 3;
                Lettuce.BattleEngine.Schema.InferableHiddenCards inferable_opponent_unordered_cards = 4;
            }
            message HiddenLibraryRevealment {
                bool has_public = 1;
                Lettuce.BattleEngine.Schema.LibraryRevealment public = 2;
                int32 count = 3;
            }
            message HiddenRandom {
            }
            message HiddenPokemonObject {
                Lettuce.BattleEngine.Schema.PokemonObject pokemon_object = 1;
            }
            message HiddenActionRequirement {
                Lettuce.BattleEngine.Schema.ActionRequirement requirement = 1;
                Lettuce.BattleEngine.Schema.OpponentFlipCoinInfo opponent_flip_coin_info = 2;
            }
            message OpponentFlipCoinInfo {
                int32 flip_count = 1;
                Lettuce.BattleEngine.Schema.FlipCoinFlipType flip_type = 2;
            }
            message HiddenCardStore {
                repeated Lettuce.BattleEngine.Schema.Card additional_public_cards = 1;
            }
            message HiddenActiveField {
                Lettuce.BattleEngine.Schema.PlayerId owner = 1;
                Lettuce.BattleEngine.Schema.HiddenActivePokemonObject active_pokemon = 2;
                Lettuce.BattleEngine.Schema.HiddenFaceDownCard face_down_card = 3;
            }
            message HiddenActivePokemonObject {
                Lettuce.BattleEngine.Schema.HiddenPokemonObject pokemon = 1;
                repeated Lettuce.BattleEngine.Schema.SpecialCondition special_conditions = 3;
            }
            message HiddenBenchField {
                Lettuce.BattleEngine.Schema.PlayerId owner = 1;
                Lettuce.BattleEngine.Schema.HiddenBenchPokemonObject bench_pokemon = 2;
                Lettuce.BattleEngine.Schema.HiddenFaceDownCard face_down_card = 3;
            }
            message HiddenBenchPokemonObject {
                Lettuce.BattleEngine.Schema.HiddenPokemonObject pokemon = 1;
            }
            message HiddenField {
                Lettuce.BattleEngine.Schema.HiddenPlayerField player1_field = 1;
                Lettuce.BattleEngine.Schema.HiddenPlayerField player2_field = 2;
            }
            message HiddenPlayer {
                Lettuce.BattleEngine.Schema.PlayerId id = 1;
                Lettuce.BattleEngine.Schema.HiddenHand hand = 2;
                Lettuce.BattleEngine.Schema.HiddenLibrary library = 3;
                Lettuce.BattleEngine.Schema.DiscardPile discard_pile = 4;
                Lettuce.BattleEngine.Schema.EnergyZone energy_zone = 5;
                Lettuce.BattleEngine.Schema.PrizeAmount prize = 6;
                Lettuce.BattleEngine.Schema.HiddenLibraryRevealment library_revealment = 7;
                Lettuce.BattleEngine.Schema.HiddenHandRevealment hand_revealment = 8;
                Lettuce.BattleEngine.Schema.PlayerFlags flags = 9;
                Lettuce.BattleEngine.Schema.InferableHiddenCards inferable_nondeterministic_cards = 10;
            }
            message HiddenPlayerField {
                Lettuce.BattleEngine.Schema.PlayerId owner_id = 1;
                Lettuce.BattleEngine.Schema.HiddenActiveField active_field = 2;
                repeated Lettuce.BattleEngine.Schema.HiddenBenchField bench_fields = 3;
            }
            message HiddenPlayers {
                Lettuce.BattleEngine.Schema.HiddenPlayer player1 = 1;
                Lettuce.BattleEngine.Schema.HiddenPlayer player2 = 2;
            }
            message HiddenStore {
                Lettuce.BattleEngine.Schema.HiddenTurn turn = 1;
                Lettuce.BattleEngine.Schema.HiddenPlayers players = 2;
                Lettuce.BattleEngine.Schema.HiddenField field = 3;
                Lettuce.BattleEngine.Schema.Result result = 4;
                Lettuce.BattleEngine.Schema.Logic.HiddenLogicStore logic_store = 5;
                Lettuce.BattleEngine.Schema.HiddenRandom random = 6;
                Lettuce.BattleEngine.Schema.Effect.ContinuousEffectStore continuous_effect_store = 7;
                Lettuce.BattleEngine.Schema.Card activating_trainer = 8;
                Lettuce.BattleEngine.Schema.BattleObjectStore battle_object_store = 9;
                Lettuce.BattleEngine.Schema.BattlePreparation battle_preparation = 10;
                Lettuce.BattleEngine.Schema.HiddenCardStore card_store = 11;
            }
            message HiddenTurn {
                int32 number = 1;
                Lettuce.BattleEngine.Schema.Phase phase = 2;
                Lettuce.BattleEngine.Schema.TurnFlags flags = 3;
                Lettuce.BattleEngine.Schema.PlayerId turn_player_id = 4;
                Lettuce.BattleEngine.Schema.HiddenActionRequirement action_requirement = 5;
                Lettuce.BattleEngine.Schema.Procedure procedure = 6;
                Lettuce.BattleEngine.Schema.PlayerId prev_turn_player = 7;
            }
            message HiddenActiveFieldUpdation {
                Lettuce.BattleEngine.Schema.PlayerIdUpdation owner = 1;
                Lettuce.BattleEngine.Schema.HiddenActivePokemonObjectUpdation active_pokemon = 2;
                Lettuce.BattleEngine.Schema.HiddenFaceDownCardUpdation face_down_card = 3;
            }
            message HiddenActivePokemonObjectUpdation {
                Lettuce.BattleEngine.Schema.HiddenPokemonObjectUpdation pokemon = 1;
                repeated Lettuce.BattleEngine.Schema.SpecialConditionRepeatedUpdation special_conditions = 3;
            }
            message HiddenBenchFieldRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.HiddenBenchField add = 2;
                    Lettuce.BattleEngine.Schema.HiddenBenchFieldUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message HiddenBenchFieldUpdation {
                Lettuce.BattleEngine.Schema.PlayerIdUpdation owner = 1;
                Lettuce.BattleEngine.Schema.HiddenBenchPokemonObjectUpdation bench_pokemon = 2;
                Lettuce.BattleEngine.Schema.HiddenFaceDownCardUpdation face_down_card = 3;
            }
            message HiddenBenchPokemonObjectUpdation {
                Lettuce.BattleEngine.Schema.HiddenPokemonObjectUpdation pokemon = 1;
            }
            message HiddenFieldUpdation {
                Lettuce.BattleEngine.Schema.HiddenPlayerFieldUpdation player1_field = 1;
                Lettuce.BattleEngine.Schema.HiddenPlayerFieldUpdation player2_field = 2;
            }
            message HiddenPlayerFieldUpdation {
                Lettuce.BattleEngine.Schema.PlayerIdUpdation owner_id = 1;
                Lettuce.BattleEngine.Schema.HiddenActiveFieldUpdation active_field = 2;
                repeated Lettuce.BattleEngine.Schema.HiddenBenchFieldRepeatedUpdation bench_fields = 3;
            }
            message HiddenPlayersUpdation {
                Lettuce.BattleEngine.Schema.HiddenPlayerUpdation player1 = 1;
                Lettuce.BattleEngine.Schema.HiddenPlayerUpdation player2 = 2;
            }
            message HiddenPlayerUpdation {
                Lettuce.BattleEngine.Schema.PlayerIdUpdation id = 1;
                Lettuce.BattleEngine.Schema.HiddenHandUpdation hand = 2;
                Lettuce.BattleEngine.Schema.HiddenLibraryUpdation library = 3;
                Lettuce.BattleEngine.Schema.DiscardPileUpdation discard_pile = 4;
                Lettuce.BattleEngine.Schema.EnergyZoneUpdation energy_zone = 5;
                Lettuce.BattleEngine.Schema.PrizeAmountUpdation prize = 6;
                Lettuce.BattleEngine.Schema.HiddenLibraryRevealmentUpdation library_revealment = 7;
                Lettuce.BattleEngine.Schema.HiddenHandRevealmentUpdation hand_revealment = 8;
                Lettuce.BattleEngine.Schema.PlayerFlagsUpdation flags = 9;
                Lettuce.BattleEngine.Schema.InferableHiddenCardsUpdation inferable_nondeterministic_cards = 10;
            }
            message HiddenStoreUpdation {
                Lettuce.BattleEngine.Schema.HiddenTurnUpdation turn = 1;
                Lettuce.BattleEngine.Schema.HiddenPlayersUpdation players = 2;
                Lettuce.BattleEngine.Schema.HiddenFieldUpdation field = 3;
                Lettuce.BattleEngine.Schema.ResultUpdation result = 4;
                Lettuce.BattleEngine.Schema.Logic.HiddenLogicStoreUpdation logic_store = 5;
                Lettuce.BattleEngine.Schema.HiddenRandomUpdation random = 6;
                Lettuce.BattleEngine.Schema.Effect.ContinuousEffectStoreUpdation continuous_effect_store = 7;
                Lettuce.BattleEngine.Schema.CardUpdation activating_trainer = 8;
                Lettuce.BattleEngine.Schema.BattleObjectStoreUpdation battle_object_store = 9;
                Lettuce.BattleEngine.Schema.BattlePreparationUpdation battle_preparation = 10;
                Lettuce.BattleEngine.Schema.HiddenCardStoreUpdation card_store = 11;
            }
            message HiddenTurnUpdation {
                optional int32 number = 1;
                Lettuce.BattleEngine.Schema.PhaseUpdation phase = 2;
                Lettuce.BattleEngine.Schema.TurnFlagsUpdation flags = 3;
                Lettuce.BattleEngine.Schema.PlayerIdUpdation turn_player_id = 4;
                Lettuce.BattleEngine.Schema.HiddenActionRequirementUpdation action_requirement = 5;
                Lettuce.BattleEngine.Schema.ProcedureUpdation procedure = 6;
                Lettuce.BattleEngine.Schema.PlayerIdUpdation prev_turn_player = 7;
            }
            message EmbodiedHandRevealmentUpdation {
                repeated Lettuce.BattleEngine.Schema.CardRepeatedUpdation cards = 1;
            }
            message HiddenActionRequirementUpdation {
                Lettuce.BattleEngine.Schema.ActionRequirementUpdation requirement = 1;
                Lettuce.BattleEngine.Schema.OpponentFlipCoinInfoUpdation opponent_flip_coin_info = 2;
            }
            message HiddenCardStoreUpdation {
                repeated Lettuce.BattleEngine.Schema.CardRepeatedUpdation additional_public_cards = 1;
            }
            message HiddenFaceDownCardUpdation {
                optional bool has_public = 1;
                Lettuce.BattleEngine.Schema.CardUpdation public = 2;
                optional bool has_face_down_card = 3;
            }
            message HiddenHandRevealmentUpdation {
                optional bool has_public = 1;
                Lettuce.BattleEngine.Schema.EmbodiedHandRevealmentUpdation public = 2;
                optional int32 count = 3;
            }
            message HiddenHandUpdation {
                optional bool has_public = 1;
                Lettuce.BattleEngine.Schema.HandUpdation public = 2;
                optional int32 count = 3;
            }
            message HiddenLibraryRevealmentUpdation {
                optional bool has_public = 1;
                Lettuce.BattleEngine.Schema.LibraryRevealmentUpdation public = 2;
                optional int32 count = 3;
            }
            message HiddenLibraryUpdation {
                optional int32 count = 1;
                Lettuce.BattleEngine.Schema.InferableOrderedHiddenCardsUpdation inferable_self_ordered_cards = 2;
                Lettuce.BattleEngine.Schema.InferableOrderedHiddenCardsUpdation inferable_opponent_ordered_cards = 3;
                Lettuce.BattleEngine.Schema.InferableHiddenCardsUpdation inferable_opponent_unordered_cards = 4;
            }
            message HiddenPokemonObjectUpdation {
                Lettuce.BattleEngine.Schema.PokemonObjectUpdation pokemon_object = 1;
            }
            message HiddenRandomUpdation {
            }
            message OpponentFlipCoinInfoUpdation {
                optional int32 flip_count = 1;
                Lettuce.BattleEngine.Schema.FlipCoinFlipTypeEnumUpdation flip_type = 2;
            }
            message ActionPhaseDetermineAttackInfoUpdation {
                optional bool is_action_on_determine_attack_expected = 1;
                Lettuce.BattleEngine.Schema.PokemonAttackIdUpdation action_expected_attack_id = 2;
            }
            message ActionPhaseInfoUpdation {
                Lettuce.BattleEngine.Schema.ActionPhaseDetermineAttackInfoUpdation determine_attack_info = 1;
                optional bool is_turn_end_reserved = 2;
            }
            message ActionRequirementUpdation {
                repeated Lettuce.BattleEngine.Schema.ExpectedActionRepeatedUpdation expected_actions = 1;
                optional int32 action_requirement_id = 2;
                optional int32 action_required_count_in_this_turn = 3;
                Lettuce.BattleEngine.Schema.LogicSpecifierUpdation cause_logic = 4;
            }
            message ActiveFieldUpdation {
                Lettuce.BattleEngine.Schema.PlayerIdUpdation owner = 1;
                Lettuce.BattleEngine.Schema.ActivePokemonObjectUpdation active_pokemon = 2;
                Lettuce.BattleEngine.Schema.FaceDownCardUpdation face_down_card = 3;
            }
            message ActivePokemonObjectUpdation {
                Lettuce.BattleEngine.Schema.PokemonObjectUpdation pokemon = 1;
                repeated Lettuce.BattleEngine.Schema.SpecialConditionRepeatedUpdation special_conditions = 3;
            }
            message AttackDamageAppliedResultUpdation {
                optional bool skips_main_attack = 1;
                Lettuce.BattleEngine.Schema.DamageAmountUpdation damage = 2;
                optional bool is_weakness = 3;
                optional bool is_resisted = 4;
                optional int32 effect_delta = 5;
                optional bool is_prevented = 6;
                repeated Lettuce.BattleEngine.Schema.ExtraAttackAppliedResultRepeatedUpdation extra_attacks = 7;
            }
            message AttackDamageCalculationResultUpdation {
                optional bool skips_main_attack = 1;
                Lettuce.BattleEngine.Schema.DamageAmountUpdation damage = 2;
                optional bool is_weakness = 3;
                optional bool is_resisted = 4;
                optional int32 effect_delta = 5;
                repeated Lettuce.BattleEngine.Schema.ExtraAttackCalculationResultRepeatedUpdation extra_attacks = 6;
            }
            message AttackDamageCalculationStepInfoUpdation {
                Lettuce.BattleEngine.Schema.PublicBasicAttackDamageUpdation public_basic_damage = 1;
                Lettuce.BattleEngine.Schema.DamageAmountUpdation plus_damage_amount = 2;
                optional bool ignores_weakness = 3;
                optional bool ignores_resistance = 4;
                optional bool ignores_attacker_effects = 5;
                optional bool ignores_defender_effects = 6;
                Lettuce.BattleEngine.Schema.OriginalAttackDamageOverrideUpdation original_attack_damage_override = 7;
                optional bool is_calculation_fixed = 8;
                repeated Lettuce.BattleEngine.Schema.ExtraAttackOrderRepeatedUpdation extra_attacks = 9;
                Lettuce.BattleEngine.Schema.AttackDamageCalculationResultUpdation calculation_result = 10;
                Lettuce.BattleEngine.Schema.AttackDamageAppliedResultUpdation applied_result = 12;
                optional bool skips_damage_step = 13;
            }
            message AttackPhaseAttackJudgementStepInfoUpdation {
                optional bool is_attack_failed = 1;
                Lettuce.BattleEngine.Schema.AttackFailedReasonEnumUpdation attack_failed_reason = 2;
                optional bool is_misfire_copy_attack = 3;
            }
            message AttackPhaseCommonStepInfoUpdation {
                Lettuce.BattleEngine.Schema.PokemonAttackIdUpdation attack_id = 1;
                Lettuce.BattleEngine.Schema.PokemonAttackIdUpdation child_attack_id = 2;
            }
            message BattleObjectStoreUpdation {
                Lettuce.BattleEngine.Schema.BattleObjectIdUpdation last_published_id = 2;
            }
            message BattlePreparationUpdation {
                Lettuce.BattleEngine.Schema.BattlePreparationStateEnumUpdation state = 1;
                Lettuce.BattleEngine.Schema.PlayerIdUpdation first_turn_player = 2;
                Lettuce.BattleEngine.Schema.PrepareFieldInfoUpdation prepare_field_info = 3;
            }
            message BenchFieldRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.BenchField add = 2;
                    Lettuce.BattleEngine.Schema.BenchFieldUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message BenchFieldUpdation {
                Lettuce.BattleEngine.Schema.PlayerIdUpdation owner = 1;
                Lettuce.BattleEngine.Schema.BenchPokemonObjectUpdation bench_pokemon = 2;
                Lettuce.BattleEngine.Schema.FaceDownCardUpdation face_down_card = 3;
            }
            message BenchPokemonObjectUpdation {
                Lettuce.BattleEngine.Schema.PokemonObjectUpdation pokemon = 1;
            }
            message CardRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.Card add = 2;
                    Lettuce.BattleEngine.Schema.CardUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message CardStoreUpdation {
            }
            message CardUpdation {
                Lettuce.BattleEngine.Schema.CardIdUpdation id = 1;
                Lettuce.BattleEngine.Schema.PlayerIdUpdation controller = 2;
                Lettuce.BattleEngine.Schema.OriginCardUpdation origin = 3;
            }
            message DiscardPileUpdation {
                repeated Lettuce.BattleEngine.Schema.CardRepeatedUpdation cards = 1;
                Lettuce.BattleEngine.Schema.EnergySetUpdation energies = 2;
            }
            message EnergyZoneUpdation {
                Lettuce.BattleEngine.Schema.EnergyTypeEnumUpdation active = 1;
                Lettuce.BattleEngine.Schema.EnergyTypeEnumUpdation inactive = 2;
            }
            message FaceDownCardUpdation {
                Lettuce.BattleEngine.Schema.CardUpdation card = 1;
            }
            message FieldUpdation {
                Lettuce.BattleEngine.Schema.PlayerFieldUpdation player1_field = 1;
                Lettuce.BattleEngine.Schema.PlayerFieldUpdation player2_field = 2;
            }
            message HandRevealmentUpdation {
                repeated Lettuce.BattleEngine.Schema.CardIdRepeatedUpdation cards = 1;
            }
            message HandUpdation {
                repeated Lettuce.BattleEngine.Schema.CardRepeatedUpdation cards = 1;
                Lettuce.BattleEngine.Schema.InferableHiddenCardsUpdation inferable_cards = 2;
            }
            message InferableCardRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.InferableCard add = 2;
                    Lettuce.BattleEngine.Schema.InferableCardUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message InferableCardUpdation {
                Lettuce.BattleEngine.Schema.MasterCardIdUpdation id = 2;
            }
            message InferableHiddenCardsUpdation {
                repeated Lettuce.BattleEngine.Schema.InferableCardRepeatedUpdation cards = 1;
            }
            message InferableOrderedCardRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.InferableOrderedCard add = 2;
                    Lettuce.BattleEngine.Schema.InferableOrderedCardUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message InferableOrderedCardUpdation {
                optional int32 order = 1;
                Lettuce.BattleEngine.Schema.InferableCardUpdation card = 2;
            }
            message InferableOrderedHiddenCardsUpdation {
                repeated Lettuce.BattleEngine.Schema.InferableOrderedCardRepeatedUpdation cards = 1;
            }
            message KnockedOutCheckInfoUpdation {
                Lettuce.BattleEngine.Schema.BattleObjectIdUpdation player1_next_active = 1;
                Lettuce.BattleEngine.Schema.BattleObjectIdUpdation player2_next_active = 2;
            }
            message KnockedOutPokemonUpdation {
                Lettuce.BattleEngine.Schema.CardIdUpdation knocked_out_pokemon_card = 1;
                repeated Lettuce.BattleEngine.Schema.CardIdRepeatedUpdation discarded_cards = 2;
                Lettuce.BattleEngine.Schema.PrizeAmountUpdation added_prize = 3;
                optional bool is_active_pokemon = 4;
                Lettuce.BattleEngine.Schema.EnergyTypeEnumUpdation knocked_out_by_attack_type = 5;
                Lettuce.BattleEngine.Schema.CardUpdation knocked_out_by_card = 6;
            }
            message LibraryRevealmentUpdation {
                repeated Lettuce.BattleEngine.Schema.CardRepeatedUpdation cards = 1;
                repeated Lettuce.BattleEngine.Schema.PlayerIdRepeatedUpdation viewer_player_ids = 2;
                optional bool is_inferred = 3;
                optional bool is_opponent_more_predictable = 4;
                optional bool is_self_more_predictable = 5;
            }
            message LibraryUpdation {
                repeated Lettuce.BattleEngine.Schema.CardRepeatedUpdation cards = 1;
                Lettuce.BattleEngine.Schema.InferableOrderedHiddenCardsUpdation inferable_self_ordered_cards = 2;
                Lettuce.BattleEngine.Schema.InferableOrderedHiddenCardsUpdation inferable_opponent_ordered_cards = 3;
                Lettuce.BattleEngine.Schema.InferableHiddenCardsUpdation inferable_opponent_unordered_cards = 4;
            }
            message OriginalAttackDamageOverrideUpdation {
                optional bool should_override = 1;
                Lettuce.BattleEngine.Schema.DamageAmountUpdation override_value = 2;
            }
            message PhaseUpdation {
                Lettuce.BattleEngine.Schema.PhaseTypeEnumUpdation phase_type = 1;
                Lettuce.BattleEngine.Schema.PhaseStateEnumUpdation phase_state = 2;
                Lettuce.BattleEngine.Schema.StepUpdation step = 3;
                Lettuce.BattleEngine.Schema.ActionPhaseInfoUpdation action_phase_info = 4;
            }
            message PlayerFieldUpdation {
                Lettuce.BattleEngine.Schema.PlayerIdUpdation owner_id = 1;
                Lettuce.BattleEngine.Schema.ActiveFieldUpdation active_field = 2;
                repeated Lettuce.BattleEngine.Schema.BenchFieldRepeatedUpdation bench_fields = 3;
            }
            message PlayerFlagsUpdation {
                optional int32 last_pokemon_knocked_out_by_attack_damage_turn = 1;
            }
            message PlayersUpdation {
                Lettuce.BattleEngine.Schema.PlayerUpdation player1 = 1;
                Lettuce.BattleEngine.Schema.PlayerUpdation player2 = 2;
            }
            message PlayerUpdation {
                Lettuce.BattleEngine.Schema.PlayerIdUpdation id = 1;
                Lettuce.BattleEngine.Schema.HandUpdation hand = 2;
                Lettuce.BattleEngine.Schema.LibraryUpdation library = 3;
                Lettuce.BattleEngine.Schema.DiscardPileUpdation discard_pile = 4;
                Lettuce.BattleEngine.Schema.EnergyZoneUpdation energy_zone = 5;
                Lettuce.BattleEngine.Schema.PrizeAmountUpdation prize = 6;
                Lettuce.BattleEngine.Schema.LibraryRevealmentUpdation library_revealment = 7;
                Lettuce.BattleEngine.Schema.HandRevealmentUpdation hand_revealment = 8;
                Lettuce.BattleEngine.Schema.PlayerFlagsUpdation flags = 9;
                Lettuce.BattleEngine.Schema.InferableHiddenCardsUpdation inferable_nondeterministic_cards = 10;
            }
            message PokemonCheckupSpecialConditionStepInfoUpdation {
                Lettuce.BattleEngine.Schema.PlayerIdUpdation check_player = 1;
                Lettuce.BattleEngine.Schema.SpecialConditionCheckProgressEnumUpdation check_progress = 2;
                Lettuce.BattleEngine.Schema.SpecialConditionCheckProgressStateEnumUpdation check_progress_state = 3;
            }
            message PokemonObjectFlagsUpdation {
                optional bool will_knocked_out_by_attack_damage = 1;
                Lettuce.BattleEngine.Schema.PokemonAttackIdUpdation will_knocked_out_by_attack_id = 2;
            }
            message PokemonObjectUpdation {
                Lettuce.BattleEngine.Schema.BattleObjectIdUpdation id = 1;
                Lettuce.BattleEngine.Schema.PlayerIdUpdation controller = 2;
                repeated Lettuce.BattleEngine.Schema.CardRepeatedUpdation pokemons = 3;
                Lettuce.BattleEngine.Schema.DamageAmountUpdation damage = 4;
                Lettuce.BattleEngine.Schema.EnergySetUpdation attached_energy_set = 5;
                optional bool will_knocked_out = 6;
                optional int32 pokemon_played_turn_number = 7;
                Lettuce.BattleEngine.Schema.CardIdUpdation will_knocked_out_from = 8;
                Lettuce.BattleEngine.Schema.PokemonObjectFlagsUpdation object_flags = 9;
                Lettuce.BattleEngine.Schema.EnergyTypeEnumUpdation will_knocked_out_from_attack_type = 10;
                repeated Lettuce.BattleEngine.Schema.PokemonToolObjectRepeatedUpdation tools = 11;
            }
            message PokemonToolObjectRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.PokemonToolObject add = 2;
                    Lettuce.BattleEngine.Schema.PokemonToolObjectUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message PokemonToolObjectUpdation {
                Lettuce.BattleEngine.Schema.BattleObjectIdUpdation id = 1;
                Lettuce.BattleEngine.Schema.PlayerIdUpdation controller = 2;
                repeated Lettuce.BattleEngine.Schema.CardRepeatedUpdation cards = 3;
            }
            message PrepareFieldInfoUpdation {
                repeated Lettuce.BattleEngine.Schema.PlayerIdRepeatedUpdation prepare_ended_players = 1;
            }
            message ProcedureUpdation {
                Lettuce.BattleEngine.Schema.ProcedureTypeEnumUpdation procedure_type = 1;
                Lettuce.BattleEngine.Schema.ProcedureStateEnumUpdation procedure_state = 2;
                Lettuce.BattleEngine.Schema.KnockedOutCheckInfoUpdation knocked_out_check_info = 3;
            }
            message RandomUpdation {
                optional uint64 state1 = 1;
                optional uint64 state2 = 2;
            }
            message ResultUpdation {
                Lettuce.BattleEngine.Schema.BattleResultStateEnumUpdation state = 1;
                Lettuce.BattleEngine.Schema.PlayerIdUpdation winner = 2;
                Lettuce.BattleEngine.Schema.PlayerIdUpdation conceded_player = 3;
            }
            message StepUpdation {
                Lettuce.BattleEngine.Schema.StepTypeEnumUpdation step_type = 1;
                Lettuce.BattleEngine.Schema.StepStateEnumUpdation step_state = 2;
                Lettuce.BattleEngine.Schema.AttackPhaseAttackJudgementStepInfoUpdation attack_phase_attack_judgement_step_info = 3;
                Lettuce.BattleEngine.Schema.AttackDamageCalculationStepInfoUpdation attack_damage_calculation_step_info = 4;
                Lettuce.BattleEngine.Schema.AttackPhaseCommonStepInfoUpdation attack_phase_common_step_info = 6;
                Lettuce.BattleEngine.Schema.PokemonCheckupSpecialConditionStepInfoUpdation pokemon_checkup_special_condition_step_info = 7;
            }
            message StoreUpdation {
                Lettuce.BattleEngine.Schema.TurnUpdation turn = 1;
                Lettuce.BattleEngine.Schema.PlayersUpdation players = 2;
                Lettuce.BattleEngine.Schema.FieldUpdation field = 3;
                Lettuce.BattleEngine.Schema.ResultUpdation result = 4;
                Lettuce.BattleEngine.Schema.Logic.LogicStoreUpdation logic_store = 5;
                Lettuce.BattleEngine.Schema.RandomUpdation random = 6;
                Lettuce.BattleEngine.Schema.Effect.ContinuousEffectStoreUpdation continuous_effect_store = 7;
                Lettuce.BattleEngine.Schema.CardUpdation activating_trainer = 8;
                Lettuce.BattleEngine.Schema.BattleObjectStoreUpdation battle_object_store = 9;
                Lettuce.BattleEngine.Schema.BattlePreparationUpdation battle_preparation = 10;
                Lettuce.BattleEngine.Schema.CardStoreUpdation card_store = 11;
            }
            message TurnFlagsUpdation {
                optional bool retreated = 1;
                Lettuce.BattleEngine.Schema.CardIdUpdation used_support = 2;
                optional bool determined_attack = 3;
            }
            message TurnUpdation {
                optional int32 number = 1;
                Lettuce.BattleEngine.Schema.PhaseUpdation phase = 2;
                Lettuce.BattleEngine.Schema.TurnFlagsUpdation flags = 3;
                Lettuce.BattleEngine.Schema.PlayerIdUpdation turn_player_id = 4;
                Lettuce.BattleEngine.Schema.ActionRequirementUpdation action_requirement = 5;
                Lettuce.BattleEngine.Schema.ProcedureUpdation procedure = 6;
                Lettuce.BattleEngine.Schema.PlayerIdUpdation prev_turn_player = 7;
            }
            enum BattlePreparationState {
                BATTLE_PREPARATION_STATE_UNSPECIFIED = 0;
                BATTLE_PREPARATION_STATE_INITIAL_SETUP = 10;
                BATTLE_PREPARATION_STATE_PREPARE_FIELD = 20;
                BATTLE_PREPARATION_STATE_DONE = 30;
            }
            enum PhaseType {
                PHASE_TYPE_UNSPECIFIED = 0;
                PHASE_TYPE_START_PHASE = 100;
                PHASE_TYPE_ACTION_PHASE = 200;
                PHASE_TYPE_ATTACK_PHASE = 300;
                PHASE_TYPE_END_PHASE = 400;
                PHASE_TYPE_POKEMON_CHECKUP = 500;
            }
            enum PhaseState {
                PHASE_STATE_UNSPECIFIED = 0;
                PHASE_STATE_WILL_EXECUTE = 1;
                PHASE_STATE_EXECUTING = 2;
                PHASE_STATE_DID_EXECUTE = 3;
            }
            enum ProcedureType {
                PROCEDURE_TYPE_UNSPECIFIED = 0;
                PROCEDURE_TYPE_RESERVED = 10;
                PROCEDURE_TYPE_TRIGGERED_CHECK = 20;
                PROCEDURE_TYPE_KNOCKED_OUT_CHECK = 30;
                PROCEDURE_TYPE_WINNER_CHECK = 40;
                PROCEDURE_TYPE_FINISHED = 50;
                PROCEDURE_TYPE_SPECIAL_CONDITION_INCONSISTENT_CHECK = 60;
            }
            enum ProcedureState {
                PROCEDURE_STATE_UNSPECIFIED = 0;
                PROCEDURE_STATE_WILL_EXECUTE = 1;
                PROCEDURE_STATE_EXECUTING = 2;
                PROCEDURE_STATE_DID_EXECUTE = 3;
            }
            enum StepType {
                STEP_TYPE_UNSPECIFIED = 0;
                STEP_TYPE_START_PHASE_DRAW_STEP = 1000;
                STEP_TYPE_START_PHASE_SPAWN_ENERGY_STEP = 1010;
                STEP_TYPE_ATTACK_JUDGEMENT_STEP = 3000;
                STEP_TYPE_ATTACK_CONFUSED_CHECK_STEP = 3010;
                STEP_TYPE_ATTACK_PRE_EXECUTION_STEP = 3020;
                STEP_TYPE_ATTACK_DAMAGE_CALCULATION_STEP = 3030;
                STEP_TYPE_ATTACK_DAMAGE_STEP = 3040;
                STEP_TYPE_ATTACK_POST_EXECUTION_STEP = 3050;
                STEP_TYPE_ATTACK_END_STEP = 3060;
                STEP_TYPE_POKEMON_CHECKUP_SPECIAL_CONDITION_STEP = 5010;
                STEP_TYPE_POKEMON_CHECKUP_DISCARD_ENERGY_STEP = 5020;
                STEP_TYPE_POKEMON_CHECKUP_EFFECT_STEP = 5030;
            }
            enum StepState {
                STEP_STATE_UNSPECIFIED = 0;
                STEP_STATE_WILL_EXECUTE = 1;
                STEP_STATE_EXECUTING = 2;
                STEP_STATE_DID_EXECUTE = 3;
            }
            enum EnergyType {
                ENERGY_TYPE_UNSPECIFIED = 0;
                ENERGY_TYPE_COLORLESS = 1;
                ENERGY_TYPE_GRASS = 2;
                ENERGY_TYPE_FIRE = 3;
                ENERGY_TYPE_WATER = 4;
                ENERGY_TYPE_LIGHTNING = 5;
                ENERGY_TYPE_PSYCHIC = 6;
                ENERGY_TYPE_FIGHTING = 7;
                ENERGY_TYPE_DARKNESS = 8;
                ENERGY_TYPE_METAL = 9;
                ENERGY_TYPE_DRAGON = 10;
            }
            enum ActionType {
                ACTION_TYPE_UNSPECIFIED = 0;
                ACTION_TYPE_ATTACH_ENERGY_FROM_ZONE = 1;
                ACTION_TYPE_DETERMINE_ATTACK = 2;
                ACTION_TYPE_DETERMINE_TURN_END = 3;
                ACTION_TYPE_EVOLVE = 4;
                ACTION_TYPE_PLAY_POKEMON = 5;
                ACTION_TYPE_PLAY_TRAINER = 6;
                ACTION_TYPE_RETREAT = 7;
                ACTION_TYPE_SELECT_BENCH_ON_KNOCKED_OUT = 8;
                ACTION_TYPE_FLIP_COIN = 9;
                ACTION_TYPE_SELECT_FIELD_POKEMON = 10;
                ACTION_TYPE_ACTIVATE_ABILITY = 11;
                ACTION_TYPE_ATTACH_POKEMON_TOOL = 12;
                ACTION_TYPE_SELECT_LIBRARY_REVEALED_CARD = 13;
                ACTION_TYPE_SELECT_ATTACHED_ENERGY = 14;
                ACTION_TYPE_CONCEDE = 15;
                ACTION_TYPE_PREPARE_ACTIVE_FIELD = 16;
                ACTION_TYPE_PREPARE_BENCH_FIELD = 17;
                ACTION_TYPE_END_PREPARE_FIELD = 18;
                ACTION_TYPE_DISCARD_FIELD_POKEMON = 19;
                ACTION_TYPE_SELECT_ATTACK = 20;
                ACTION_TYPE_CONFIRM = 21;
                ACTION_TYPE_ATTACH_ENERGY_BY_EFFECT = 22;
                ACTION_TYPE_SELECT_DISCARD_PILE_CARD = 23;
                ACTION_TYPE_FORCE_COMPLETE_GAME = 24;
                ACTION_TYPE_SELECT_HAND_CARD = 25;
                ACTION_TYPE_SELECT_PLAYER = 26;
                ACTION_TYPE_DEBUG_EXECUTE_COMMAND = 27;
            }
            enum DamageType {
                DAMAGE_TYPE_UNSPECIFIED = 0;
                DAMAGE_TYPE_ATTACK = 1;
                DAMAGE_TYPE_EXTRA_ATTACK = 2;
                DAMAGE_TYPE_ATTACK_LOGIC = 3;
                DAMAGE_TYPE_ABILITY = 4;
            }
            enum EvolutionStage {
                EVOLUTION_STAGE_UNSPECIFIED = 0;
                EVOLUTION_STAGE_BASIC = 1;
                EVOLUTION_STAGE_ONE = 2;
                EVOLUTION_STAGE_TWO = 3;
            }
            enum LocationType {
                LOCATION_TYPE_UNSPECIFIED = 0;
                LOCATION_TYPE_BENCH = 1;
                LOCATION_TYPE_ACTIVE = 2;
                LOCATION_TYPE_HAND = 3;
                LOCATION_TYPE_DISCARD_PILE = 4;
                LOCATION_TYPE_LIBRARY = 5;
                LOCATION_TYPE_LIBRARY_REVEALMENT = 6;
                LOCATION_TYPE_ACTIVATING_TRAINER = 7;
            }
            enum TrainerType {
                TRAINER_TYPE_UNSPECIFIED = 0;
                TRAINER_TYPE_SUPPORT = 1;
                TRAINER_TYPE_ITEM = 2;
                TRAINER_TYPE_POKEMON_TOOL = 3;
            }
            enum FlipCoinFlipType {
                FLIP_COIN_FLIP_TYPE_UNSPECIFIED = 0;
                FLIP_COIN_FLIP_TYPE_SPECIFIED_TIMES = 1;
                FLIP_COIN_FLIP_TYPE_UNTIL_TAIL = 2;
            }
            enum FlipCoinResultType {
                FLIP_COIN_RESULT_TYPE_UNSPECIFIED = 0;
                FLIP_COIN_RESULT_TYPE_HEAD = 1;
                FLIP_COIN_RESULT_TYPE_TAIL = 2;
            }
            enum SpecialConditionType {
                SPECIAL_CONDITION_TYPE_UNSPECIFIED = 0;
                SPECIAL_CONDITION_TYPE_PARALYZED = 1;
                SPECIAL_CONDITION_TYPE_ASLEEP = 2;
                SPECIAL_CONDITION_TYPE_BURNED = 3;
                SPECIAL_CONDITION_TYPE_CONFUSED = 4;
                SPECIAL_CONDITION_TYPE_POISONED = 5;
            }
            enum LogicStateScopeType {
                LOGIC_STATE_SCOPE_TYPE_UNSPECIFIED = 0;
                LOGIC_STATE_SCOPE_TYPE_RESOLVING = 1;
                LOGIC_STATE_SCOPE_TYPE_GAME = 2;
                LOGIC_STATE_SCOPE_TYPE_ATTACK = 3;
            }
            enum DrawCardResultType {
                DRAW_CARD_RESULT_TYPE_UNSPECIFIED = 0;
                DRAW_CARD_RESULT_TYPE_SUCCESS = 1;
                DRAW_CARD_RESULT_TYPE_HAND_CARD_IS_FULL = 2;
                DRAW_CARD_RESULT_TYPE_LIBRARY_IS_EMPTY = 3;
            }
            enum PickDiscardedCardResultType {
                PICK_DISCARDED_CARD_RESULT_TYPE_UNSPECIFIED = 0;
                PICK_DISCARDED_CARD_RESULT_TYPE_SUCCESS = 1;
                PICK_DISCARDED_CARD_RESULT_TYPE_HAND_CARD_IS_FULL = 2;
                PICK_DISCARDED_CARD_RESULT_TYPE_DISCARD_PILE_IS_EMPTY = 3;
            }
            enum LogicType {
                LOGIC_TYPE_UNSPECIFIED = 0;
                LOGIC_TYPE_SYSTEM = 1000;
                LOGIC_TYPE_PRE_ATTACK = 2010;
                LOGIC_TYPE_PUBLIC_ATTACK_DAMAGE_CALCULATION = 2015;
                LOGIC_TYPE_ATTACK_DAMAGE_CALCULATION = 2020;
                LOGIC_TYPE_POST_ATTACK = 2030;
                LOGIC_TYPE_ATTACK_ACTIVATION = 2100;
                LOGIC_TYPE_ACTIVATED_ABILITY = 3000;
                LOGIC_TYPE_TRIGGERED_ABILITY = 3010;
                LOGIC_TYPE_STATIC_ABILITY = 3020;
                LOGIC_TYPE_TRIGGERED_LOCAL_LOGIC_ATTACHED_BY_CONTINUOUS_EFFECT = 3100;
                LOGIC_TYPE_ACTIVATED_TRAINER = 4000;
                LOGIC_TYPE_TRIGGERED_TRAINER = 4010;
                LOGIC_TYPE_STATIC_TRAINER = 4020;
                LOGIC_TYPE_ONE_SHOT_TRAINER = 4030;
                LOGIC_TYPE_PLAY_TRAINER = 4040;
            }
            enum ExpectedActionNoticeType {
                EXPECTED_ACTION_NOTICE_TYPE_UNSPECIFIED = 0;
                EXPECTED_ACTION_NOTICE_TYPE_SELECT_SELF_FIELD_TARGET = 5;
                EXPECTED_ACTION_NOTICE_TYPE_SELECT_OPPONENT_FIELD_TARGET = 6;
                EXPECTED_ACTION_NOTICE_TYPE_SELECT_CHILD_ATTACK_IGNORE_ENERGY_REQUIREMENT = 100;
                EXPECTED_ACTION_NOTICE_TYPE_SELECT_TARGET_FOR_DISCARD = 7;
                EXPECTED_ACTION_NOTICE_TYPE_SELECT_TARGET_FOR_MOVE = 8;
                EXPECTED_ACTION_NOTICE_TYPE_SELECT_SELF_HAND_CARD_TO_EXCHANGE_POKEMON = 9;
                EXPECTED_ACTION_NOTICE_TYPE_SELECT_SELF_HAND_CARD_AND_DISCARD = 10;
                EXPECTED_ACTION_NOTICE_TYPE_NAVIGATION_TEXT_01 = 1000001;
                EXPECTED_ACTION_NOTICE_TYPE_NAVIGATION_TEXT_05 = 1000005;
                EXPECTED_ACTION_NOTICE_TYPE_NAVIGATION_TEXT_07 = 1000007;
                EXPECTED_ACTION_NOTICE_TYPE_NAVIGATION_TEXT_09 = 1000009;
                EXPECTED_ACTION_NOTICE_TYPE_NAVIGATION_TEXT_40 = 1000040;
                EXPECTED_ACTION_NOTICE_TYPE_NAVIGATION_TEXT_41 = 1000041;
                EXPECTED_ACTION_NOTICE_TYPE_NAVIGATION_TEXT_42 = 1000042;
                EXPECTED_ACTION_NOTICE_TYPE_NAVIGATION_TEXT_43 = 1000043;
                EXPECTED_ACTION_NOTICE_TYPE_NAVIGATION_TEXT_44 = 1000044;
                EXPECTED_ACTION_NOTICE_TYPE_NAVIGATION_TEXT_45 = 1000045;
                EXPECTED_ACTION_NOTICE_TYPE_NAVIGATION_TEXT_46 = 1000046;
                EXPECTED_ACTION_NOTICE_TYPE_NAVIGATION_TEXT_47 = 1000047;
                EXPECTED_ACTION_NOTICE_TYPE_NAVIGATION_TEXT_53 = 1000053;
                EXPECTED_ACTION_NOTICE_TYPE_NAVIGATION_TEXT_97 = 1000097;
                EXPECTED_ACTION_NOTICE_TYPE_NAVIGATION_TEXT_100 = 1000100;
                EXPECTED_ACTION_NOTICE_TYPE_NAVIGATION_TEXT_142 = 1000142;
                EXPECTED_ACTION_NOTICE_TYPE_NAVIGATION_TEXT_NON_LOGIC_13 = 2000013;
                EXPECTED_ACTION_NOTICE_TYPE_NAVIGATION_TEXT_NON_LOGIC_14 = 2000014;
            }
            enum ActionSpecificationResultReason {
                ACTION_SPECIFICATION_RESULT_REASON_UNSPECIFIED = 0;
                ACTION_SPECIFICATION_RESULT_REASON_RETREAT_ALREADY_RETREATED = 1;
                ACTION_SPECIFICATION_RESULT_REASON_RETREAT_ENERGY_NOT_ENOUGH = 2;
                ACTION_SPECIFICATION_RESULT_REASON_RETREAT_NO_BENCH_POKEMON = 3;
                ACTION_SPECIFICATION_RESULT_REASON_ATTACK_RETREAT_ASLEEP = 4;
                ACTION_SPECIFICATION_RESULT_REASON_ATTACK_RETREAT_PARALYZED = 5;
                ACTION_SPECIFICATION_RESULT_REASON_PLAY_TRAINER_ALREADY_USED_SUPPORT_THIS_TURN = 8;
                ACTION_SPECIFICATION_RESULT_REASON_PLAY_TRAINER_NOT_SATISFIED_CONDITION_SUPPORT = 9;
                ACTION_SPECIFICATION_RESULT_REASON_PLAY_TRAINER_NOT_SATISFIED_CONDITION_ITEM = 10;
                ACTION_SPECIFICATION_RESULT_REASON_PLAY_TRAINER_NOT_SATISFIED_CONDITION_POKEMON_TOOL = 11;
                ACTION_SPECIFICATION_RESULT_REASON_PLAY_TRAINER_SUPPORT_PREVENTED_BY_EFFECT = 12;
                ACTION_SPECIFICATION_RESULT_REASON_ATTACK_NO_ATTACK = 32;
                ACTION_SPECIFICATION_RESULT_REASON_ATTACK_ENERGY_NOT_ENOUGH = 33;
                ACTION_SPECIFICATION_RESULT_REASON_ATTACK_CONDITION_NOT_SATISFIED = 34;
                ACTION_SPECIFICATION_RESULT_REASON_ABILITY_ACTIVATE_CONDITION_NOT_SATISFIED = 41;
                ACTION_SPECIFICATION_RESULT_REASON_NAVIGATION_TEXT_21 = 1000021;
                ACTION_SPECIFICATION_RESULT_REASON_NAVIGATION_TEXT_22 = 1000022;
                ACTION_SPECIFICATION_RESULT_REASON_NAVIGATION_TEXT_26 = 1000026;
                ACTION_SPECIFICATION_RESULT_REASON_NAVIGATION_TEXT_27 = 1000027;
            }
            enum OneShotEffectApplySpecificationReason {
                ONE_SHOT_EFFECT_APPLY_SPECIFICATION_REASON_UNSPECIFIED = 0;
                ONE_SHOT_EFFECT_APPLY_SPECIFICATION_REASON_NAVIGATION_TEXT_13 = 1000013;
                ONE_SHOT_EFFECT_APPLY_SPECIFICATION_REASON_NAVIGATION_TEXT_15 = 1000015;
                ONE_SHOT_EFFECT_APPLY_SPECIFICATION_REASON_NAVIGATION_TEXT_16 = 1000016;
                ONE_SHOT_EFFECT_APPLY_SPECIFICATION_REASON_NAVIGATION_TEXT_20 = 1000020;
                ONE_SHOT_EFFECT_APPLY_SPECIFICATION_REASON_NAVIGATION_TEXT_25 = 1000025;
                ONE_SHOT_EFFECT_APPLY_SPECIFICATION_REASON_NAVIGATION_TEXT_29 = 1000029;
                ONE_SHOT_EFFECT_APPLY_SPECIFICATION_REASON_NAVIGATION_TEXT_44 = 1000044;
                ONE_SHOT_EFFECT_APPLY_SPECIFICATION_REASON_NAVIGATION_TEXT_46 = 1000046;
                ONE_SHOT_EFFECT_APPLY_SPECIFICATION_REASON_NAVIGATION_TEXT_95 = 1000095;
            }
            enum AttackFailedReason {
                ATTACK_FAILED_REASON_UNSPECIFIED = 0;
                ATTACK_FAILED_REASON_NAVIGATION_TEXT_21 = 1000021;
                ATTACK_FAILED_REASON_NAVIGATION_TEXT_DEBUG = 9999999;
            }
            enum SpecialConditionCheckProgress {
                SPECIAL_CONDITION_CHECK_PROGRESS_UNSPECIFIED = 0;
                SPECIAL_CONDITION_CHECK_PROGRESS_POISONED = 10;
                SPECIAL_CONDITION_CHECK_PROGRESS_BURNED = 20;
                SPECIAL_CONDITION_CHECK_PROGRESS_ASLEEP = 30;
                SPECIAL_CONDITION_CHECK_PROGRESS_PARALYZED = 40;
            }
            enum SpecialConditionCheckProgressState {
                SPECIAL_CONDITION_CHECK_PROGRESS_STATE_UNSPECIFIED = 0;
                SPECIAL_CONDITION_CHECK_PROGRESS_STATE_WILL_EXECUTE = 1;
                SPECIAL_CONDITION_CHECK_PROGRESS_STATE_EXECUTING = 2;
                SPECIAL_CONDITION_CHECK_PROGRESS_STATE_DID_EXECUTE = 3;
            }
            enum ConfirmTargetType {
                CONFIRM_TARGET_TYPE_UNSPECIFIED = 0;
                CONFIRM_TARGET_TYPE_SELF_LIBRARY_REVEALMENT = 1;
                CONFIRM_TARGET_TYPE_OPPONENT_HAND_REVEALMENT = 2;
                CONFIRM_TARGET_TYPE_OPPONENT_LIBRARY_REVEALMENT = 3;
            }
            enum BattleResultState {
                BATTLE_RESULT_STATE_RESULT_UNSPECIFIED = 0;
                BATTLE_RESULT_STATE_COMPLETED = 1;
                BATTLE_RESULT_STATE_COMPLETED_BY_OUT_OF_TIME = 2;
                BATTLE_RESULT_STATE_COMPLETED_BY_FORCE_END = 3;
                BATTLE_RESULT_STATE_COMPLETED_BY_DISCONNECTED = 4;
            }
            enum DamageSymbol {
                DAMAGE_SYMBOL_UNSPECIFIED = 0;
                DAMAGE_SYMBOL_PLUS = 1;
                DAMAGE_SYMBOL_MULTIPLY = 2;
            }
            enum CardType {
                Unspecified = 0;
                Pokemon = 1;
                Trainer = 2;
            }
            message PlayerId {
                int32 value = 1;
            }
            message CardId {
                int32 value = 1;
            }
            message ExpectedAction {
                Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                repeated Lettuce.BattleEngine.Schema.ActionType action_types = 2;
            }
            message MasterPokemonId {
                string value = 1;
            }
            message MasterTrainerId {
                string value = 1;
            }
            message CardBaseId {
                string value = 1;
            }
            message MasterCardId {
                string value = 1;
            }
            message PokemonAttackId {
                string value = 1;
            }
            message PokemonAttackName {
                string value = 1;
            }
            message PokemonAbilityId {
                string value = 1;
            }
            message MasterCardBaseId {
                int64 value = 1;
            }
            message CardSkinId {
                string value = 1;
            }
            message BattleObjectId {
                int32 value = 1;
            }
            message ContinuousEffectId {
                int32 value = 1;
            }
            message LogicId {
                string value = 1;
            }
            message LogicSpecifier {
                Lettuce.BattleEngine.Schema.BattleObjectId battle_object_id = 1;
                Lettuce.BattleEngine.Schema.CardId card_id = 2;
                Lettuce.BattleEngine.Schema.LogicType logic_type = 3;
                Lettuce.BattleEngine.Schema.PokemonAttackId attack_id = 4;
                Lettuce.BattleEngine.Schema.PokemonAbilityId ability_id = 5;
                Lettuce.BattleEngine.Schema.PokemonAttackId parent_attack_id = 6;
                Lettuce.BattleEngine.Schema.ContinuousEffectId continuous_effect_id = 7;
            }
            message DamageAmount {
                int32 value = 1;
            }
            message PrizeAmount {
                int32 value = 2;
            }
            message EnergyPair {
                Lettuce.BattleEngine.Schema.EnergyType type = 1;
                int32 value = 2;
            }
            message EnergySet {
                repeated Lettuce.BattleEngine.Schema.EnergyPair pairs = 1;
            }
            message EnergyAttachRequest {
                Lettuce.BattleEngine.Schema.BattleObjectId pokemon = 1;
                Lettuce.BattleEngine.Schema.EnergySet energies = 2;
            }
            message EnergyAttachResponse {
                Lettuce.BattleEngine.Schema.BattleObjectId pokemon = 1;
                Lettuce.BattleEngine.Schema.EnergySet energies = 2;
            }
            message EnergyMove {
                Lettuce.BattleEngine.Schema.BattleObjectId from = 1;
                Lettuce.BattleEngine.Schema.BattleObjectId to = 2;
                Lettuce.BattleEngine.Schema.EnergySet energies = 3;
                bool is_overflow = 4;
            }
            message EnergyDiscard {
                Lettuce.BattleEngine.Schema.BattleObjectId from = 1;
                Lettuce.BattleEngine.Schema.EnergySet energies = 2;
            }
            message BenchFieldSet {
                int32 position = 1;
                Lettuce.BattleEngine.Schema.CardId card_id = 2;
            }
            message SpecialConditionRecovery {
                Lettuce.BattleEngine.Schema.BattleObjectId pokemon = 1;
                Lettuce.BattleEngine.Schema.SpecialConditionType type = 2;
            }
            message CardName {
                string value = 1;
            }
            message ExpectedActionNotice {
                Lettuce.BattleEngine.Schema.ExpectedActionNoticeType notice_type = 1;
                repeated Lettuce.BattleEngine.Schema.NoticeParameter parameters = 2;
            }
            message NoticeParameter {
                bool has_int_value = 1;
                int32 int_value = 2;
                Lettuce.BattleEngine.Schema.EnergyType energy_type_value = 3;
                Lettuce.BattleEngine.Schema.CardName card_name_value = 4;
            }
            message ActionSpecificationResultReasonParameter {
                bool has_string_value = 1;
                string string_value = 2;
            }
            message OneShotEffectApplySpecificationReasonParameter {
                bool has_int_value = 1;
                int32 int_value = 2;
                Lettuce.BattleEngine.Schema.EnergyType energy_type_value = 3;
                Lettuce.BattleEngine.Schema.CardName card_name_value = 4;
            }
            message OneShotEffectApplySpecificationResult {
                bool is_satisfied = 1;
                Lettuce.BattleEngine.Schema.OneShotEffectApplySpecificationReason reason = 2;
                repeated Lettuce.BattleEngine.Schema.OneShotEffectApplySpecificationReasonParameter parameters = 3;
            }
            message AttachedEnergy {
                Lettuce.BattleEngine.Schema.BattleObjectId pokemon = 1;
                Lettuce.BattleEngine.Schema.EnergySet attached_energies = 2;
            }
            message PublicBasicAttackDamage {
                bool has_damage = 1;
                Lettuce.BattleEngine.Schema.DamageAmount amount = 2;
            }
            message ExtraAttackOrder {
                Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                Lettuce.BattleEngine.Schema.DamageAmount damage = 2;
                Lettuce.BattleEngine.Schema.ExtraAttackOrderOption option = 3;
            }
            message ExtraAttackOrderOption {
                bool calculates_weakness = 1;
                bool calculates_resistance = 2;
                bool calculates_attacker_effects = 3;
                bool calculates_defender_effects = 4;
            }
            message ExtraAttackCalculationResult {
                Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                Lettuce.BattleEngine.Schema.DamageAmount damage = 2;
                bool is_weakness = 3;
                bool is_resisted = 4;
                int32 effect_delta = 5;
            }
            message ExtraAttackAppliedResult {
                Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                Lettuce.BattleEngine.Schema.DamageAmount damage = 2;
                bool is_weakness = 3;
                bool is_resisted = 4;
                int32 effect_delta = 5;
                bool is_prevented = 6;
            }
            message HealResult {
                Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                Lettuce.BattleEngine.Schema.DamageAmount heal_amount = 2;
                int32 effect_delta = 3;
                bool is_prevented = 4;
            }
            message CardViewInfo {
                Lettuce.BattleEngine.Schema.CardSkinId card_skin_id = 1;
            }
            message PokemonAttackSet {
                Lettuce.BattleEngine.Schema.BattleObjectId pokemon = 1;
                repeated Lettuce.BattleEngine.Schema.PokemonAttackId attacks = 2;
            }
            message InjectionData {
                repeated Lettuce.BattleEngine.Schema.FlipCoinResultType flip_coin_results = 1;
            }
            message EffectDamageResult {
                Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                Lettuce.BattleEngine.Schema.DamageAmount applied_damage = 2;
                bool is_weakness = 3;
                bool is_resisted = 4;
                int32 effect_delta = 5;
            }
            message ActionSpecificationResultReasonEnumUpdation {
                Lettuce.BattleEngine.Schema.ActionSpecificationResultReason value = 1;
            }
            message ActionSpecificationResultReasonParameterUpdation {
                optional bool has_string_value = 1;
                string string_value = 2;
            }
            message ActionTypeEnumRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.ActionType add = 2;
                    Lettuce.BattleEngine.Schema.ActionTypeEnumUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message ActionTypeEnumUpdation {
                Lettuce.BattleEngine.Schema.ActionType value = 1;
            }
            message AttachedEnergyUpdation {
                Lettuce.BattleEngine.Schema.BattleObjectIdUpdation pokemon = 1;
                Lettuce.BattleEngine.Schema.EnergySetUpdation attached_energies = 2;
            }
            message AttackFailedReasonEnumUpdation {
                Lettuce.BattleEngine.Schema.AttackFailedReason value = 1;
            }
            message BattleObjectIdUpdation {
                optional int32 value = 1;
            }
            message BattlePreparationStateEnumUpdation {
                Lettuce.BattleEngine.Schema.BattlePreparationState value = 1;
            }
            message BattleResultStateEnumUpdation {
                Lettuce.BattleEngine.Schema.BattleResultState value = 1;
            }
            message BenchFieldSetUpdation {
                optional int32 position = 1;
                Lettuce.BattleEngine.Schema.CardIdUpdation card_id = 2;
            }
            message CardBaseIdUpdation {
                string value = 1;
            }
            message CardIdRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.CardId add = 2;
                    Lettuce.BattleEngine.Schema.CardIdUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message CardIdUpdation {
                optional int32 value = 1;
            }
            message CardNameRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.CardName add = 2;
                    Lettuce.BattleEngine.Schema.CardNameUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message CardNameUpdation {
                string value = 1;
            }
            message CardSkinIdUpdation {
                string value = 1;
            }
            message CardTypeEnumUpdation {
                Lettuce.BattleEngine.Schema.CardType value = 1;
            }
            message CardViewInfoUpdation {
                Lettuce.BattleEngine.Schema.CardSkinIdUpdation card_skin_id = 1;
            }
            message ConfirmTargetTypeEnumUpdation {
                Lettuce.BattleEngine.Schema.ConfirmTargetType value = 1;
            }
            message ContinuousEffectIdUpdation {
                optional int32 value = 1;
            }
            message DamageAmountUpdation {
                optional int32 value = 1;
            }
            message DamageSymbolEnumUpdation {
                Lettuce.BattleEngine.Schema.DamageSymbol value = 1;
            }
            message DamageTypeEnumUpdation {
                Lettuce.BattleEngine.Schema.DamageType value = 1;
            }
            message DrawCardResultTypeEnumUpdation {
                Lettuce.BattleEngine.Schema.DrawCardResultType value = 1;
            }
            message EffectDamageResultUpdation {
                Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 1;
                Lettuce.BattleEngine.Schema.DamageAmountUpdation applied_damage = 2;
                optional bool is_weakness = 3;
                optional bool is_resisted = 4;
                optional int32 effect_delta = 5;
            }
            message EnergyAttachRequestUpdation {
                Lettuce.BattleEngine.Schema.BattleObjectIdUpdation pokemon = 1;
                Lettuce.BattleEngine.Schema.EnergySetUpdation energies = 2;
            }
            message EnergyAttachResponseUpdation {
                Lettuce.BattleEngine.Schema.BattleObjectIdUpdation pokemon = 1;
                Lettuce.BattleEngine.Schema.EnergySetUpdation energies = 2;
            }
            message EnergyDiscardUpdation {
                Lettuce.BattleEngine.Schema.BattleObjectIdUpdation from = 1;
                Lettuce.BattleEngine.Schema.EnergySetUpdation energies = 2;
            }
            message EnergyMoveUpdation {
                Lettuce.BattleEngine.Schema.BattleObjectIdUpdation from = 1;
                Lettuce.BattleEngine.Schema.BattleObjectIdUpdation to = 2;
                Lettuce.BattleEngine.Schema.EnergySetUpdation energies = 3;
                optional bool is_overflow = 4;
            }
            message EnergyPairRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.EnergyPair add = 2;
                    Lettuce.BattleEngine.Schema.EnergyPairUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message EnergyPairUpdation {
                Lettuce.BattleEngine.Schema.EnergyTypeEnumUpdation type = 1;
                optional int32 value = 2;
            }
            message EnergySetUpdation {
                repeated Lettuce.BattleEngine.Schema.EnergyPairRepeatedUpdation pairs = 1;
            }
            message EnergyTypeEnumRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.EnergyType add = 2;
                    Lettuce.BattleEngine.Schema.EnergyTypeEnumUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message EnergyTypeEnumUpdation {
                Lettuce.BattleEngine.Schema.EnergyType value = 1;
            }
            message EvolutionStageEnumUpdation {
                Lettuce.BattleEngine.Schema.EvolutionStage value = 1;
            }
            message ExpectedActionNoticeTypeEnumUpdation {
                Lettuce.BattleEngine.Schema.ExpectedActionNoticeType value = 1;
            }
            message ExpectedActionNoticeUpdation {
                Lettuce.BattleEngine.Schema.ExpectedActionNoticeTypeEnumUpdation notice_type = 1;
                repeated Lettuce.BattleEngine.Schema.NoticeParameterRepeatedUpdation parameters = 2;
            }
            message ExpectedActionRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.ExpectedAction add = 2;
                    Lettuce.BattleEngine.Schema.ExpectedActionUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message ExpectedActionUpdation {
                Lettuce.BattleEngine.Schema.PlayerIdUpdation player_id = 1;
                repeated Lettuce.BattleEngine.Schema.ActionTypeEnumRepeatedUpdation action_types = 2;
            }
            message ExtraAttackAppliedResultRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.ExtraAttackAppliedResult add = 2;
                    Lettuce.BattleEngine.Schema.ExtraAttackAppliedResultUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message ExtraAttackAppliedResultUpdation {
                Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 1;
                Lettuce.BattleEngine.Schema.DamageAmountUpdation damage = 2;
                optional bool is_weakness = 3;
                optional bool is_resisted = 4;
                optional int32 effect_delta = 5;
                optional bool is_prevented = 6;
            }
            message ExtraAttackCalculationResultRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.ExtraAttackCalculationResult add = 2;
                    Lettuce.BattleEngine.Schema.ExtraAttackCalculationResultUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message ExtraAttackCalculationResultUpdation {
                Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 1;
                Lettuce.BattleEngine.Schema.DamageAmountUpdation damage = 2;
                optional bool is_weakness = 3;
                optional bool is_resisted = 4;
                optional int32 effect_delta = 5;
            }
            message ExtraAttackOrderOptionUpdation {
                optional bool calculates_weakness = 1;
                optional bool calculates_resistance = 2;
                optional bool calculates_attacker_effects = 3;
                optional bool calculates_defender_effects = 4;
            }
            message ExtraAttackOrderRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.ExtraAttackOrder add = 2;
                    Lettuce.BattleEngine.Schema.ExtraAttackOrderUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message ExtraAttackOrderUpdation {
                Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 1;
                Lettuce.BattleEngine.Schema.DamageAmountUpdation damage = 2;
                Lettuce.BattleEngine.Schema.ExtraAttackOrderOptionUpdation option = 3;
            }
            message FlipCoinFlipTypeEnumUpdation {
                Lettuce.BattleEngine.Schema.FlipCoinFlipType value = 1;
            }
            message FlipCoinResultTypeEnumRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.FlipCoinResultType add = 2;
                    Lettuce.BattleEngine.Schema.FlipCoinResultTypeEnumUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message FlipCoinResultTypeEnumUpdation {
                Lettuce.BattleEngine.Schema.FlipCoinResultType value = 1;
            }
            message HealResultUpdation {
                Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 1;
                Lettuce.BattleEngine.Schema.DamageAmountUpdation heal_amount = 2;
                optional int32 effect_delta = 3;
                optional bool is_prevented = 4;
            }
            message InjectionDataUpdation {
                repeated Lettuce.BattleEngine.Schema.FlipCoinResultTypeEnumRepeatedUpdation flip_coin_results = 1;
            }
            message LocationTypeEnumUpdation {
                Lettuce.BattleEngine.Schema.LocationType value = 1;
            }
            message LogicIdUpdation {
                string value = 1;
            }
            message LogicSpecifierUpdation {
                Lettuce.BattleEngine.Schema.BattleObjectIdUpdation battle_object_id = 1;
                Lettuce.BattleEngine.Schema.CardIdUpdation card_id = 2;
                Lettuce.BattleEngine.Schema.LogicTypeEnumUpdation logic_type = 3;
                Lettuce.BattleEngine.Schema.PokemonAttackIdUpdation attack_id = 4;
                Lettuce.BattleEngine.Schema.PokemonAbilityIdUpdation ability_id = 5;
                Lettuce.BattleEngine.Schema.PokemonAttackIdUpdation parent_attack_id = 6;
                Lettuce.BattleEngine.Schema.ContinuousEffectIdUpdation continuous_effect_id = 7;
            }
            message LogicStateScopeTypeEnumUpdation {
                Lettuce.BattleEngine.Schema.LogicStateScopeType value = 1;
            }
            message LogicTypeEnumUpdation {
                Lettuce.BattleEngine.Schema.LogicType value = 1;
            }
            message MasterCardBaseIdUpdation {
                optional int64 value = 1;
            }
            message MasterCardIdUpdation {
                string value = 1;
            }
            message MasterPokemonIdUpdation {
                string value = 1;
            }
            message MasterTrainerIdUpdation {
                string value = 1;
            }
            message NoticeParameterRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.NoticeParameter add = 2;
                    Lettuce.BattleEngine.Schema.NoticeParameterUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message NoticeParameterUpdation {
                optional bool has_int_value = 1;
                optional int32 int_value = 2;
                Lettuce.BattleEngine.Schema.EnergyTypeEnumUpdation energy_type_value = 3;
                Lettuce.BattleEngine.Schema.CardNameUpdation card_name_value = 4;
            }
            message OneShotEffectApplySpecificationReasonEnumUpdation {
                Lettuce.BattleEngine.Schema.OneShotEffectApplySpecificationReason value = 1;
            }
            message OneShotEffectApplySpecificationReasonParameterRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.OneShotEffectApplySpecificationReasonParameter add = 2;
                    Lettuce.BattleEngine.Schema.OneShotEffectApplySpecificationReasonParameterUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message OneShotEffectApplySpecificationReasonParameterUpdation {
                optional bool has_int_value = 1;
                optional int32 int_value = 2;
                Lettuce.BattleEngine.Schema.EnergyTypeEnumUpdation energy_type_value = 3;
                Lettuce.BattleEngine.Schema.CardNameUpdation card_name_value = 4;
            }
            message OneShotEffectApplySpecificationResultUpdation {
                optional bool is_satisfied = 1;
                Lettuce.BattleEngine.Schema.OneShotEffectApplySpecificationReasonEnumUpdation reason = 2;
                repeated Lettuce.BattleEngine.Schema.OneShotEffectApplySpecificationReasonParameterRepeatedUpdation parameters = 3;
            }
            message PhaseStateEnumUpdation {
                Lettuce.BattleEngine.Schema.PhaseState value = 1;
            }
            message PhaseTypeEnumUpdation {
                Lettuce.BattleEngine.Schema.PhaseType value = 1;
            }
            message PickDiscardedCardResultTypeEnumUpdation {
                Lettuce.BattleEngine.Schema.PickDiscardedCardResultType value = 1;
            }
            message PlayerIdRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.PlayerId add = 2;
                    Lettuce.BattleEngine.Schema.PlayerIdUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message PlayerIdUpdation {
                optional int32 value = 1;
            }
            message PokemonAbilityIdUpdation {
                string value = 1;
            }
            message PokemonAttackIdRepeatedUpdation {
                int32 index = 1;
                oneof operation {
                    Lettuce.BattleEngine.Schema.PokemonAttackId add = 2;
                    Lettuce.BattleEngine.Schema.PokemonAttackIdUpdation updation = 3;
                    bool removed = 4;
                }
            }
            message PokemonAttackIdUpdation {
                string value = 1;
            }
            message PokemonAttackNameUpdation {
                string value = 1;
            }
            message PokemonAttackSetUpdation {
                Lettuce.BattleEngine.Schema.BattleObjectIdUpdation pokemon = 1;
                repeated Lettuce.BattleEngine.Schema.PokemonAttackIdRepeatedUpdation attacks = 2;
            }
            message PrizeAmountUpdation {
                optional int32 value = 2;
            }
            message ProcedureStateEnumUpdation {
                Lettuce.BattleEngine.Schema.ProcedureState value = 1;
            }
            message ProcedureTypeEnumUpdation {
                Lettuce.BattleEngine.Schema.ProcedureType value = 1;
            }
            message PublicBasicAttackDamageUpdation {
                optional bool has_damage = 1;
                Lettuce.BattleEngine.Schema.DamageAmountUpdation amount = 2;
            }
            message SpecialConditionCheckProgressEnumUpdation {
                Lettuce.BattleEngine.Schema.SpecialConditionCheckProgress value = 1;
            }
            message SpecialConditionCheckProgressStateEnumUpdation {
                Lettuce.BattleEngine.Schema.SpecialConditionCheckProgressState value = 1;
            }
            message SpecialConditionRecoveryUpdation {
                Lettuce.BattleEngine.Schema.BattleObjectIdUpdation pokemon = 1;
                Lettuce.BattleEngine.Schema.SpecialConditionTypeEnumUpdation type = 2;
            }
            message SpecialConditionTypeEnumUpdation {
                Lettuce.BattleEngine.Schema.SpecialConditionType value = 1;
            }
            message StepStateEnumUpdation {
                Lettuce.BattleEngine.Schema.StepState value = 1;
            }
            message StepTypeEnumUpdation {
                Lettuce.BattleEngine.Schema.StepType value = 1;
            }
            message TrainerTypeEnumUpdation {
                Lettuce.BattleEngine.Schema.TrainerType value = 1;
            }
            message Logic {
                message LogicState {
                    Lettuce.BattleEngine.Schema.LogicSpecifier specifier = 1;
                    Lettuce.BattleEngine.Schema.Logic.Local.Triggered.TriggerInfo trigger_info = 2;
                    oneof state {
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_Empty logic_state_empty = 100;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_SerialStep logic_state_serial_step = 101;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_FlipCoin logic_state_flip_coin = 102;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_SelectFieldPokemonFlipCoin logic_state_select_field_pokemon_flip_coin = 103;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_Activated logic_state_activated = 104;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_DslStep logic_state_dsl_step = 105;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_Common logic_common = 106;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_SelectPlayer logic_select_player = 107;
                    }
                }
                message HiddenLogicState {
                    Lettuce.BattleEngine.Schema.LogicSpecifier specifier = 1;
                    Lettuce.BattleEngine.Schema.Logic.Local.Triggered.TriggerInfo trigger_info = 2;
                    oneof state {
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_Empty logic_state_empty = 100;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_SerialStep logic_state_serial_step = 101;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_FlipCoin logic_state_flip_coin = 102;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_SelectFieldPokemonFlipCoin logic_state_select_field_pokemon_flip_coin = 103;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_Activated logic_state_activated = 104;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_DslStep logic_state_dsl_step = 105;
                        Lettuce.BattleEngine.Schema.Logic.Impl.HiddenLogicState_Common logic_common = 106;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_SelectPlayer logic_select_player = 107;
                    }
                }
                message HiddenLogicStateRepeatedUpdation {
                    int32 index = 1;
                    oneof operation {
                        Lettuce.BattleEngine.Schema.Logic.HiddenLogicState add = 2;
                        Lettuce.BattleEngine.Schema.Logic.HiddenLogicStateUpdation updation = 3;
                        bool removed = 4;
                    }
                }
                message HiddenLogicStateUpdation {
                    Lettuce.BattleEngine.Schema.LogicSpecifierUpdation specifier = 1;
                    Lettuce.BattleEngine.Schema.Logic.Local.Triggered.TriggerInfoUpdation trigger_info = 2;
                    oneof state {
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_Empty logic_state_empty = 100;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_SerialStep logic_state_serial_step = 101;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_FlipCoin logic_state_flip_coin = 102;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_SelectFieldPokemonFlipCoin logic_state_select_field_pokemon_flip_coin = 103;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_Activated logic_state_activated = 104;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_DslStep logic_state_dsl_step = 105;
                        Lettuce.BattleEngine.Schema.Logic.Impl.HiddenLogicState_Common logic_common = 106;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_SelectPlayer logic_select_player = 107;
                    }
                }
                message LogicStateRepeatedUpdation {
                    int32 index = 1;
                    oneof operation {
                        Lettuce.BattleEngine.Schema.Logic.LogicState add = 2;
                        Lettuce.BattleEngine.Schema.Logic.LogicStateUpdation updation = 3;
                        bool removed = 4;
                    }
                }
                message LogicStateUpdation {
                    Lettuce.BattleEngine.Schema.LogicSpecifierUpdation specifier = 1;
                    Lettuce.BattleEngine.Schema.Logic.Local.Triggered.TriggerInfoUpdation trigger_info = 2;
                    oneof state {
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_Empty logic_state_empty = 100;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_SerialStep logic_state_serial_step = 101;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_FlipCoin logic_state_flip_coin = 102;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_SelectFieldPokemonFlipCoin logic_state_select_field_pokemon_flip_coin = 103;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_Activated logic_state_activated = 104;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_DslStep logic_state_dsl_step = 105;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_Common logic_common = 106;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_SelectPlayer logic_select_player = 107;
                    }
                }
                message LogicStore {
                    repeated Lettuce.BattleEngine.Schema.Logic.LogicState resolving_states = 1;
                    repeated Lettuce.BattleEngine.Schema.Logic.LogicState attack_states = 2;
                    repeated Lettuce.BattleEngine.Schema.Logic.LogicState game_states = 3;
                    repeated Lettuce.BattleEngine.Schema.Logic.TriggeredLogicInfo resolving_triggered_logics = 4;
                    repeated Lettuce.BattleEngine.Schema.Logic.TriggeredLogicInfo triggered_logics = 5;
                }
                message TriggeredLogicInfo {
                    Lettuce.BattleEngine.Schema.LogicSpecifier specifier = 1;
                    Lettuce.BattleEngine.Schema.Logic.Local.Triggered.TriggerInfo trigger_info = 2;
                }
                message HiddenLogicStore {
                    repeated Lettuce.BattleEngine.Schema.Logic.HiddenLogicState resolving_states = 1;
                    repeated Lettuce.BattleEngine.Schema.Logic.HiddenLogicState attack_states = 2;
                    repeated Lettuce.BattleEngine.Schema.Logic.HiddenLogicState game_states = 3;
                    repeated Lettuce.BattleEngine.Schema.Logic.TriggeredLogicInfo resolving_triggered_logics = 4;
                    repeated Lettuce.BattleEngine.Schema.Logic.TriggeredLogicInfo triggered_logics = 5;
                }
                message HiddenLogicStoreUpdation {
                    repeated Lettuce.BattleEngine.Schema.Logic.HiddenLogicStateRepeatedUpdation resolving_states = 1;
                    repeated Lettuce.BattleEngine.Schema.Logic.HiddenLogicStateRepeatedUpdation attack_states = 2;
                    repeated Lettuce.BattleEngine.Schema.Logic.HiddenLogicStateRepeatedUpdation game_states = 3;
                    repeated Lettuce.BattleEngine.Schema.Logic.TriggeredLogicInfoRepeatedUpdation resolving_triggered_logics = 4;
                    repeated Lettuce.BattleEngine.Schema.Logic.TriggeredLogicInfoRepeatedUpdation triggered_logics = 5;
                }
                message LogicStoreUpdation {
                    repeated Lettuce.BattleEngine.Schema.Logic.LogicStateRepeatedUpdation resolving_states = 1;
                    repeated Lettuce.BattleEngine.Schema.Logic.LogicStateRepeatedUpdation attack_states = 2;
                    repeated Lettuce.BattleEngine.Schema.Logic.LogicStateRepeatedUpdation game_states = 3;
                    repeated Lettuce.BattleEngine.Schema.Logic.TriggeredLogicInfoRepeatedUpdation resolving_triggered_logics = 4;
                    repeated Lettuce.BattleEngine.Schema.Logic.TriggeredLogicInfoRepeatedUpdation triggered_logics = 5;
                }
                message TriggeredLogicInfoRepeatedUpdation {
                    int32 index = 1;
                    oneof operation {
                        Lettuce.BattleEngine.Schema.Logic.TriggeredLogicInfo add = 2;
                        Lettuce.BattleEngine.Schema.Logic.TriggeredLogicInfoUpdation updation = 3;
                        bool removed = 4;
                    }
                }
                message TriggeredLogicInfoUpdation {
                    Lettuce.BattleEngine.Schema.LogicSpecifierUpdation specifier = 1;
                    Lettuce.BattleEngine.Schema.Logic.Local.Triggered.TriggerInfoUpdation trigger_info = 2;
                }
                message Local {
                    message Triggered {
                        message TriggerInfo {
                            oneof parameter {
                                Lettuce.BattleEngine.Schema.Logic.Local.Triggered.Empty empty = 1;
                                Lettuce.BattleEngine.Schema.Logic.Local.Triggered.AttackDamageAppliedTrigger attack_damage_applied_trigger = 2;
                                Lettuce.BattleEngine.Schema.Logic.Local.Triggered.KnockedOutTrigger knocked_out_trigger = 3;
                                Lettuce.BattleEngine.Schema.Logic.Local.Triggered.AtEndPhaseTrigger at_end_phase_trigger = 4;
                                Lettuce.BattleEngine.Schema.Logic.Local.Triggered.AtPokemonCheckupTrigger at_pokemon_checkup_trigger = 5;
                                Lettuce.BattleEngine.Schema.Logic.Local.Triggered.EnergyAttachedFromZoneTrigger energy_attached_trigger = 6;
                                Lettuce.BattleEngine.Schema.Logic.Local.Triggered.SpecialConditionInconsistentTrigger special_condition_inconsistent_trigger = 7;
                            }
                        }
                        message Empty {
                        }
                        message AttackDamageAppliedTrigger {
                            Lettuce.BattleEngine.Schema.BattleObjectId attacker = 1;
                            Lettuce.BattleEngine.Schema.BattleObjectId defender = 2;
                        }
                        message KnockedOutTrigger {
                            Lettuce.BattleEngine.Schema.BattleObjectId will_knocked_out_pokemon = 1;
                            Lettuce.BattleEngine.Schema.BattleObjectId attacker = 2;
                            Lettuce.BattleEngine.Schema.PokemonAttackId will_knocked_out_attack_id = 3;
                        }
                        message AtEndPhaseTrigger {
                        }
                        message AtPokemonCheckupTrigger {
                        }
                        message EnergyAttachedFromZoneTrigger {
                            Lettuce.BattleEngine.Schema.EnergyType energy = 1;
                            Lettuce.BattleEngine.Schema.BattleObjectId target = 2;
                        }
                        message SpecialConditionInconsistentTrigger {
                            Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                        }
                        message AtEndPhaseTriggerUpdation {
                        }
                        message AtPokemonCheckupTriggerUpdation {
                        }
                        message AttackDamageAppliedTriggerUpdation {
                            Lettuce.BattleEngine.Schema.BattleObjectIdUpdation attacker = 1;
                            Lettuce.BattleEngine.Schema.BattleObjectIdUpdation defender = 2;
                        }
                        message EmptyUpdation {
                        }
                        message EnergyAttachedFromZoneTriggerUpdation {
                            Lettuce.BattleEngine.Schema.EnergyTypeEnumUpdation energy = 1;
                            Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 2;
                        }
                        message KnockedOutTriggerUpdation {
                            Lettuce.BattleEngine.Schema.BattleObjectIdUpdation will_knocked_out_pokemon = 1;
                            Lettuce.BattleEngine.Schema.BattleObjectIdUpdation attacker = 2;
                            Lettuce.BattleEngine.Schema.PokemonAttackIdUpdation will_knocked_out_attack_id = 3;
                        }
                        message SpecialConditionInconsistentTriggerUpdation {
                            Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 1;
                        }
                        message TriggerInfoUpdation {
                            oneof parameter {
                                Lettuce.BattleEngine.Schema.Logic.Local.Triggered.Empty empty = 1;
                                Lettuce.BattleEngine.Schema.Logic.Local.Triggered.AttackDamageAppliedTrigger attack_damage_applied_trigger = 2;
                                Lettuce.BattleEngine.Schema.Logic.Local.Triggered.KnockedOutTrigger knocked_out_trigger = 3;
                                Lettuce.BattleEngine.Schema.Logic.Local.Triggered.AtEndPhaseTrigger at_end_phase_trigger = 4;
                                Lettuce.BattleEngine.Schema.Logic.Local.Triggered.AtPokemonCheckupTrigger at_pokemon_checkup_trigger = 5;
                                Lettuce.BattleEngine.Schema.Logic.Local.Triggered.EnergyAttachedFromZoneTrigger energy_attached_trigger = 6;
                                Lettuce.BattleEngine.Schema.Logic.Local.Triggered.SpecialConditionInconsistentTrigger special_condition_inconsistent_trigger = 7;
                            }
                        }
                    }
                }
                message Impl {
                    message LogicState_Activated {
                        bool has_activated = 1;
                        int32 activated_turn_number = 2;
                    }
                    message LogicState_ActivatedUpdation {
                        optional bool has_activated = 1;
                        optional int32 activated_turn_number = 2;
                    }
                    enum LogicState_CommonParameter_Type {
                        LOGIC_STATE_COMMON_PARAMETER_TYPE_UNSPECIFIED = 0;
                        LOGIC_STATE_COMMON_PARAMETER_TYPE_BOOL = 1;
                        LOGIC_STATE_COMMON_PARAMETER_TYPE_LONG = 2;
                        LOGIC_STATE_COMMON_PARAMETER_TYPE_STRING = 3;
                    }
                    message LogicState_Common {
                        repeated Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_CommonParameter values = 2;
                    }
                    message LogicState_CommonParameter {
                        string key = 1;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_CommonParameter_Type type = 2;
                        bool bool_value = 3;
                        int64 long_value = 4;
                        string string_value = 5;
                    }
                    message HiddenLogicState_Common {
                        int32 count = 1;
                    }
                    message HiddenLogicState_CommonUpdation {
                        optional int32 count = 1;
                    }
                    message LogicState_CommonParameter_TypeEnumUpdation {
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_CommonParameter_Type value = 1;
                    }
                    message LogicState_CommonParameterRepeatedUpdation {
                        int32 index = 1;
                        oneof operation {
                            Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_CommonParameter add = 2;
                            Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_CommonParameterUpdation updation = 3;
                            bool removed = 4;
                        }
                    }
                    message LogicState_CommonParameterUpdation {
                        string key = 1;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_CommonParameter_TypeEnumUpdation type = 2;
                        optional bool bool_value = 3;
                        optional int64 long_value = 4;
                        string string_value = 5;
                    }
                    message LogicState_CommonUpdation {
                        repeated Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_CommonParameterRepeatedUpdation values = 2;
                    }
                    enum LogicState_DslStepResult_Type {
                        LOGIC_STATE_DSL_STEP_RESULT_TYPE_UNSPECIFIED = 0;
                        LOGIC_STATE_DSL_STEP_RESULT_TYPE_BOOL = 1;
                        LOGIC_STATE_DSL_STEP_RESULT_TYPE_LONG = 2;
                        LOGIC_STATE_DSL_STEP_RESULT_TYPE_STRING = 3;
                    }
                    message LogicState_DslStep {
                        int32 step = 1;
                        repeated Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_DslStepResult results = 2;
                    }
                    message LogicState_DslStepResult {
                        string key = 1;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_DslStepResult_Type type = 2;
                        bool bool_value = 3;
                        int64 long_value = 4;
                        string string_value = 5;
                    }
                    message LogicState_DslStepResult_TypeEnumUpdation {
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_DslStepResult_Type value = 1;
                    }
                    message LogicState_DslStepResultRepeatedUpdation {
                        int32 index = 1;
                        oneof operation {
                            Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_DslStepResult add = 2;
                            Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_DslStepResultUpdation updation = 3;
                            bool removed = 4;
                        }
                    }
                    message LogicState_DslStepResultUpdation {
                        string key = 1;
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_DslStepResult_TypeEnumUpdation type = 2;
                        optional bool bool_value = 3;
                        optional int64 long_value = 4;
                        string string_value = 5;
                    }
                    message LogicState_DslStepUpdation {
                        optional int32 step = 1;
                        repeated Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_DslStepResultRepeatedUpdation results = 2;
                    }
                    message LogicState_Empty {
                    }
                    message LogicState_EmptyUpdation {
                    }
                    enum LogicState_FlipCoin_Step {
                        LOGIC_STATE_FLIP_COIN_STEP_UNSPECIFIED = 0;
                        LOGIC_STATE_FLIP_COIN_STEP_ON_FLIP = 1;
                        LOGIC_STATE_FLIP_COIN_STEP_ON_FLIP_AFTER = 2;
                        LOGIC_STATE_FLIP_COIN_STEP_ON_FINISH = 3;
                    }
                    message LogicState_FlipCoin {
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_FlipCoin_Step step = 1;
                        int32 head_count = 3;
                    }
                    message LogicState_FlipCoin_StepEnumUpdation {
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_FlipCoin_Step value = 1;
                    }
                    message LogicState_FlipCoinUpdation {
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_FlipCoin_StepEnumUpdation step = 1;
                        optional int32 head_count = 3;
                    }
                    enum LogicState_SelectFieldPokemonFlipCoin_Step {
                        LOGIC_STATE_SELECT_FIELD_POKEMON_FLIP_COIN_STEP_UNSPECIFIED = 0;
                        LOGIC_STATE_SELECT_FIELD_POKEMON_FLIP_COIN_STEP_ON_POKEMON_SELECTED = 1;
                        LOGIC_STATE_SELECT_FIELD_POKEMON_FLIP_COIN_STEP_ON_FLIP = 2;
                        LOGIC_STATE_SELECT_FIELD_POKEMON_FLIP_COIN_STEP_ON_FINISH = 3;
                    }
                    message LogicState_SelectFieldPokemonFlipCoin {
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_SelectFieldPokemonFlipCoin_Step step = 1;
                        Lettuce.BattleEngine.Schema.BattleObjectId selected_pokemon = 2;
                        int32 head_count = 3;
                    }
                    message LogicState_SelectFieldPokemonFlipCoin_StepEnumUpdation {
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_SelectFieldPokemonFlipCoin_Step value = 1;
                    }
                    message LogicState_SelectFieldPokemonFlipCoinUpdation {
                        Lettuce.BattleEngine.Schema.Logic.Impl.LogicState_SelectFieldPokemonFlipCoin_StepEnumUpdation step = 1;
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation selected_pokemon = 2;
                        optional int32 head_count = 3;
                    }
                    message LogicState_SelectPlayer {
                        Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                    }
                    message LogicState_SelectPlayerUpdation {
                        Lettuce.BattleEngine.Schema.PlayerIdUpdation player_id = 1;
                    }
                    message LogicState_SerialStep {
                        int32 step = 1;
                    }
                    message LogicState_SerialStepUpdation {
                        optional int32 step = 1;
                    }
                }
            }
            message Effect {
                message ContinuousEffectStore {
                    repeated Lettuce.BattleEngine.Schema.Effect.ContinuousEffect continuous_effects = 1;
                    Lettuce.BattleEngine.Schema.ContinuousEffectId last_id = 2;
                }
                message ContinuousEffect {
                    Lettuce.BattleEngine.Schema.ContinuousEffectId id = 4;
                    Lettuce.BattleEngine.Schema.Effect.ContinuousEffectOperation operation = 1;
                    Lettuce.BattleEngine.Schema.Effect.ContinuousEffectCause cause = 3;
                }
                message ContinuousEffectTarget {
                    Lettuce.BattleEngine.Schema.BattleObjectId pokemon = 1;
                    repeated Lettuce.BattleEngine.Schema.PlayerId players = 2;
                }
                message ContinuousEffectCause {
                    Lettuce.BattleEngine.Schema.LogicSpecifier logic = 1;
                    Lettuce.BattleEngine.Schema.CardId card = 2;
                }
                message ContinuousEffectOperation {
                    oneof operation {
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceAttackDamage reduce_attack_damage = 1;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_PreventAttackDamageAndEffectNextTurn prevent_attack_damage_and_effect_next_turn = 2;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_AddAttackDamageToActiveThisTurn add_attack_damage_to_active_this_turn = 3;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_AddAttackDamageToActiveThisTurnNameSpecified add_attack_damage_to_active_this_turn_name_specified = 4;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_PreventPlaySupportIfInActive prevent_play_support_if_in_active = 5;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceAttackDamageForCardNextTurn reduce_attack_damage_for_card_next_turn = 6;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_InterruptRetreat interrupt_retreat = 7;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_SubAttackDamageNextTurnForPokemon sub_attack_damage_next_turn_for_pokemon = 8;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_PreventDetermineAttackNextTurnForPokemon prevent_determine_attack_next_turn_for_pokemon = 9;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_PreventPlaySupportNextTurn prevent_play_support_next_turn = 10;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_AttackFailIfCoinTail attack_fail_if_coin_tail = 11;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceRetreatCostThisTurn reduce_retreat_cost_this_turn = 12;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceAttackDamageFromOpponentNextTurn reduce_attack_damage_from_opponent_next_turn = 13;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_PreventEvolveActivePokemonFromHand prevent_evolve_active_pokemon_from_hand = 14;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_DoubleSpecifiedEnergy double_specified_energy = 15;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_AddAttackDamageToActiveByType add_attack_damage_to_active_by_type = 16;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_AddAttackDamageToActiveThisTurnBySpecifying2Names add_attack_damage_to_active_this_turn_by_specifying2_names = 17;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_PreventDetermineAttackNextTurnForAttack prevent_determine_attack_next_turn_for_attack = 18;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_AddAttackDamageNextSelfTurnForAttack ce_op_add_attack_damage_next_self_turn_for_attack = 19;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_PreventAttackDamageNextTurn prevent_attack_damage_next_turn = 20;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceEnergyToAttackThisTurnBySpecifyingNamesAndEnergyTypes reduce_energy_to_attack_this_turn_by_specifying_names_and_energy_types = 21;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_AddAttackDamageAgainstPokemonExToThisTurn add_attack_damage_against_pokemon_ex_to_this_turn = 22;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceAttackDamageForSelectedTypeFromOpponentNextTurn reduce_attack_damage_for_selected_type_next_turn = 23;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceAttackDamageForType reduce_attack_damage_for_type = 24;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_PreventAttackEffect prevent_attack_effect = 25;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_PreventAllSpecialConditionForThisPokemon prevent_all_special_condition_for_this_pokemon = 26;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceEnergySpecifyingAttackEnergyTypesIfExistsNamesInField ce_op_reduce_energy_specifying_attack_energy_types_if_exists_names_in_field = 27;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_AddAttackDamageToThisPokemonIfSpecifyingNamesExists add_attack_damage_to_this_pokemon_if_specifying_names_exists = 28;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_SelfDamageForKnockOut ce_op_self_damage_for_knock_out = 29;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceDamageIfCoinHead ce_op_reduce_damage_if_coin_head = 30;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_RetreatCostZeroNameSpecified retreat_cost_zero_name_specified = 31;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_RetreatCostZeroBySpecifyingNames retreat_cost_zero_by_specifying_names = 32;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceAttackDamageIfExistsNamesInField reduce_attack_damage_if_exists_names_in_field = 33;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_RetreatCostZeroWhileEnergyAttached retreat_cost_zero_while_energy_attached = 34;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_AddMaxHp ce_op_add_max_hp = 35;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceRetreatCostEvolutionStageSpecified ce_op_reduce_retreat_cost_evolution_stage_specified = 36;
                    }
                }
                message ContinuousEffectOperationUpdation {
                    oneof operation {
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceAttackDamage reduce_attack_damage = 1;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_PreventAttackDamageAndEffectNextTurn prevent_attack_damage_and_effect_next_turn = 2;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_AddAttackDamageToActiveThisTurn add_attack_damage_to_active_this_turn = 3;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_AddAttackDamageToActiveThisTurnNameSpecified add_attack_damage_to_active_this_turn_name_specified = 4;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_PreventPlaySupportIfInActive prevent_play_support_if_in_active = 5;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceAttackDamageForCardNextTurn reduce_attack_damage_for_card_next_turn = 6;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_InterruptRetreat interrupt_retreat = 7;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_SubAttackDamageNextTurnForPokemon sub_attack_damage_next_turn_for_pokemon = 8;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_PreventDetermineAttackNextTurnForPokemon prevent_determine_attack_next_turn_for_pokemon = 9;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_PreventPlaySupportNextTurn prevent_play_support_next_turn = 10;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_AttackFailIfCoinTail attack_fail_if_coin_tail = 11;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceRetreatCostThisTurn reduce_retreat_cost_this_turn = 12;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceAttackDamageFromOpponentNextTurn reduce_attack_damage_from_opponent_next_turn = 13;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_PreventEvolveActivePokemonFromHand prevent_evolve_active_pokemon_from_hand = 14;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_DoubleSpecifiedEnergy double_specified_energy = 15;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_AddAttackDamageToActiveByType add_attack_damage_to_active_by_type = 16;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_AddAttackDamageToActiveThisTurnBySpecifying2Names add_attack_damage_to_active_this_turn_by_specifying2_names = 17;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_PreventDetermineAttackNextTurnForAttack prevent_determine_attack_next_turn_for_attack = 18;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_AddAttackDamageNextSelfTurnForAttack ce_op_add_attack_damage_next_self_turn_for_attack = 19;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_PreventAttackDamageNextTurn prevent_attack_damage_next_turn = 20;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceEnergyToAttackThisTurnBySpecifyingNamesAndEnergyTypes reduce_energy_to_attack_this_turn_by_specifying_names_and_energy_types = 21;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_AddAttackDamageAgainstPokemonExToThisTurn add_attack_damage_against_pokemon_ex_to_this_turn = 22;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceAttackDamageForSelectedTypeFromOpponentNextTurn reduce_attack_damage_for_selected_type_next_turn = 23;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceAttackDamageForType reduce_attack_damage_for_type = 24;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_PreventAttackEffect prevent_attack_effect = 25;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_PreventAllSpecialConditionForThisPokemon prevent_all_special_condition_for_this_pokemon = 26;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceEnergySpecifyingAttackEnergyTypesIfExistsNamesInField ce_op_reduce_energy_specifying_attack_energy_types_if_exists_names_in_field = 27;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_AddAttackDamageToThisPokemonIfSpecifyingNamesExists add_attack_damage_to_this_pokemon_if_specifying_names_exists = 28;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_SelfDamageForKnockOut ce_op_self_damage_for_knock_out = 29;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceDamageIfCoinHead ce_op_reduce_damage_if_coin_head = 30;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_RetreatCostZeroNameSpecified retreat_cost_zero_name_specified = 31;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_RetreatCostZeroBySpecifyingNames retreat_cost_zero_by_specifying_names = 32;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceAttackDamageIfExistsNamesInField reduce_attack_damage_if_exists_names_in_field = 33;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_RetreatCostZeroWhileEnergyAttached retreat_cost_zero_while_energy_attached = 34;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_AddMaxHp ce_op_add_max_hp = 35;
                        Lettuce.BattleEngine.Schema.Effect.Impl.ContinuousEffectOperation_ReduceRetreatCostEvolutionStageSpecified ce_op_reduce_retreat_cost_evolution_stage_specified = 36;
                    }
                }
                message ContinuousEffectCauseUpdation {
                    Lettuce.BattleEngine.Schema.LogicSpecifierUpdation logic = 1;
                    Lettuce.BattleEngine.Schema.CardIdUpdation card = 2;
                }
                message ContinuousEffectRepeatedUpdation {
                    int32 index = 1;
                    oneof operation {
                        Lettuce.BattleEngine.Schema.Effect.ContinuousEffect add = 2;
                        Lettuce.BattleEngine.Schema.Effect.ContinuousEffectUpdation updation = 3;
                        bool removed = 4;
                    }
                }
                message ContinuousEffectStoreUpdation {
                    repeated Lettuce.BattleEngine.Schema.Effect.ContinuousEffectRepeatedUpdation continuous_effects = 1;
                    Lettuce.BattleEngine.Schema.ContinuousEffectIdUpdation last_id = 2;
                }
                message ContinuousEffectTargetUpdation {
                    Lettuce.BattleEngine.Schema.BattleObjectIdUpdation pokemon = 1;
                    repeated Lettuce.BattleEngine.Schema.PlayerIdRepeatedUpdation players = 2;
                }
                message ContinuousEffectUpdation {
                    Lettuce.BattleEngine.Schema.ContinuousEffectIdUpdation id = 4;
                    Lettuce.BattleEngine.Schema.Effect.ContinuousEffectOperationUpdation operation = 1;
                    Lettuce.BattleEngine.Schema.Effect.ContinuousEffectCauseUpdation cause = 3;
                }
                message Impl {
                    message ContinuousEffectOperation_AddAttackDamageAgainstPokemonExToThisTurn {
                        Lettuce.BattleEngine.Schema.PlayerId target = 1;
                        int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.DamageAmount add_amount = 3;
                    }
                    message ContinuousEffectOperation_AddAttackDamageAgainstPokemonExToThisTurnUpdation {
                        Lettuce.BattleEngine.Schema.PlayerIdUpdation target = 1;
                        optional int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.DamageAmountUpdation add_amount = 3;
                    }
                    message ContinuousEffectOperation_AddAttackDamageNextSelfTurnForAttack {
                        Lettuce.BattleEngine.Schema.DamageAmount add_amount = 1;
                        int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 3;
                        Lettuce.BattleEngine.Schema.PokemonAttackName attack = 4;
                    }
                    message ContinuousEffectOperation_AddAttackDamageNextSelfTurnForAttackUpdation {
                        Lettuce.BattleEngine.Schema.DamageAmountUpdation add_amount = 1;
                        optional int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 3;
                        Lettuce.BattleEngine.Schema.PokemonAttackNameUpdation attack = 4;
                    }
                    message ContinuousEffectOperation_AddAttackDamageToActiveByType {
                        Lettuce.BattleEngine.Schema.DamageAmount add_amount = 1;
                        Lettuce.BattleEngine.Schema.PlayerId target = 2;
                        Lettuce.BattleEngine.Schema.EnergyType type = 3;
                    }
                    message ContinuousEffectOperation_AddAttackDamageToActiveByTypeUpdation {
                        Lettuce.BattleEngine.Schema.DamageAmountUpdation add_amount = 1;
                        Lettuce.BattleEngine.Schema.PlayerIdUpdation target = 2;
                        Lettuce.BattleEngine.Schema.EnergyTypeEnumUpdation type = 3;
                    }
                    message ContinuousEffectOperation_AddAttackDamageToActiveThisTurn {
                        Lettuce.BattleEngine.Schema.DamageAmount add_amount = 1;
                        int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.PlayerId target = 3;
                    }
                    message ContinuousEffectOperation_AddAttackDamageToActiveThisTurnBySpecifying2Names {
                        Lettuce.BattleEngine.Schema.DamageAmount add_amount = 1;
                        int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.PlayerId target = 3;
                        Lettuce.BattleEngine.Schema.CardName name1 = 4;
                        Lettuce.BattleEngine.Schema.CardName name2 = 5;
                    }
                    message ContinuousEffectOperation_AddAttackDamageToActiveThisTurnBySpecifying2NamesUpdation {
                        Lettuce.BattleEngine.Schema.DamageAmountUpdation add_amount = 1;
                        optional int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.PlayerIdUpdation target = 3;
                        Lettuce.BattleEngine.Schema.CardNameUpdation name1 = 4;
                        Lettuce.BattleEngine.Schema.CardNameUpdation name2 = 5;
                    }
                    message ContinuousEffectOperation_AddAttackDamageToActiveThisTurnNameSpecified {
                        Lettuce.BattleEngine.Schema.DamageAmount add_amount = 1;
                        int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.PlayerId target = 3;
                        Lettuce.BattleEngine.Schema.CardName name1 = 4;
                        Lettuce.BattleEngine.Schema.CardName name2 = 5;
                        Lettuce.BattleEngine.Schema.CardName name3 = 6;
                    }
                    message ContinuousEffectOperation_AddAttackDamageToActiveThisTurnNameSpecifiedUpdation {
                        Lettuce.BattleEngine.Schema.DamageAmountUpdation add_amount = 1;
                        optional int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.PlayerIdUpdation target = 3;
                        Lettuce.BattleEngine.Schema.CardNameUpdation name1 = 4;
                        Lettuce.BattleEngine.Schema.CardNameUpdation name2 = 5;
                        Lettuce.BattleEngine.Schema.CardNameUpdation name3 = 6;
                    }
                    message ContinuousEffectOperation_AddAttackDamageToActiveThisTurnUpdation {
                        Lettuce.BattleEngine.Schema.DamageAmountUpdation add_amount = 1;
                        optional int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.PlayerIdUpdation target = 3;
                    }
                    message ContinuousEffectOperation_AddAttackDamageToThisPokemonIfSpecifyingNamesExists {
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                        Lettuce.BattleEngine.Schema.DamageAmount add_amount = 2;
                        repeated Lettuce.BattleEngine.Schema.CardName names = 3;
                    }
                    message ContinuousEffectOperation_AddAttackDamageToThisPokemonIfSpecifyingNamesExistsUpdation {
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 1;
                        Lettuce.BattleEngine.Schema.DamageAmountUpdation add_amount = 2;
                        repeated Lettuce.BattleEngine.Schema.CardNameRepeatedUpdation names = 3;
                    }
                    message ContinuousEffectOperation_AddMaxHp {
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                        int32 add_amount = 2;
                    }
                    message ContinuousEffectOperation_AddMaxHpUpdation {
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 1;
                        optional int32 add_amount = 2;
                    }
                    message ContinuousEffectOperation_AttackFailIfCoinTail {
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                        int32 applied_turn = 2;
                        bool is_flip_coin_resolved = 3;
                    }
                    message ContinuousEffectOperation_AttackFailIfCoinTailUpdation {
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 1;
                        optional int32 applied_turn = 2;
                        optional bool is_flip_coin_resolved = 3;
                    }
                    message ContinuousEffectOperation_DoubleSpecifiedEnergy {
                        Lettuce.BattleEngine.Schema.PlayerId target_player = 1;
                        Lettuce.BattleEngine.Schema.EnergyType pokemon_type = 2;
                        Lettuce.BattleEngine.Schema.EnergyType double_energy = 3;
                        Lettuce.BattleEngine.Schema.PokemonAbilityId ability_id = 4;
                    }
                    message ContinuousEffectOperation_DoubleSpecifiedEnergyUpdation {
                        Lettuce.BattleEngine.Schema.PlayerIdUpdation target_player = 1;
                        Lettuce.BattleEngine.Schema.EnergyTypeEnumUpdation pokemon_type = 2;
                        Lettuce.BattleEngine.Schema.EnergyTypeEnumUpdation double_energy = 3;
                        Lettuce.BattleEngine.Schema.PokemonAbilityIdUpdation ability_id = 4;
                    }
                    message ContinuousEffectOperation_InterruptRetreat {
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                        int32 applied_turn = 2;
                    }
                    message ContinuousEffectOperation_InterruptRetreatUpdation {
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 1;
                        optional int32 applied_turn = 2;
                    }
                    message ContinuousEffectOperation_PreventAllSpecialConditionForThisPokemon {
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                    }
                    message ContinuousEffectOperation_PreventAllSpecialConditionForThisPokemonUpdation {
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 1;
                    }
                    message ContinuousEffectOperation_PreventAttackDamageAndEffectNextTurn {
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                        int32 applied_turn = 2;
                    }
                    message ContinuousEffectOperation_PreventAttackDamageAndEffectNextTurnUpdation {
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 1;
                        optional int32 applied_turn = 2;
                    }
                    message ContinuousEffectOperation_PreventAttackDamageNextTurn {
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                        int32 applied_turn = 2;
                    }
                    message ContinuousEffectOperation_PreventAttackDamageNextTurnUpdation {
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 1;
                        optional int32 applied_turn = 2;
                    }
                    message ContinuousEffectOperation_PreventAttackEffect {
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                    }
                    message ContinuousEffectOperation_PreventAttackEffectUpdation {
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 1;
                    }
                    message ContinuousEffectOperation_PreventDetermineAttackNextTurnForAttack {
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                        int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.PokemonAttackName attack_name = 3;
                    }
                    message ContinuousEffectOperation_PreventDetermineAttackNextTurnForAttackUpdation {
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 1;
                        optional int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.PokemonAttackNameUpdation attack_name = 3;
                    }
                    message ContinuousEffectOperation_PreventDetermineAttackNextTurnForPokemon {
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                        int32 applied_turn = 2;
                    }
                    message ContinuousEffectOperation_PreventDetermineAttackNextTurnForPokemonUpdation {
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 1;
                        optional int32 applied_turn = 2;
                    }
                    message ContinuousEffectOperation_PreventEvolveActivePokemonFromHand {
                        Lettuce.BattleEngine.Schema.PlayerId target = 1;
                    }
                    message ContinuousEffectOperation_PreventEvolveActivePokemonFromHandUpdation {
                        Lettuce.BattleEngine.Schema.PlayerIdUpdation target = 1;
                    }
                    message ContinuousEffectOperation_PreventPlaySupportIfInActive {
                        Lettuce.BattleEngine.Schema.PlayerId target = 1;
                    }
                    message ContinuousEffectOperation_PreventPlaySupportIfInActiveUpdation {
                        Lettuce.BattleEngine.Schema.PlayerIdUpdation target = 1;
                    }
                    message ContinuousEffectOperation_PreventPlaySupportNextTurn {
                        Lettuce.BattleEngine.Schema.PlayerId target = 1;
                        int32 applied_turn = 2;
                    }
                    message ContinuousEffectOperation_PreventPlaySupportNextTurnUpdation {
                        Lettuce.BattleEngine.Schema.PlayerIdUpdation target = 1;
                        optional int32 applied_turn = 2;
                    }
                    message ContinuousEffectOperation_ReduceAttackDamage {
                        Lettuce.BattleEngine.Schema.DamageAmount reduce_amount = 1;
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 2;
                    }
                    message ContinuousEffectOperation_ReduceAttackDamageForCardNextTurn {
                        Lettuce.BattleEngine.Schema.DamageAmount reduce_amount = 1;
                        int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 3;
                    }
                    message ContinuousEffectOperation_ReduceAttackDamageForCardNextTurnUpdation {
                        Lettuce.BattleEngine.Schema.DamageAmountUpdation reduce_amount = 1;
                        optional int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 3;
                    }
                    message ContinuousEffectOperation_ReduceAttackDamageForSelectedTypeFromOpponentNextTurn {
                        Lettuce.BattleEngine.Schema.DamageAmount reduce_amount = 1;
                        int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.PlayerId target = 3;
                        Lettuce.BattleEngine.Schema.EnergyType energy_type = 4;
                    }
                    message ContinuousEffectOperation_ReduceAttackDamageForSelectedTypeFromOpponentNextTurnUpdation {
                        Lettuce.BattleEngine.Schema.DamageAmountUpdation reduce_amount = 1;
                        optional int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.PlayerIdUpdation target = 3;
                        Lettuce.BattleEngine.Schema.EnergyTypeEnumUpdation energy_type = 4;
                    }
                    message ContinuousEffectOperation_ReduceAttackDamageForType {
                        repeated Lettuce.BattleEngine.Schema.EnergyType type = 1;
                        Lettuce.BattleEngine.Schema.DamageAmount reduce_amount = 2;
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 3;
                    }
                    message ContinuousEffectOperation_ReduceAttackDamageForTypeUpdation {
                        repeated Lettuce.BattleEngine.Schema.EnergyTypeEnumRepeatedUpdation type = 1;
                        Lettuce.BattleEngine.Schema.DamageAmountUpdation reduce_amount = 2;
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 3;
                    }
                    message ContinuousEffectOperation_ReduceAttackDamageIfExistsNamesInField {
                        Lettuce.BattleEngine.Schema.DamageAmount reduce_amount = 1;
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 2;
                        repeated Lettuce.BattleEngine.Schema.CardName names = 3;
                    }
                    message ContinuousEffectOperation_ReduceAttackDamageIfExistsNamesInFieldUpdation {
                        Lettuce.BattleEngine.Schema.DamageAmountUpdation reduce_amount = 1;
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 2;
                        repeated Lettuce.BattleEngine.Schema.CardNameRepeatedUpdation names = 3;
                    }
                    message ContinuousEffectOperation_ReduceAttackDamageFromOpponentNextTurn {
                        Lettuce.BattleEngine.Schema.DamageAmount reduce_amount = 1;
                        int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.PlayerId target = 3;
                    }
                    message ContinuousEffectOperation_ReduceAttackDamageFromOpponentNextTurnUpdation {
                        Lettuce.BattleEngine.Schema.DamageAmountUpdation reduce_amount = 1;
                        optional int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.PlayerIdUpdation target = 3;
                    }
                    message ContinuousEffectOperation_ReduceAttackDamageUpdation {
                        Lettuce.BattleEngine.Schema.DamageAmountUpdation reduce_amount = 1;
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 2;
                    }
                    message ContinuousEffectOperation_ReduceDamageIfCoinHead {
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                        int32 applied_turn = 2;
                        bool is_flip_coin_resolved = 3;
                        int32 reduce_damage = 4;
                        bool is_flip_coin_result_head = 5;
                    }
                    message ContinuousEffectOperation_ReduceDamageIfCoinHeadUpdation {
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 1;
                        optional int32 applied_turn = 2;
                        optional bool is_flip_coin_resolved = 3;
                        optional int32 reduce_damage = 4;
                        optional bool is_flip_coin_result_head = 5;
                    }
                    message ContinuousEffectOperation_ReduceEnergySpecifyingAttackEnergyTypesIfExistsNamesInField {
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                        repeated Lettuce.BattleEngine.Schema.CardName names = 2;
                        repeated Lettuce.BattleEngine.Schema.EnergyPair energy_pairs = 3;
                    }
                    message ContinuousEffectOperation_ReduceEnergySpecifyingAttackEnergyTypesIfExistsNamesInFieldUpdation {
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 1;
                        repeated Lettuce.BattleEngine.Schema.CardNameRepeatedUpdation names = 2;
                        repeated Lettuce.BattleEngine.Schema.EnergyPairRepeatedUpdation energy_pairs = 3;
                    }
                    message ContinuousEffectOperation_ReduceEnergyToAttackThisTurnBySpecifyingNamesAndEnergyTypes {
                        Lettuce.BattleEngine.Schema.PlayerId target = 1;
                        int32 applied_turn = 2;
                        repeated Lettuce.BattleEngine.Schema.CardName names = 3;
                        repeated Lettuce.BattleEngine.Schema.EnergyPair energy_pairs = 4;
                    }
                    message ContinuousEffectOperation_ReduceEnergyToAttackThisTurnBySpecifyingNamesAndEnergyTypesUpdation {
                        Lettuce.BattleEngine.Schema.PlayerIdUpdation target = 1;
                        optional int32 applied_turn = 2;
                        repeated Lettuce.BattleEngine.Schema.CardNameRepeatedUpdation names = 3;
                        repeated Lettuce.BattleEngine.Schema.EnergyPairRepeatedUpdation energy_pairs = 4;
                    }
                    message ContinuousEffectOperation_ReduceRetreatCostEvolutionStageSpecified {
                        Lettuce.BattleEngine.Schema.PlayerId target = 1;
                        int32 reduce_cost = 2;
                        Lettuce.BattleEngine.Schema.EvolutionStage evolution_stage = 3;
                    }
                    message ContinuousEffectOperation_ReduceRetreatCostEvolutionStageSpecifiedUpdation {
                        Lettuce.BattleEngine.Schema.PlayerIdUpdation target = 1;
                        optional int32 reduce_cost = 2;
                        Lettuce.BattleEngine.Schema.EvolutionStageEnumUpdation evolution_stage = 3;
                    }
                    message ContinuousEffectOperation_ReduceRetreatCostThisTurn {
                        Lettuce.BattleEngine.Schema.PlayerId target = 1;
                        int32 reduce_cost = 2;
                        int32 applied_turn = 3;
                    }
                    message ContinuousEffectOperation_ReduceRetreatCostThisTurnUpdation {
                        Lettuce.BattleEngine.Schema.PlayerIdUpdation target = 1;
                        optional int32 reduce_cost = 2;
                        optional int32 applied_turn = 3;
                    }
                    message ContinuousEffectOperation_RetreatCostZeroBySpecifyingNames {
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                        repeated Lettuce.BattleEngine.Schema.CardName names = 2;
                    }
                    message ContinuousEffectOperation_RetreatCostZeroBySpecifyingNamesUpdation {
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 1;
                        repeated Lettuce.BattleEngine.Schema.CardNameRepeatedUpdation names = 2;
                    }
                    message ContinuousEffectOperation_RetreatCostZeroNameSpecified {
                        Lettuce.BattleEngine.Schema.PlayerId target = 1;
                        Lettuce.BattleEngine.Schema.CardName card_name = 2;
                    }
                    message ContinuousEffectOperation_RetreatCostZeroNameSpecifiedUpdation {
                        Lettuce.BattleEngine.Schema.PlayerIdUpdation target = 1;
                        Lettuce.BattleEngine.Schema.CardNameUpdation card_name = 2;
                    }
                    message ContinuousEffectOperation_RetreatCostZeroWhileEnergyAttached {
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 1;
                    }
                    message ContinuousEffectOperation_RetreatCostZeroWhileEnergyAttachedUpdation {
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 1;
                    }
                    message ContinuousEffectOperation_SelfDamageForKnockOut {
                        Lettuce.BattleEngine.Schema.DamageAmount damage = 1;
                        int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 3;
                        Lettuce.BattleEngine.Schema.BattleObjectId knocked_out_check_pokemon = 4;
                        Lettuce.BattleEngine.Schema.PokemonAttackId knocked_out_check_attack_id = 5;
                    }
                    message ContinuousEffectOperation_SelfDamageForKnockOutUpdation {
                        Lettuce.BattleEngine.Schema.DamageAmountUpdation damage = 1;
                        optional int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 3;
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation knocked_out_check_pokemon = 4;
                        Lettuce.BattleEngine.Schema.PokemonAttackIdUpdation knocked_out_check_attack_id = 5;
                    }
                    message ContinuousEffectOperation_SubAttackDamageNextTurnForPokemon {
                        Lettuce.BattleEngine.Schema.DamageAmount sub_amount = 1;
                        int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.BattleObjectId target = 3;
                    }
                    message ContinuousEffectOperation_SubAttackDamageNextTurnForPokemonUpdation {
                        Lettuce.BattleEngine.Schema.DamageAmountUpdation sub_amount = 1;
                        optional int32 applied_turn = 2;
                        Lettuce.BattleEngine.Schema.BattleObjectIdUpdation target = 3;
                    }
                }
            }
        }
        message Summary {
            message BattleLogs {
                enum SetPokemonType {
                    SET_POKEMON_TYPE_UNSPECIFIED = 0;
                    SET_POKEMON_TYPE_SWAP = 1;
                    SET_POKEMON_TYPE_PLAY = 2;
                }
                message BattleLog {
                    Lettuce.BattleEngine.Schema.PlayerId player_id = 1;
                    oneof log {
                        Lettuce.BattleEngine.Summary.BattleLogs.SetPokemonToActiveLog set_pokemon_to_active = 11;
                        Lettuce.BattleEngine.Summary.BattleLogs.SetPokemonToBenchLog set_pokemon_to_bench = 12;
                        Lettuce.BattleEngine.Summary.BattleLogs.AddCardToHandLog add_card_to_hand = 13;
                        Lettuce.BattleEngine.Summary.BattleLogs.ReturnFieldCardToHand return_field_card_to_hand = 14;
                        Lettuce.BattleEngine.Summary.BattleLogs.DiscardCardLog discard_card = 15;
                        Lettuce.BattleEngine.Summary.BattleLogs.PutCardToLibraryTopLog put_card_to_library_top = 16;
                        Lettuce.BattleEngine.Summary.BattleLogs.PutCardToLibraryBottomLog put_card_to_library_bottom = 17;
                        Lettuce.BattleEngine.Summary.BattleLogs.PutMultipleCardsToLibraryBottomLog put_multiple_cards_to_library_bottom = 18;
                        Lettuce.BattleEngine.Summary.BattleLogs.SwapPokemonLog swap_pokemon = 19;
                        Lettuce.BattleEngine.Summary.BattleLogs.EvolveLog evolve = 20;
                        Lettuce.BattleEngine.Summary.BattleLogs.KnockOutLog knock_out = 21;
                        Lettuce.BattleEngine.Summary.BattleLogs.ApplySpecialConditionLog apply_special_condition = 22;
                        Lettuce.BattleEngine.Summary.BattleLogs.RetreatLog retreat = 23;
                        Lettuce.BattleEngine.Summary.BattleLogs.ApplyDamageLog apply_damage = 24;
                        Lettuce.BattleEngine.Summary.BattleLogs.PreventDamageLog prevent_damage = 25;
                        Lettuce.BattleEngine.Summary.BattleLogs.PreventEffectLog prevent_effect = 26;
                        Lettuce.BattleEngine.Summary.BattleLogs.AttachEnergyLog attach_energy = 27;
                        Lettuce.BattleEngine.Summary.BattleLogs.ApplyContinuousEffectToPokemonLog apply_continuous_effect_to_pokemon = 28;
                        Lettuce.BattleEngine.Summary.BattleLogs.RecoverSpecialConditionLog recover_special_condition = 29;
                        Lettuce.BattleEngine.Summary.BattleLogs.DiscardAttachedEnergyLog discard_attached_energy = 30;
                        Lettuce.BattleEngine.Summary.BattleLogs.ExecuteAttackLog execute_attack = 31;
                        Lettuce.BattleEngine.Summary.BattleLogs.AttackFailedLog attack_failed = 32;
                        Lettuce.BattleEngine.Summary.BattleLogs.ActivateAbilityLog activate_ability = 33;
                        Lettuce.BattleEngine.Summary.BattleLogs.ApplyHealLog apply_heal = 34;
                        Lettuce.BattleEngine.Summary.BattleLogs.MoveEnergyLog move_energy = 35;
                        Lettuce.BattleEngine.Summary.BattleLogs.PlayTrainerLog play_trainer = 36;
                        Lettuce.BattleEngine.Summary.BattleLogs.DrawCardFromLibraryLog draw_card_from_library = 37;
                        Lettuce.BattleEngine.Summary.BattleLogs.DiscardLibraryCardLog discard_library_card = 38;
                        Lettuce.BattleEngine.Summary.BattleLogs.ShuffleLibraryLog shuffle_library = 39;
                        Lettuce.BattleEngine.Summary.BattleLogs.RevealLibraryTopLog reveal_library_top = 40;
                        Lettuce.BattleEngine.Summary.BattleLogs.PutCardFromHandIntoLibraryLog put_card_from_hand_into_library = 41;
                        Lettuce.BattleEngine.Summary.BattleLogs.RevealOpponentHandLog reveal_opponent_hand = 42;
                        Lettuce.BattleEngine.Summary.BattleLogs.AddPrizeLog add_prize = 43;
                        Lettuce.BattleEngine.Summary.BattleLogs.ConcedeLog concede = 44;
                        Lettuce.BattleEngine.Summary.BattleLogs.FlipCoinSingleLog flip_coin_single = 45;
                        Lettuce.BattleEngine.Summary.BattleLogs.FlipCoinMultipleLog flip_coin_multiple = 46;
                        Lettuce.BattleEngine.Summary.BattleLogs.DetermineTurnEndLog determine_turn_end = 47;
                        Lettuce.BattleEngine.Summary.BattleLogs.TurnStartLog turn_start = 48;
                        Lettuce.BattleEngine.Summary.BattleLogs.GameCompletedLog game_completed = 49;
                        Lettuce.BattleEngine.Summary.BattleLogs.PokemonCheckupLog pokemon_checkup = 50;
                        Lettuce.BattleEngine.Summary.BattleLogs.AttachPokemonToolLog attach_pokemon_tool = 51;
                        Lettuce.BattleEngine.Summary.BattleLogs.MoveDamageAllLog move_damage_all = 52;
                        Lettuce.BattleEngine.Summary.BattleLogs.ReduceCurrentHpLog reduce_current_hp = 53;
                        Lettuce.BattleEngine.Summary.BattleLogs.DiscardEnergyLog discard_energy = 54;
                        Lettuce.BattleEngine.Summary.BattleLogs.ChangeNextEnergyTypeLog change_next_energy_type = 55;
                        Lettuce.BattleEngine.Summary.BattleLogs.PutMultipleCardsToLibraryTopLog put_multiple_cards_to_library_top = 56;
                        Lettuce.BattleEngine.Summary.BattleLogs.ApplyContinuousEffectToPlayerLog apply_continuous_effect_to_player = 60;
                        Lettuce.BattleEngine.Summary.BattleLogs.ActivatePokemonToolLog activate_pokemon_tool = 61;
                    }
                }
                message CollectedBattleLogs {
                    repeated Lettuce.BattleEngine.Summary.BattleLogs.BattleLog logs = 1;
                    uint32 game_progress_id = 2;
                }
                message SetPokemonToActiveLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                    Lettuce.BattleEngine.Summary.BattleLogs.SetPokemonType set_type = 2;
                }
                message SetPokemonToBenchLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                    Lettuce.BattleEngine.Summary.BattleLogs.SetPokemonType set_type = 2;
                }
                message AddCardToHandLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                }
                message ReturnFieldCardToHand {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                }
                message DiscardCardLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                }
                message PutCardToLibraryTopLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                }
                message PutCardToLibraryBottomLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                }
                message PutMultipleCardsToLibraryBottomLog {
                    int32 count = 1;
                }
                message SwapPokemonLog {
                    Lettuce.BattleEngine.Schema.OriginCard from = 1;
                    Lettuce.BattleEngine.Schema.OriginCard to = 2;
                }
                message EvolveLog {
                    Lettuce.BattleEngine.Schema.OriginCard from = 1;
                    Lettuce.BattleEngine.Schema.OriginCard to = 2;
                    bool is_active_pokemon = 3;
                }
                message KnockOutLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                    Lettuce.BattleEngine.Schema.EnergyType knocked_out_by_attack_type = 2;
                    bool is_active_pokemon_knocked_out = 3;
                    Lettuce.BattleEngine.Schema.Card knocked_out_by_card = 4;
                }
                message ApplySpecialConditionLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                    Lettuce.BattleEngine.Schema.SpecialConditionType special_condition = 2;
                    bool is_same_type_applied = 3;
                }
                message RetreatLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                }
                message ApplyDamageLog {
                    Lettuce.BattleEngine.Schema.Card card = 1;
                    int32 applied_damage = 2;
                    int32 total_damage = 3;
                    int32 max_hp = 4;
                    bool is_weakness = 5;
                    int32 total_applied_damage_to_opponent_at_once = 6;
                    bool is_attack_damage = 7;
                    Lettuce.BattleEngine.Schema.Card applier_card = 8;
                    bool is_resisted = 9;
                }
                message PreventDamageLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                }
                message PreventEffectLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                }
                message AttachEnergyLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                    Lettuce.BattleEngine.Schema.EnergySet energies = 2;
                }
                message ApplyContinuousEffectToPokemonLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                    Lettuce.BattleEngine.Schema.OriginCard cause_card = 2;
                }
                message ApplyContinuousEffectToPlayerLog {
                }
                message RecoverSpecialConditionLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                    Lettuce.BattleEngine.Schema.SpecialConditionType special_condition = 2;
                }
                message DiscardAttachedEnergyLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                    Lettuce.BattleEngine.Schema.EnergySet energies = 2;
                }
                message ExecuteAttackLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                    Lettuce.BattleEngine.Schema.PokemonAttackId attack_id = 2;
                }
                message AttackFailedLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                    Lettuce.BattleEngine.Schema.PokemonAttackId attack_id = 2;
                }
                message ActivateAbilityLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                    Lettuce.BattleEngine.Schema.PokemonAbilityId ability_id = 2;
                }
                message ApplyHealLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                    int32 applied_heal = 2;
                    int32 total_damage = 3;
                    int32 max_hp = 4;
                }
                message MoveEnergyLog {
                    Lettuce.BattleEngine.Schema.OriginCard from = 1;
                    Lettuce.BattleEngine.Schema.OriginCard to = 2;
                    Lettuce.BattleEngine.Schema.EnergySet energies = 3;
                }
                message PlayTrainerLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                }
                message DrawCardFromLibraryLog {
                    int32 draw_count = 1;
                }
                message DiscardLibraryCardLog {
                    int32 discard_count = 1;
                }
                message ShuffleLibraryLog {
                }
                message RevealLibraryTopLog {
                    int32 revealed_count = 1;
                    bool is_self = 2;
                }
                message PutCardFromHandIntoLibraryLog {
                    int32 put_count = 1;
                }
                message RevealOpponentHandLog {
                }
                message AddPrizeLog {
                    Lettuce.BattleEngine.Schema.PrizeAmount prize = 1;
                    Lettuce.BattleEngine.Schema.PrizeAmount total_prize = 2;
                }
                message ConcedeLog {
                }
                message FlipCoinSingleLog {
                    Lettuce.BattleEngine.Schema.FlipCoinResultType result = 1;
                }
                message FlipCoinMultipleLog {
                    repeated Lettuce.BattleEngine.Schema.FlipCoinResultType results = 1;
                }
                message DetermineTurnEndLog {
                }
                message AttachPokemonToolLog {
                    Lettuce.BattleEngine.Schema.OriginCard target = 1;
                    Lettuce.BattleEngine.Schema.OriginCard tool = 2;
                }
                message MoveDamageAllLog {
                    Lettuce.BattleEngine.Schema.Card from_card = 1;
                    Lettuce.BattleEngine.Schema.Card to_card = 2;
                    int32 damage = 3;
                    int32 from_max_hp = 4;
                    int32 to_total_damage = 5;
                    int32 to_max_hp = 6;
                }
                message ReduceCurrentHpLog {
                    Lettuce.BattleEngine.Schema.OriginCard card = 1;
                    int32 reduce_hp = 2;
                    int32 max_hp = 3;
                    int32 total_damage = 4;
                }
                message PutMultipleCardsToLibraryTopLog {
                    int32 count = 1;
                }
                message TurnStartLog {
                }
                message PokemonCheckupLog {
                }
                message GameCompletedLog {
                    int32 turn_number = 1;
                    Lettuce.BattleEngine.Schema.PlayerId winner_player = 2;
                    Lettuce.BattleEngine.Schema.PrizeAmount player1_prize = 3;
                    Lettuce.BattleEngine.Schema.PrizeAmount player2_prize = 4;
                }
                message DiscardEnergyLog {
                    Lettuce.BattleEngine.Schema.EnergySet energies = 1;
                }
                message ChangeNextEnergyTypeLog {
                    Lettuce.BattleEngine.Schema.EnergyType before_energy_type = 1;
                    Lettuce.BattleEngine.Schema.EnergyType after_energy_type = 2;
                }
                message ActivatePokemonToolLog {
                    Lettuce.BattleEngine.Schema.OriginCard tool = 1;
                }
            }
        }
    }
    message BattleServer {
        message Schema {
            message RemainingTime {
                Google.Protobuf.WellKnownTypes.Duration player1_total = 1;
                Google.Protobuf.WellKnownTypes.Duration player1_action = 2;
                Google.Protobuf.WellKnownTypes.Duration player2_total = 3;
                Google.Protobuf.WellKnownTypes.Duration player2_action = 4;
            }
            message ClientMessage {
                message Login {
                    message Join {
                        string jwt = 1;
                    }
                    message DebugJoin {
                        string token = 1;
                        string jwt = 7;
                        string battle_id = 2;
                        Lettuce.BattleEngine.Schema.OriginPlayer origin_player = 3;
                        string opponent_app_player_id = 4;
                        string pvp_battle_rule_id = 5;
                        Lettuce.BattleEngine.Schema.Regulation regulation = 6;
                        bool use_full_game_data = 8;
                        uint32 timer_participation_ms = 9;
                        uint32 timer_ready_ms = 10;
                        uint32 timer_battle_preparation_ms = 11;
                        uint32 timer_total_battle_ms = 12;
                        uint32 timer_turn_player_action_ms = 13;
                        uint32 timer_non_turn_player_action_ms = 14;
                        uint32 timer_action_buffer_ms = 15;
                        uint32 timer_resume_ms = 16;
                    }
                    message Resume {
                        string token = 1;
                        uint32 last_game_progress_id = 2;
                    }
                    Lettuce.BattleServer.Schema.ClientMessage.Login.Join join = 1;
                    Lettuce.BattleServer.Schema.ClientMessage.Login.DebugJoin debug_join = 2;
                    Lettuce.BattleServer.Schema.ClientMessage.Login.Resume resume = 3;
                }
                message Ready {
                }
                message DoAction {
                    repeated Lettuce.BattleEngine.Schema.Action actions = 1;
                    int32 action_requirement_id = 2;
                }
                oneof data {
                    Lettuce.BattleServer.Schema.ClientMessage.Login login = 1;
                    Lettuce.BattleServer.Schema.ClientMessage.Ready ready = 2;
                    Lettuce.BattleServer.Schema.ClientMessage.DoAction do_action = 3;
                }
            }
            message ServerMessage {
                message LoginResult {
                    enum StatusCode {
                        OK = 0;
                        ALREADY_JOINED = 1;
                        INVALIDATED_BATTLE = 2;
                    }
                    Lettuce.BattleServer.Schema.ServerMessage.LoginResult.StatusCode status_code = 1;
                    string resume_token = 2;
                }
                message InitialData {
                    message Debug {
                        Lettuce.BattleEngine.Schema.Game game = 1;
                    }
                    Lettuce.BattleEngine.Schema.HiddenGame hidden_game = 1;
                    Lettuce.BattleEngine.Schema.NextActionInfo next_action_info = 2;
                    repeated Lettuce.BattleEngine.Schema.GameProgress game_progresses = 3;
                    Lettuce.BattleServer.Schema.RemainingTime remaining_time = 4;
                    repeated Lettuce.BattleEngine.Summary.BattleLogs.BattleLog battle_logs = 5;
                    uint32 last_game_progress_id = 6;
                    Lettuce.BattleServer.Schema.ServerMessage.InitialData.Debug debug = 7;
                }
                message GameStart {
                    Lettuce.BattleServer.Schema.RemainingTime remaining_time = 4;
                }
                message ActionResult {
                    enum StatusCode {
                        OK = 0;
                        INVALID = 1;
                    }
                    Lettuce.BattleServer.Schema.ServerMessage.ActionResult.StatusCode status_code = 1;
                }
                message GameProgress {
                    message Debug {
                        repeated Lettuce.BattleEngine.Schema.Action actions = 1;
                    }
                    Lettuce.BattleEngine.Schema.NextActionInfo next_action_info = 1;
                    repeated Lettuce.BattleEngine.Schema.GameProgress game_progresses = 2;
                    Lettuce.BattleServer.Schema.RemainingTime remaining_time = 3;
                    uint32 last_game_progress_id = 4;
                    Lettuce.BattleServer.Schema.ServerMessage.GameProgress.Debug debug = 5;
                }
                message BattleResult {
                    string battle_report = 1;
                    Lettuce.BattleEngine.Schema.GameRecord game_record = 2;
                    string winner_app_player_id = 3;
                }
                message Disconnected {
                    Lettuce.BattleEngine.Schema.PlayerId battle_player_id = 1;
                }
                message Reconnected {
                    Lettuce.BattleEngine.Schema.PlayerId battle_player_id = 1;
                }
                oneof data {
                    Lettuce.BattleServer.Schema.ServerMessage.LoginResult login_result = 1;
                    Lettuce.BattleServer.Schema.ServerMessage.InitialData initial_data = 2;
                    Lettuce.BattleServer.Schema.ServerMessage.GameStart game_start = 3;
                    Lettuce.BattleServer.Schema.ServerMessage.ActionResult action_result = 4;
                    Lettuce.BattleServer.Schema.ServerMessage.GameProgress game_progress = 5;
                    Lettuce.BattleServer.Schema.ServerMessage.BattleResult battle_result = 6;
                    Lettuce.BattleServer.Schema.ServerMessage.Disconnected disconnected = 7;
                    Lettuce.BattleServer.Schema.ServerMessage.Reconnected reconnected = 8;
                }
            }
        }
    }
    message Battle {
        enum BattleDeckEnergyType {
            BATTLE_DECK_ENERGY_TYPE_UNSPECIFIED = 0;
            BATTLE_DECK_ENERGY_TYPE_COLORLESS = 1;
            BATTLE_DECK_ENERGY_TYPE_GRASS = 2;
            BATTLE_DECK_ENERGY_TYPE_FIRE = 3;
            BATTLE_DECK_ENERGY_TYPE_WATER = 4;
            BATTLE_DECK_ENERGY_TYPE_LIGHTNING = 5;
            BATTLE_DECK_ENERGY_TYPE_PSYCHIC = 6;
            BATTLE_DECK_ENERGY_TYPE_FIGHTING = 7;
            BATTLE_DECK_ENERGY_TYPE_DARKNESS = 8;
            BATTLE_DECK_ENERGY_TYPE_METAL = 9;
        }
        message BattleSetupData {
            string battle_id = 1;
            Lettuce.Battle.BattlePlayer player = 2;
            string pvp_battle_rule_id = 3;
            string opponent_app_player_id = 4;
        }
        message BattlePlayer {
            string app_player_id = 1;
            string name = 2;
            Lettuce.Battle.BattleDeck deck = 3;
        }
        message BattleDeck {
            repeated Lettuce.Battle.BattleCard cards = 1;
            repeated Lettuce.Battle.BattleDeckEnergyType energy_types = 2;
            string play_mat_id = 3;
            string deck_shield_id = 4;
            string coin_skin_id = 5;
        }
        message BattleCard {
            string card_id = 1;
            string card_skin_id = 2;
        }
    }
}
message Takasho {
    message Schema {
        message LettuceDebugServer {
            message Debug {
                message AssetServiceGetSignedCookie {
                    message Request {
                    }
                    message Response {
                        string signed_cookie = 1;
                        Google.Protobuf.WellKnownTypes.Timestamp expire_at = 2;
                        string prefix = 3;
                    }
                }
                message AssetServiceGetVersions {
                    enum Platform {
                        PLATFORM_UNSPECIFIED = 0;
                        PLATFORM_IOS = 1;
                        PLATFORM_ANDROID = 2;
                    }
                    message Master {
                        string master_version = 1;
                        string oyakata_revision = 2;
                        string master_memory_aladdin_hash = 3;
                        string comment = 4;
                        Google.Protobuf.WellKnownTypes.Timestamp updated_at = 5;
                    }
                    message Asset {
                        string aladdin_hash = 1;
                        Takasho.Schema.LettuceDebugServer.Debug.AssetServiceGetVersions.Platform platform = 2;
                        string upload_username = 3;
                        string comment = 4;
                        Google.Protobuf.WellKnownTypes.Timestamp updated_at = 5;
                    }
                    message AssetByPlatform {
                        Takasho.Schema.LettuceDebugServer.Debug.AssetServiceGetVersions.Platform platform = 1;
                        repeated Takasho.Schema.LettuceDebugServer.Debug.AssetServiceGetVersions.Asset assets = 2;
                    }
                    message ActiveMasterAndAsset {
                        string client_version = 1;
                        string master_version = 2;
                        string master_memory_aladdin_hash = 3;
                        string asset_aladdin_hash = 4;
                    }
                    message ActiveMasterAndAssetByPlatform {
                        Takasho.Schema.LettuceDebugServer.Debug.AssetServiceGetVersions.Platform platform = 1;
                        repeated Takasho.Schema.LettuceDebugServer.Debug.AssetServiceGetVersions.ActiveMasterAndAsset active_master_and_assets = 2;
                    }
                    message Request {
                        int32 num_of_items = 1;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceDebugServer.Debug.AssetServiceGetVersions.Master master_versions = 1;
                        repeated Takasho.Schema.LettuceDebugServer.Debug.AssetServiceGetVersions.AssetByPlatform assets = 2;
                        repeated Takasho.Schema.LettuceDebugServer.Debug.AssetServiceGetVersions.ActiveMasterAndAssetByPlatform active_master_and_assets = 3;
                    }
                }
                message DebugStorageSetEntriesV1 {
                    message Request {
                        repeated Takasho.Schema.LettuceDebugServer.Debug.Entry entries = 1;
                        string next_revision = 2;
                        string previous_revision = 3;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceDebugServer.Debug.Entry entries = 1;
                        string revision = 2;
                    }
                }
                message DebugStorageGetEntriesV1 {
                    message Request {
                        repeated Takasho.Schema.LettuceDebugServer.Debug.Criterion criteria = 1;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceDebugServer.Debug.Entry entries = 1;
                        string revision = 2;
                    }
                }
                message Entry {
                    string key = 1;
                    bytes value = 2;
                    Google.Protobuf.WellKnownTypes.Timestamp created_at = 3;
                    Google.Protobuf.WellKnownTypes.Timestamp updated_at = 4;
                }
                message Criterion {
                    enum MatchingType {
                        MATCHING_TYPE_UNSPECIFIED = 0;
                        MATCHING_TYPE_EXACT = 1;
                        MATCHING_TYPE_FORWARD = 2;
                    }
                    string key = 1;
                    Takasho.Schema.LettuceDebugServer.Debug.Criterion.MatchingType matching_type = 2;
                }
                message GMToolLogEmit {
                    message Request {
                        enum GMToolLogType {
                            GMTOOLLOGTYPE_UNSPECIFIED = 0;
                            GMTOOLLOGTYPE_BRIGHT_SAND_ACQUIRED = 1;
                            GMTOOLLOGTYPE_BRIGHT_SAND_CONSUMED = 2;
                        }
                        string player_id = 1;
                        Takasho.Schema.LettuceDebugServer.Debug.GMToolLogEmit.Request.GMToolLogType type = 2;
                        string value = 3;
                    }
                    message Response {
                    }
                }
                message PlayerCreate {
                    message Request {
                        repeated string player_ids = 1;
                    }
                    message Response {
                        repeated string player_ids = 1;
                    }
                }
                message PlayerDelete {
                    message Request {
                        repeated string player_ids = 1;
                    }
                    message Response {
                        repeated string player_ids = 1;
                    }
                }
                message PlayerSetLastLoggedIn {
                    message Request {
                        message LastLoggedInInfo {
                            string player_id = 1;
                            string last_logged_in = 2;
                        }
                        repeated Takasho.Schema.LettuceDebugServer.Debug.PlayerSetLastLoggedIn.Request.LastLoggedInInfo last_logged_in_infos = 1;
                    }
                    message Response {
                    }
                }
                message PlayerGetLastLoggedIn {
                    message Request {
                        repeated string player_ids = 1;
                    }
                    message Response {
                        message LastLoggedInInfo {
                            string player_id = 1;
                            Google.Protobuf.WellKnownTypes.Timestamp last_logged_in = 2;
                        }
                        repeated Takasho.Schema.LettuceDebugServer.Debug.PlayerGetLastLoggedIn.Response.LastLoggedInInfo last_logged_in_infos = 1;
                    }
                }
                message PlayerSetAvailable {
                    message Request {
                        message SetAvailableInfo {
                            string player_id = 1;
                            Takasho.Schema.LettuceServer.Resource.PlayerProfile.AvailableTypeForDebug available_type = 2;
                        }
                        repeated Takasho.Schema.LettuceDebugServer.Debug.PlayerSetAvailable.Request.SetAvailableInfo set_available_infos = 1;
                    }
                    message Response {
                    }
                }
                message PlayerSetBaasUserDebugSetting {
                    message PokeGoldPurchaseEvent {
                        Google.Protobuf.WellKnownTypes.Timestamp purchased_at = 2;
                    }
                    message Request {
                        string master_version = 1;
                        Takasho.Schema.LettuceDebugServer.Debug.PlayerSetBaasUserDebugSetting.PokeGoldPurchaseEvent poke_gold_purchase_event = 2;
                    }
                    message Response {
                        string baas_user_id = 1;
                        string master_version = 2;
                        Takasho.Schema.LettuceDebugServer.Debug.PlayerSetBaasUserDebugSetting.PokeGoldPurchaseEvent poke_gold_purchase_event = 3;
                    }
                }
                message PlayerDeleteBaasUserDebugSetting {
                    message Request {
                    }
                    message Response {
                    }
                }
                message PlayerSetPlayerSetting {
                    message Request {
                        message PlayerSetting {
                            string player_id = 1;
                            Takasho.Schema.LettuceServer.Resource.Language.Language language_type = 2;
                            Takasho.Schema.LettuceServer.Resource.PlayerSettings.AgreementType third_party_data_provision = 3;
                            string third_party_data_provision_version = 4;
                            string privacy_policy_version = 5;
                            string terms_of_service_version = 6;
                            string country_region_code = 7;
                            int64 year_num_of_birth = 8;
                            int64 month_num_of_birth = 9;
                            bool use_of_data_in_game_announcements = 10;
                            bool use_of_last_login_time = 11;
                        }
                        repeated Takasho.Schema.LettuceDebugServer.Debug.PlayerSetPlayerSetting.Request.PlayerSetting player_settings = 1;
                    }
                    message Response {
                    }
                }
                message PlayerAdjustmentTimestamp {
                    message Request {
                        bool enabled = 1;
                        Google.Protobuf.WellKnownTypes.Timestamp timestamp = 2;
                    }
                    message Response {
                    }
                }
                message PlayerAdjustmentRelativeTimestamp {
                    message Request {
                        bool enabled = 1;
                        int64 offset_sec = 2;
                    }
                    message Response {
                    }
                }
                message CardStockGet {
                    message Request {
                        repeated string player_ids = 1;
                    }
                    message Response {
                        message PlayerCardStock {
                            string player_id = 1;
                            repeated Takasho.Schema.LettuceServer.Resource.Card.CardStock card_stocks = 2;
                        }
                        repeated Takasho.Schema.LettuceDebugServer.Debug.CardStockGet.Response.PlayerCardStock player_card_stocks = 1;
                    }
                }
                message CardStockAdd {
                    message Request {
                        string player_id = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.CardInstance cards = 2;
                        bool omit_sand = 3;
                        int64 duplication = 4;
                    }
                    message Response {
                        string player_id = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Card.CardStock card_stocks = 2;
                    }
                }
                message CardStockPut {
                    message Request {
                        string player_id = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Card.CardStock card_stocks = 2;
                    }
                    message Response {
                        string player_id = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Card.CardStock card_stocks = 2;
                    }
                }
                message CardStockDelete {
                    message Request {
                        string player_id = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.CardInstance cards = 2;
                    }
                    message Response {
                        string player_id = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Card.CardStock card_stocks = 2;
                    }
                }
                message FeedEnableTimelineRenewal {
                    message Request {
                    }
                    message Response {
                    }
                }
                message FeedRenewTimelineWithOptions {
                    message Request {
                        int64 lucky_feed_probability_permill = 1;
                        int64 free_feed_probability_permill = 2;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Feed.FeedTimeline timeline = 1;
                        Takasho.Schema.LettuceServer.Resource.Feed.ChallengePower challenge_power = 2;
                    }
                }
                message FeedChallengeWithOptions {
                    message Request {
                        Takasho.Schema.LettuceServer.Resource.Feed.FeedType feed_type = 1;
                        string feed_id = 2;
                        int64 challenge_num = 3;
                        Takasho.Schema.LettuceServer.Resource.Feed.FeedRevivalItems revival_items = 4;
                        int64 element_index = 5;
                    }
                    message Response {
                    }
                }
                message FeedAddPower {
                    message Request {
                        int64 heal_min = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Feed.ChallengePower challenge_power = 1;
                    }
                }
                message FeedDeleteSharedPacks {
                    message Request {
                        int64 from = 1;
                        int64 to = 2;
                    }
                    message Response {
                        int64 num_deleted = 1;
                        int64 num_remaining = 2;
                    }
                }
                message PackPowerAdd {
                    message Request {
                        int64 heal_min = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Pack.PackPower pack_power = 1;
                    }
                }
                message MissionAddAction {
                    message Request {
                        message Action {
                            Takasho.Schema.LettuceServer.Resource.Action.ActionState.ActionKey key = 1;
                            string action_target = 2;
                            int64 count = 3;
                        }
                        repeated Takasho.Schema.LettuceDebugServer.Debug.MissionAddAction.Request.Action actions = 1;
                        Takasho.Schema.LettuceServer.Resource.Date.Date date = 2;
                    }
                    message Response {
                    }
                }
                message MissionUndoClear {
                    message Request {
                        repeated string mission_ids = 1;
                    }
                    message Response {
                    }
                }
                message FriendAdd {
                    message Request {
                        string player_id = 1;
                        repeated string add_player_ids = 2;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.Friend friends = 1;
                    }
                }
                message FriendAddExisting {
                    message Request {
                        string player_id = 1;
                        int64 add_friend_num = 2;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.Friend friends = 1;
                    }
                }
                message FriendSendRequests {
                    message Request {
                        string player_id = 1;
                        repeated string target_player_ids = 2;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.Friend friends = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.FriendRequest sent_friend_requests = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.FriendRequest received_friend_requests = 3;
                    }
                }
                message FriendApproveRequests {
                    message Request {
                        string player_id = 1;
                        repeated string target_player_ids = 2;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.Friend friends = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.FriendRequest received_friend_requests = 2;
                    }
                }
                message FriendCancelRequests {
                    message Request {
                        string player_id = 1;
                        repeated string target_player_ids = 2;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.Friend friends = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.FriendRequest sent_friend_requests = 2;
                    }
                }
                message FriendRejectRequests {
                    message Request {
                        string player_id = 1;
                        repeated string target_player_ids = 2;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.Friend friends = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.FriendRequest received_friend_requests = 2;
                    }
                }
                message ItemShopAddPurchaseSummaries {
                    message Request {
                        message PurchaseSummary {
                            string product_id = 1;
                            int64 purchase_amount = 2;
                            int64 next_reset_at = 3;
                            int64 last_purchased_at = 4;
                        }
                        string shop_id = 1;
                        repeated Takasho.Schema.LettuceDebugServer.Debug.ItemShopAddPurchaseSummaries.Request.PurchaseSummary purchase_summaries = 2;
                    }
                    message Response {
                    }
                }
                message ItemShopDeletePurchaseSummaries {
                    message Request {
                        string shop_id = 1;
                        repeated string product_ids = 2;
                    }
                    message Response {
                    }
                }
                message ItemAdd {
                    message Request {
                        Takasho.Schema.LettuceServer.Resource.Item.InventoryItems items = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Item.InventoryItems accepted_items = 1;
                        Takasho.Schema.LettuceServer.Resource.PlayerResources.PlayerResources last_inventory_items = 2;
                    }
                }
                message ItemAddToPlayers {
                    message Request {
                        repeated string player_ids = 1;
                        Takasho.Schema.LettuceServer.Resource.Item.InventoryItems items = 2;
                    }
                    message Response {
                        repeated string successful_player_ids = 1;
                        repeated string failed_player_ids = 2;
                    }
                }
                message PokeGoldShopAddPurchaseSummaries {
                    message Request {
                        message PurchaseSummary {
                            string product_id = 1;
                            int64 purchase_amount = 2;
                            int64 next_reset_at = 3;
                            int64 last_purchased_at = 4;
                        }
                        repeated Takasho.Schema.LettuceDebugServer.Debug.PokeGoldShopAddPurchaseSummaries.Request.PurchaseSummary purchase_summaries = 1;
                    }
                    message Response {
                    }
                }
                message PokeGoldShopDeletePurchaseSummaries {
                    message Request {
                        repeated string product_ids = 1;
                    }
                    message Response {
                    }
                }
                message CardExchangeSetRouteTypeV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.Resource.CardExchange.PlayerCardExchangeRouteType route_type = 1;
                    }
                    message Response {
                    }
                }
                message TrophySet {
                    message Request {
                        message Achievement {
                            Takasho.Schema.LettuceServer.Resource.Trophy.Trophy trophy = 1;
                            string player_id = 2;
                        }
                        repeated Takasho.Schema.LettuceDebugServer.Debug.TrophySet.Request.Achievement achievements = 1;
                    }
                    message Response {
                    }
                }
                message MyCollectionAddCollection {
                    message Request {
                        string player_id = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Album.Album albums = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.Mount.Mount mounts = 3;
                    }
                    message Response {
                    }
                }
                message MyCollectionSetLikeCount {
                    message Request {
                        message MyCollectionLike {
                            string player_id = 1;
                            int64 like_count = 2;
                        }
                        repeated Takasho.Schema.LettuceDebugServer.Debug.MyCollectionSetLikeCount.Request.MyCollectionLike my_collection_likes = 1;
                    }
                    message Response {
                    }
                }
                message ProfileSetProfiles {
                    message Request {
                        message Profile {
                            string player_id = 1;
                            string nickname = 2;
                            string icon_id = 3;
                            repeated string emblem_ids = 4;
                            string message_id = 5;
                            Takasho.Schema.LettuceServer.Resource.Collection.MyBestCollection my_best = 6;
                        }
                        repeated Takasho.Schema.LettuceDebugServer.Debug.ProfileSetProfiles.Request.Profile profiles = 1;
                    }
                    message Response {
                    }
                }
                message ProfileResetNicknameChangedAt {
                    message Request {
                        repeated string player_ids = 1;
                    }
                    message Response {
                    }
                }
                message PresentCreate {
                    message Request {
                        string player_id = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Present.PresentItem presents = 2;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Present.PresentItem presents = 1;
                    }
                }
                message SoloBattleAddEventPower {
                    message Request {
                        string event_id = 1;
                        int64 heal_min = 2;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleEventPower event_power = 1;
                    }
                }
                message WebviewSetLastViewed {
                    message Request {
                        Google.Protobuf.WellKnownTypes.Timestamp last_viewed = 1;
                    }
                    message Response {
                        Google.Protobuf.WellKnownTypes.Timestamp last_viewed = 1;
                    }
                }
                message TutorialSetTutorialStep {
                    message Request {
                        message Step {
                            string player_id = 1;
                            string tutorial_id = 2;
                            int64 step_ = 3;
                        }
                        repeated Takasho.Schema.LettuceDebugServer.Debug.TutorialSetTutorialStep.Request.Step steps = 1;
                    }
                    message Response {
                    }
                }
                message PvpCasualSetProfiles {
                    message Request {
                        message Profile {
                            string player_id = 1;
                            int64 total_acquired_point = 2;
                            int64 total_battle_count = 3;
                            int64 total_win_count = 4;
                            int64 total_lose_count = 5;
                            int64 max_damage = 6;
                            int64 max_winning_streak = 7;
                            int64 current_winning_streak = 8;
                        }
                        repeated Takasho.Schema.LettuceDebugServer.Debug.PvpCasualSetProfiles.Request.Profile profiles = 1;
                    }
                    message Response {
                    }
                }
                message PvpCasualSetProfileUpdateMode {
                    message Request {
                        string player_id = 1;
                        bool enabled = 2;
                    }
                    message Response {
                    }
                }
                message PvpCasualGetProfile {
                    message Request {
                        string player_id = 1;
                    }
                    message Response {
                        string player_id = 1;
                        int64 total_acquired_point = 2;
                        int64 total_battle_count = 3;
                        int64 total_win_count = 4;
                        int64 total_lose_count = 5;
                        int64 max_damage = 6;
                        int64 max_winning_streak = 7;
                        int64 current_winning_streak = 8;
                    }
                }
                message PvpEventSetProfiles {
                    message Request {
                        message Profile {
                            string player_id = 1;
                            string event_id = 2;
                            Takasho.Schema.LettuceServer.Resource.Pvp.EmblemStep emblem_step = 3;
                            int64 total_acquired_point = 4;
                            int64 total_battle_count = 5;
                            int64 total_win_count = 6;
                            int64 total_lose_count = 7;
                            int64 max_damage = 8;
                            int64 max_winning_streak = 9;
                            int64 current_winning_streak = 10;
                        }
                        repeated Takasho.Schema.LettuceDebugServer.Debug.PvpEventSetProfiles.Request.Profile profiles = 1;
                    }
                    message Response {
                    }
                }
                message PassPurchaseMock {
                    message Request {
                        string product_id = 1;
                    }
                    message Response {
                        string product_id = 1;
                        Google.Protobuf.WellKnownTypes.Timestamp purchased_at = 2;
                    }
                }
                message PassUnlinkMarket {
                    message Request {
                        repeated Takasho.Schema.LettuceServer.Resource.Store.Market markets = 1;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Store.Market markets = 1;
                        Google.Protobuf.WellKnownTypes.Timestamp unlinked_at = 2;
                    }
                }
                message TradeSetPower {
                    message Request {
                        int64 amount = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Trade.TradePower trade_power = 1;
                    }
                }
                message TradeCreateTradeHistories {
                    message Request {
                        repeated Takasho.Schema.LettuceDebugServer.Debug.DebugTradeHistory trade_histories = 1;
                    }
                    message Response {
                    }
                }
                message DebugTradeHistory {
                    string trade_session_id = 1;
                    string partner_player_id = 2;
                    Takasho.Schema.LettuceServer.Resource.Item.CardInstance my_submission = 3;
                    Takasho.Schema.LettuceServer.Resource.Item.CardInstance partner_submission = 4;
                    Google.Protobuf.WellKnownTypes.Timestamp completed_at = 5;
                    int64 my_submission_card_last_amount = 6;
                    int64 partner_submission_card_last_amount = 7;
                }
                message PassDetectFreeTrialViolation {
                    message Request {
                        message Violation {
                            string player_id = 1;
                            int64 free_trial_count = 2;
                        }
                        repeated Takasho.Schema.LettuceDebugServer.Debug.PassDetectFreeTrialViolation.Request.Violation violations = 1;
                    }
                    message Response {
                        message Violation {
                            string player_id = 1;
                            string pass_id = 2;
                            int64 free_trial_count = 3;
                            Google.Protobuf.WellKnownTypes.Timestamp detected_at = 4;
                        }
                        repeated Takasho.Schema.LettuceDebugServer.Debug.PassDetectFreeTrialViolation.Response.Violation violations = 1;
                    }
                }
                message PassResetFreeTrialViolation {
                    message Request {
                    }
                    message Response {
                        Google.Protobuf.WellKnownTypes.Timestamp deleted_at = 4;
                    }
                }
            }
        }
        message LettuceServer {
            message PlayerApi {
                message AlbumSpine {
                    uint64 album_id = 1;
                    string cover_id = 2;
                    Takasho.Schema.LettuceServer.Resource.Album.Album.BackgroundColor background_color = 3;
                    uint64 card_num = 5;
                    Takasho.Schema.LettuceServer.Resource.Album.PublicSetting public_setting = 6;
                    uint64 display_order = 7;
                    repeated Takasho.Schema.LettuceServer.Resource.Album.AlbumSlot slots = 9;
                    string file_name = 10;
                    repeated string hash_tag_ids = 11;
                }
                message AlbumListV1 {
                    message Request {
                    }
                    message Response {
                        uint64 album_limit_num = 1;
                        repeated Takasho.Schema.LettuceServer.PlayerApi.AlbumSpine albums = 2;
                        uint64 like_count = 3;
                    }
                }
                message AlbumChangeOrderV1 {
                    message Request {
                        message Order {
                            uint64 album_id = 1;
                            uint64 order_ = 2;
                        }
                        repeated Takasho.Schema.LettuceServer.PlayerApi.AlbumChangeOrderV1.Request.Order orders = 1;
                    }
                    message Response {
                    }
                }
                message AlbumGetDetailV1 {
                    message Request {
                        uint64 album_id = 1;
                    }
                    message Response {
                        uint64 card_limit_num = 1;
                        Takasho.Schema.LettuceServer.Resource.Album.Album album = 3;
                    }
                }
                message AlbumSetV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.Resource.Album.Album album = 1;
                    }
                    message Response {
                    }
                }
                message AlbumDeleteV1 {
                    message Request {
                        uint64 album_id = 1;
                    }
                    message Response {
                    }
                }
                message AlbumGetOtherDetailV1 {
                    message Request {
                        uint64 album_id = 1;
                        string other_player_id = 2;
                    }
                    message Response {
                        uint64 card_limit_num = 1;
                        Takasho.Schema.LettuceServer.Resource.Album.Album album = 2;
                    }
                }
                message CollectionGetSomeonesV1 {
                    message Request {
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Collection.SomeoneCollectionPlayerInfo popular_collection_player_infos = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Collection.SomeoneCollectionPlayerInfo random_collection_player_infos = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.Collection.SomeoneCollectionPlayerInfo friend_collection_player_infos = 3;
                        bool server_unavailable = 4;
                    }
                }
                message CollectionListV1 {
                    message Request {
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.PlayerApi.AlbumSpine albums = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Mount.Mount mounts = 2;
                        Takasho.Schema.LettuceServer.Resource.Collection.MyBestCollection my_best = 3;
                    }
                }
                message CollectionOtherListV1 {
                    message Request {
                        string player_id = 1;
                        string friend_id = 2;
                    }
                    message Response {
                        uint64 like_count = 1;
                        repeated Takasho.Schema.LettuceServer.PlayerApi.AlbumSpine albums = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.Mount.Mount mounts = 3;
                        Takasho.Schema.LettuceServer.Resource.PlayerProfile.ProfileSpine profile = 5;
                        Google.Protobuf.WellKnownTypes.Timestamp like_history_expired_at = 6;
                    }
                }
                message CollectionSetMyBestV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.Resource.Collection.MyBestCollection my_best = 1;
                    }
                    message Response {
                    }
                }
                message CollectionLikeV1 {
                    message Request {
                        string target_player_id = 1;
                    }
                    message Response {
                        Google.Protobuf.WellKnownTypes.Timestamp like_history_expired_at = 1;
                    }
                }
                message AnalyticsLogSendV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.Resource.AnalyticsLog.BattleConfig battle_config = 1;
                        Takasho.Schema.LettuceServer.Resource.AnalyticsLog.HomeScreen home_screen = 2;
                        Takasho.Schema.LettuceServer.Resource.AnalyticsLog.GameTutorial game_tutorial = 3;
                        Takasho.Schema.LettuceServer.Resource.AnalyticsLog.BattleTutorial battle_tutorial = 4;
                        Takasho.Schema.LettuceServer.Resource.AnalyticsLog.MissionClear mission_clear = 5;
                        Takasho.Schema.LettuceServer.Resource.AnalyticsLog.HomeIconTap home_icon_tap = 6;
                        Takasho.Schema.LettuceServer.Resource.AnalyticsLog.ChangeConfig change_config = 7;
                        Takasho.Schema.LettuceServer.Resource.AnalyticsLog.PackShareConfig pack_share_config = 8;
                        Takasho.Schema.LettuceServer.Resource.AnalyticsLog.CardFavorite card_favorite = 9;
                        Takasho.Schema.LettuceServer.Resource.AnalyticsLog.CardWish card_wish = 10;
                        Takasho.Schema.LettuceServer.Resource.AnalyticsLog.ImmersivePlay immersive_play = 11;
                        Takasho.Schema.LettuceServer.Resource.AnalyticsLog.CollectionFileFavoriteFromClient collection_file_favorite = 12;
                        Takasho.Schema.LettuceServer.Resource.AnalyticsLog.CollectionBoardFavoriteFromClient collection_board_favorite = 13;
                        Takasho.Schema.LettuceServer.Resource.AnalyticsLog.FeatureTutorial feature_tutorial = 14;
                    }
                    message Response {
                    }
                }
                message AndroidPlayIntegrityStartV1 {
                    message Request {
                    }
                    message Response {
                        string nonce = 1;
                    }
                }
                message AndroidPlayIntegrityVerifyV1 {
                    message Request {
                        string integrity_token = 1;
                        int64 integrity_error_code = 2;
                    }
                    message Response {
                    }
                }
                message CardListV1 {
                    message Request {
                        string page_token = 1;
                    }
                    message Response {
                        string next_page_token = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Card.CardStock cards = 2;
                    }
                }
                message CardIsUsedV1 {
                    message Request {
                        repeated Takasho.Schema.LettuceServer.Resource.Item.CardInstance cards = 1;
                    }
                    message Response {
                        bool is_used_from_album = 1;
                        bool is_used_from_mount = 2;
                        bool is_used_from_deck = 3;
                        bool has_public_collection = 4;
                    }
                }
                message CardSkinListV1 {
                    message Request {
                        string page_token = 1;
                    }
                    message Response {
                        string next_page_token = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.CardSkin.CardSkinStock card_skins = 2;
                    }
                }
                message CardSkinExchangeV1 {
                    message Request {
                        string card_id = 1;
                        string catalog_id = 2;
                        uint64 amount = 3;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.CardInstance resource_cards = 4;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.CardExchange.CardExchangeCatalog exchanged_catalogs = 4;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 14;
                    }
                }
                message CardSkinGetExchangedCatalogsV1 {
                    message Request {
                        string card_id = 1;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.CardExchange.CardExchangeCatalog exchanged_catalogs = 1;
                    }
                }
                message CardSkinGetCardExchangeRouteV1 {
                    message Request {
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.CardExchange.PlayerCardExchangeRouteType route_type = 1;
                    }
                }
                message CardSkinExchangedCatalogListV1 {
                    message Request {
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.CardExchange.CardExchangeCatalog exchanged_catalogs = 1;
                    }
                }
                message CardSkinIsUsedV1 {
                    message Request {
                        repeated Takasho.Schema.LettuceServer.Resource.CardSkin.CardSkin card_skins = 1;
                    }
                    message Response {
                        bool is_used_from_album = 1;
                        bool is_used_from_mount = 2;
                        bool is_used_from_deck = 3;
                        bool has_public_collection = 4;
                    }
                }
                message DeckGetListV1 {
                    message Request {
                    }
                    message Response {
                        repeated Lettuce.BattleEngine.Schema.Deck decks = 1;
                    }
                }
                message DeckSaveV1 {
                    message Request {
                        Lettuce.BattleEngine.Schema.Deck deck = 1;
                    }
                    message Response {
                        Lettuce.BattleEngine.Schema.Deck deck = 1;
                    }
                }
                message DeckDeleteV1 {
                    message Request {
                        uint64 deck_id = 1;
                    }
                    message Response {
                    }
                }
                message DeckGetRentalDecksV1 {
                    message Request {
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Deck.RentalDeckStatus rental_decks = 1;
                    }
                }
                message EchoEchoV1 {
                    message Request {
                    }
                    message Response {
                        Google.Protobuf.WellKnownTypes.Timestamp time = 1;
                    }
                }
                message FaveInsightV1 {
                    message Request {
                        bool colorless = 1;
                        bool grass = 2;
                        bool fire = 3;
                        bool water = 4;
                        bool lightning = 5;
                        bool psychic = 6;
                        bool fighting = 7;
                        bool darkness = 8;
                        bool metal = 9;
                        bool dragon = 10;
                        string nickname = 11;
                    }
                    message Response {
                    }
                }
                message FeedGetTimelineV1 {
                    message Request {
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Feed.FeedTimeline timeline = 1;
                        Takasho.Schema.LettuceServer.Resource.Feed.ChallengePower challenge_power = 2;
                    }
                }
                message FeedRenewTimelineV1 {
                    message Request {
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Feed.FeedTimeline timeline = 1;
                        Takasho.Schema.LettuceServer.Resource.Feed.ChallengePower challenge_power = 4;
                    }
                }
                message FeedChallengeV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.Resource.Feed.FeedType feed_type = 1;
                        string feed_id = 2;
                        int64 challenge_num = 3;
                        Takasho.Schema.LettuceServer.Resource.Feed.FeedRevivalItems revival_items = 4;
                        string transaction_id = 5;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Item.CardInstance picked_cards = 1;
                        Takasho.Schema.LettuceServer.Resource.Item.InventoryItems picked_substitution_item = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.Card.CardStock updated_card_stocks = 3;
                        Takasho.Schema.LettuceServer.Resource.Feed.ChallengePower challenge_power = 4;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 15;
                    }
                }
                message FeedHealChallengePowerV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.Resource.Feed.ChallengePowerHealItems items = 1;
                        string transaction_id = 2;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Feed.ChallengePower challenge_power = 1;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 7;
                    }
                }
                message FeedShareV1 {
                    message Request {
                        string transaction_id = 1;
                    }
                    message Response {
                    }
                }
                message FriendListV1 {
                    message Request {
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.Friend friends = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.FriendRequest sent_friend_requests = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.FriendRequest received_friend_requests = 3;
                        repeated Takasho.Schema.LettuceServer.Resource.PlayerProfile.ProfileSpine profiles = 4;
                    }
                }
                message FriendSendRequestsV1 {
                    message Request {
                        repeated string receiver_player_ids = 1;
                    }
                    message Response {
                        repeated string approved_player_ids = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.Friend friends = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.FriendRequest sent_friend_requests = 3;
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.FriendRequest received_friend_requests = 4;
                        repeated Takasho.Schema.LettuceServer.Resource.PlayerProfile.ProfileSpine profiles = 5;
                    }
                }
                message FriendCancelSentRequestsV1 {
                    message Request {
                        repeated string receiver_player_ids = 1;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.FriendRequest sent_friend_requests = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.PlayerProfile.ProfileSpine profiles = 2;
                    }
                }
                message FriendApproveRequestV1 {
                    message Request {
                        string sender_player_id = 1;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.Friend friends = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.FriendRequest received_friend_requests = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.PlayerProfile.ProfileSpine profiles = 3;
                    }
                }
                message FriendRejectRequestsV1 {
                    message Request {
                        repeated string sender_player_ids = 1;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.FriendRequest received_friend_requests = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.PlayerProfile.ProfileSpine profiles = 2;
                    }
                }
                message FriendDeleteV1 {
                    message Request {
                        repeated string delete_player_ids = 1;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.Friend friends = 1;
                    }
                }
                message FriendSearchV1 {
                    message Request {
                        string search_friend_id = 1;
                        string search_player_name = 2;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Friend.SearchResult results = 1;
                    }
                }
                message ItemShopGetPurchaseSummariesV1 {
                    message Request {
                        message Product {
                            string product_id = 1;
                            Takasho.Schema.LettuceServer.Resource.ItemShop.ProductType product_type = 2;
                        }
                        string shop_id = 1;
                        repeated Takasho.Schema.LettuceServer.PlayerApi.ItemShopGetPurchaseSummariesV1.Request.Product product_ids = 2;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.ItemShop.PurchaseSummary purchase_summaries = 1;
                    }
                }
                message ItemShopPurchaseV1 {
                    message Request {
                        string shop_id = 1;
                        string product_id = 2;
                        string transaction_id = 3;
                        int32 amount = 4;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.Currency currencies = 5;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.PokeGold poke_golds = 6;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 5;
                        Takasho.Schema.LettuceServer.Resource.ItemShop.PurchaseSummary purchase_summary = 6;
                    }
                }
                message ItemShopExchangeV1 {
                    message Request {
                        message RewardTicketPrice {
                            string id = 1;
                            int32 amount = 2;
                        }
                        string shop_id = 1;
                        string product_id = 2;
                        string transaction_id = 3;
                        int32 amount = 4;
                        Takasho.Schema.LettuceServer.PlayerApi.ItemShopExchangeV1.Request.RewardTicketPrice price = 5;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 4;
                        Takasho.Schema.LettuceServer.Resource.ItemShop.PurchaseSummary purchase_summary = 5;
                    }
                }
                message ActionSyncStatesV1 {
                    message Request {
                        Google.Protobuf.WellKnownTypes.Timestamp last_synced_at = 1;
                        string cursor = 2;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Action.ActionState action_states = 1;
                        string next_cursor = 2;
                        bool has_next = 3;
                    }
                }
                message ActionSyncNALinkStateV1 {
                    message Request {
                    }
                    message Response {
                    }
                }
                message MissionCompleteV1 {
                    message Request {
                        repeated string mission_ids = 1;
                    }
                    message Response {
                        repeated string theme_deck_recipe_ids = 4;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 5;
                    }
                }
                message MissionCompleteV2 {
                    message Request {
                        repeated string mission_ids = 1;
                    }
                    message Response {
                        repeated string theme_deck_recipe_ids = 1;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 2;
                    }
                }
                message MissionIsCompletedV1 {
                    message Request {
                        repeated string mission_ids = 1;
                    }
                    message Response {
                        message CompletedMission {
                            string mission_id = 1;
                            Google.Protobuf.WellKnownTypes.Timestamp last_completed_at = 2;
                        }
                        repeated Takasho.Schema.LettuceServer.PlayerApi.MissionIsCompletedV1.Response.CompletedMission completed_missions = 2;
                    }
                }
                message MissionIsNotifiedV1 {
                    message Request {
                        repeated string mission_ids = 1;
                    }
                    message Response {
                        repeated string fifty_percents = 1;
                        repeated string ninety_percents = 2;
                    }
                }
                message MissionSetNotifiedV1 {
                    message Request {
                        repeated string fifty_percent_notified_mission_ids = 1;
                        repeated string ninety_percent_notified_mission_ids = 2;
                    }
                    message Response {
                        repeated string fifty_percent_notified_mission_ids = 1;
                        repeated string ninety_percent_notified_mission_ids = 2;
                    }
                }
                message MissionGetGroupRewardStepStatesV1 {
                    message Request {
                        repeated string mission_group_reward_step_ids = 1;
                    }
                    message Response {
                        message MissionGroupRewardStepState {
                            string mission_group_reward_step_id = 1;
                            bool is_cleared = 2;
                        }
                        repeated Takasho.Schema.LettuceServer.PlayerApi.MissionGetGroupRewardStepStatesV1.Response.MissionGroupRewardStepState states = 1;
                    }
                }
                message MissionCompleteGroupRewardStepV1 {
                    message Request {
                        repeated string mission_group_reward_step_ids = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 1;
                    }
                }
                message MountListV1 {
                    message Request {
                    }
                    message Response {
                        uint64 mount_limit_num = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Mount.Mount mounts = 2;
                        uint64 like_count = 3;
                    }
                }
                message MountChangeOrderV1 {
                    message Request {
                        message Order {
                            uint64 mount_id = 1;
                            uint64 order_ = 2;
                        }
                        repeated Takasho.Schema.LettuceServer.PlayerApi.MountChangeOrderV1.Request.Order orders = 1;
                    }
                    message Response {
                    }
                }
                message MountGetDetailV1 {
                    message Request {
                        uint64 mount_id = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Mount.Mount mount = 2;
                    }
                }
                message MountSetV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.Resource.Mount.Mount mount = 1;
                    }
                    message Response {
                    }
                }
                message MountDeleteV1 {
                    message Request {
                        uint64 mount_id = 1;
                    }
                    message Response {
                    }
                }
                message MountGetOtherDetailV1 {
                    message Request {
                        uint64 mount_id = 1;
                        string other_player_id = 2;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Mount.Mount mount = 1;
                    }
                }
                enum WebviewLanguage {
                    WEBVIEW_LANGUAGE_UNSPECIFIED = 0;
                    WEBVIEW_LANGUAGE_DE = 1;
                    WEBVIEW_LANGUAGE_EN_US = 2;
                    WEBVIEW_LANGUAGE_EN_GB = 3;
                    WEBVIEW_LANGUAGE_ES = 4;
                    WEBVIEW_LANGUAGE_FR = 5;
                    WEBVIEW_LANGUAGE_IT = 6;
                    WEBVIEW_LANGUAGE_PT_BR = 7;
                    WEBVIEW_LANGUAGE_JA = 8;
                    WEBVIEW_LANGUAGE_ZH_TW = 9;
                    WEBVIEW_LANGUAGE_KO = 10;
                }
                message WebviewGetNewsV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.PlayerApi.WebviewLanguage language = 1;
                    }
                    message Response {
                        bool new_arrival = 1;
                        string news_url = 2;
                        bool force_show = 3;
                        string force_show_url = 4;
                    }
                }
                message WebviewGetNewsDetailUrlV1 {
                    message Request {
                        string news_id = 1;
                        Takasho.Schema.LettuceServer.PlayerApi.WebviewLanguage language = 2;
                    }
                    message Response {
                        string url = 1;
                    }
                }
                message WebviewGetGameHintUrlV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.PlayerApi.WebviewLanguage language = 1;
                        bool is_b_mode = 2;
                    }
                    message Response {
                        string url = 1;
                    }
                }
                message WebviewGetAboutUrlV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.PlayerApi.WebviewLanguage language = 1;
                    }
                    message Response {
                        string url = 1;
                    }
                }
                message WebviewGetTermsOfServiceUrlV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.PlayerApi.WebviewLanguage language = 1;
                        string country_region_code = 2;
                    }
                    message Response {
                        string url = 1;
                    }
                }
                message WebviewGetPrivacyPolicyUrlV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.PlayerApi.WebviewLanguage language = 1;
                        string country_region_code = 2;
                    }
                    message Response {
                        string url = 1;
                    }
                }
                message WebviewGetPaymentServiceActUrlV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.PlayerApi.WebviewLanguage language = 1;
                    }
                    message Response {
                        string url = 1;
                    }
                }
                message WebviewGetSpecifiedCommercialTransactionLawUrlV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.PlayerApi.WebviewLanguage language = 1;
                    }
                    message Response {
                        string url = 1;
                    }
                }
                message WebviewGetECommerceLawUrlV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.PlayerApi.WebviewLanguage language = 1;
                    }
                    message Response {
                        string url = 1;
                    }
                }
                message WebviewGetHowToUpdateUrlV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.PlayerApi.WebviewLanguage language = 1;
                    }
                    message Response {
                        string url = 1;
                    }
                }
                message NotificationSetting {
                    bool important_notice = 1;
                }
                message NotificationGetSettingsV1 {
                    message Request {
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.PlayerApi.NotificationSetting setting = 1;
                    }
                }
                message NotificationSaveSettingsV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.PlayerApi.NotificationSetting setting = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.PlayerApi.NotificationSetting setting = 1;
                    }
                }
                message PackGetDetailV1 {
                    message Request {
                        string master_version = 1;
                        repeated string pack_ids = 2;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Pack.PackDetail pack_details = 1;
                    }
                }
                message PackGetDetailV2 {
                    message Request {
                        string pack_id = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Pack.PackDetail pack_detail = 1;
                        string pack_consistent_token = 2;
                    }
                }
                message PackGetPackPowerV1 {
                    message Request {
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Pack.PackPower pack_powers = 2;
                    }
                }
                message PackShopPurchaseV1 {
                    message Request {
                        enum Amount {
                            UNSPECIFIED = 0;
                            ONE = 1;
                            TEN = 10;
                        }
                        string master_version = 1;
                        string transaction_id = 2;
                        string product_id = 4;
                        Takasho.Schema.LettuceServer.PlayerApi.PackShopPurchaseV1.Request.Amount amount = 5;
                        Takasho.Schema.LettuceServer.Resource.Pack.PackPowerHealItems heal_items = 6;
                        repeated Takasho.Schema.LettuceServer.Resource.Pack.PackPowerToUse use_powers = 7;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.PackShop.PackShopPurchaseOrder purchase_order = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Pack.PackUnpackOrder unpack_orders = 2;
                        Takasho.Schema.LettuceServer.Resource.Item.PackCeilPoint pack_ceil_point = 4;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 6;
                        repeated Takasho.Schema.LettuceServer.Resource.Pack.PackPower pack_powers = 7;
                    }
                }
                message PackShopExchangeV1 {
                    message Request {
                        string transaction_id = 1;
                        string card_id = 3;
                        int32 amount = 4;
                        string pack_ceil_point_shared_group_id = 5;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Item.PackCeilPoint pack_ceil_point = 3;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 5;
                    }
                }
                message PackShopPurchaseV2 {
                    message Request {
                        enum Amount {
                            UNSPECIFIED = 0;
                            ONE = 1;
                            TEN = 10;
                        }
                        string pack_consistent_token = 1;
                        string transaction_id = 2;
                        string product_id = 3;
                        Takasho.Schema.LettuceServer.PlayerApi.PackShopPurchaseV2.Request.Amount amount = 4;
                        Takasho.Schema.LettuceServer.Resource.Pack.PackPowerHealItems heal_items = 5;
                        repeated Takasho.Schema.LettuceServer.Resource.Pack.PackPowerToUse use_powers = 6;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.PackShop.PackShopPurchaseOrder purchase_order = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Pack.PackUnpackOrder unpack_orders = 2;
                        Takasho.Schema.LettuceServer.Resource.Item.PackCeilPoint pack_ceil_point = 3;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 4;
                        repeated Takasho.Schema.LettuceServer.Resource.Pack.PackPower pack_powers = 5;
                    }
                }
                message PassGetEntitlementsV1 {
                    message Request {
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Pass.PassEntitlement available_entitlements = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.Pass.PassEntitlementHistory histories = 3;
                    }
                }
                message PlayerDeleteAccountV1 {
                    message Request {
                    }
                    message Response {
                    }
                }
                message PlayerUnlinkAccountV1 {
                    message Request {
                    }
                    message Response {
                    }
                }
                message PlayerLevelMayLevelUpV1 {
                    message Request {
                        Google.Protobuf.WellKnownTypes.Timestamp current_timestamp = 1;
                    }
                    message Response {
                        int64 previous_level = 1;
                        int64 current_level = 2;
                        int64 exp = 5;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 14;
                    }
                }
                message MyProfileV1 {
                    message Request {
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.PlayerProfile.Profile profile = 1;
                        uint64 required_experience = 2;
                        Google.Protobuf.WellKnownTypes.Timestamp nickname_changed_at = 3;
                    }
                }
                message OtherPlayerProfileV1 {
                    message Request {
                        string player_id = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.PlayerProfile.Profile profile = 1;
                        Takasho.Schema.LettuceServer.Resource.Friend.FriendStatus friend_status = 2;
                    }
                }
                message SaveMyProfileV1 {
                    message Request {
                        string nickname = 1;
                        string icon_id = 2;
                        repeated string emblem_ids = 3;
                        string message_id = 4;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.PlayerProfile.Profile profile = 1;
                        uint64 required_experience = 2;
                        Google.Protobuf.WellKnownTypes.Timestamp nickname_changed_at = 3;
                    }
                }
                message PlayerResourcesSyncV1 {
                    message Request {
                        string cursor = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.PlayerResources.PlayerResources player_resources = 1;
                        bool has_next = 2;
                        string next_cursor = 3;
                    }
                }
                message PlayerResourcesGetNewEmblemArrivalV1 {
                    message Request {
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Item.InventoryItems new_arrivals = 1;
                        Takasho.Schema.LettuceServer.Resource.PlayerResources.PlayerResources player_resources = 2;
                    }
                }
                message PlayerResourcesMarkAsViewedNewEmblemArrivalV1 {
                    message Request {
                    }
                    message Response {
                        Google.Protobuf.WellKnownTypes.Timestamp last_viewed = 1;
                    }
                }
                message PlayerSettingGetInfoV1 {
                    message Request {
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.PlayerSettings.Info info = 1;
                    }
                }
                message PlayerSettingSaveInfoV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.Resource.Language.Language language_type = 1;
                        string country_region_code = 3;
                        bool use_of_last_login_time = 5;
                        bool use_of_login_data = 7;
                        bool use_of_performance_errors = 8;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.PlayerSettings.Info info = 1;
                    }
                }
                message PlayerStorageSetEntriesV1 {
                    message Request {
                        repeated Takasho.Schema.LettuceDebugServer.Debug.Entry entries = 1;
                        string next_revision = 2;
                        string previous_revision = 3;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceDebugServer.Debug.Entry entries = 1;
                        string revision = 2;
                    }
                }
                message PlayerStorageGetEntriesV1 {
                    message Request {
                        repeated Takasho.Schema.LettuceDebugServer.Debug.Criterion criteria = 1;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceDebugServer.Debug.Entry entries = 1;
                        string revision = 2;
                    }
                }
                message PresentBoxListV1 {
                    message Request {
                        string page_token = 1;
                    }
                    message Response {
                        string next_page_token = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Present.PresentItem presents = 2;
                    }
                }
                message PresentBoxListHistoriesV1 {
                    message Request {
                        string page_token = 1;
                    }
                    message Response {
                        message History {
                            Takasho.Schema.LettuceServer.Resource.Present.PresentItem present = 1;
                            Google.Protobuf.WellKnownTypes.Timestamp received_at = 2;
                        }
                        string next_page_token = 1;
                        repeated Takasho.Schema.LettuceServer.PlayerApi.PresentBoxListHistoriesV1.Response.History histories = 2;
                    }
                }
                message PresentBoxReceiveV1 {
                    message Request {
                        string present_id = 2;
                        repeated string present_ids = 3;
                    }
                    message Response {
                        message Result {
                            message Failure {
                                enum FailureReason {
                                    FAILURE_REASON_UNSPECIFIED = 0;
                                    FAILURE_REASON_EXPIRED = 1;
                                    FAILURE_REASON_OVERFLOW = 2;
                                    FAILURE_REASON_SKIP = 3;
                                }
                                Takasho.Schema.LettuceServer.PlayerApi.PresentBoxReceiveV1.Response.Result.Failure.FailureReason reason = 2;
                            }
                            string present_id = 1;
                            bool is_successe = 5;
                            Takasho.Schema.LettuceServer.PlayerApi.PresentBoxReceiveV1.Response.Result.Failure failure = 6;
                            Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 7;
                            bool is_pack = 8;
                            Takasho.Schema.LettuceServer.PlayerApi.PresentBoxReceiveV1.Response.PackResult pack_result = 9;
                        }
                        message PackResult {
                            repeated Takasho.Schema.LettuceServer.Resource.Pack.PackUnpackOrder unpack_orders = 2;
                        }
                        Takasho.Schema.LettuceServer.PlayerApi.PresentBoxReceiveV1.Response.Result result = 1;
                        bool is_pack = 3;
                        Takasho.Schema.LettuceServer.PlayerApi.PresentBoxReceiveV1.Response.PackResult pack_result = 4;
                        repeated Takasho.Schema.LettuceServer.PlayerApi.PresentBoxReceiveV1.Response.Result results = 5;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 6;
                    }
                }
                message PresentBoxGetNewArrivalV1 {
                    message Request {
                    }
                    message Response {
                        bool has_new_arrival = 1;
                    }
                }
                message PresentBoxMarkAsViewedV1 {
                    message Request {
                    }
                    message Response {
                        Google.Protobuf.WellKnownTypes.Timestamp last_viewed = 1;
                    }
                }
                enum MatchingStance {
                    MATCHING_STANCE_UNSPECIFIED = 0;
                    MATCHING_STANCE_BEGINNER = 1;
                    MATCHING_STANCE_EXPERT = 2;
                }
                message PvpCasualRequestPublicMatchingV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.Resource.Pvp.PvpBattleDeck deck = 1;
                        Takasho.Schema.LettuceServer.PlayerApi.MatchingStance matching_stance = 2;
                    }
                    message Response {
                        string matching_token = 1;
                        int64 polling_interval_ms = 2;
                        Takasho.Schema.LettuceServer.Resource.Pvp.PvpBattleInfo last_battle = 3;
                    }
                }
                message PvpCasualRequestPrivateMatchingV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.Resource.Pvp.PvpBattleDeck deck = 1;
                        string password = 3;
                    }
                    message Response {
                        string matching_token = 1;
                        int64 polling_interval_ms = 2;
                        Takasho.Schema.LettuceServer.Resource.Pvp.PvpBattleInfo last_battle = 3;
                    }
                }
                message PvpCasualDeleteMatchingV1 {
                    message Request {
                        string matching_token = 1;
                    }
                    message Response {
                    }
                }
                message PvpCasualGetMatchingResultV1 {
                    message Request {
                        string matching_token = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Pvp.MatchingStatus status = 1;
                    }
                }
                message PvpCasualStartBattleV1 {
                    message Request {
                        string matching_token = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.PlayerApi.PvpCasualBattleServerAuthInfo auth_info = 1;
                        Takasho.Schema.LettuceServer.PlayerApi.PvpCasualEstablishedMatch match = 2;
                        int64 rental_deck_used_count = 3;
                    }
                }
                message PvpCasualBattleServerAuthInfo {
                    string host = 1;
                    int32 port = 2;
                    string auth_token = 3;
                }
                message PvpCasualFinishBattleV1 {
                    message Request {
                        string finish_battle_token = 1;
                        Takasho.Schema.LettuceServer.Resource.Pvp.PvpBattleClientReport client_report = 2;
                        bool lose_declaration = 3;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 4;
                        Takasho.Schema.LettuceServer.Resource.Pvp.PvPResult result = 5;
                    }
                }
                message PvpCasualEstablishedMatch {
                    string battle_id = 1;
                    Takasho.Schema.LettuceServer.PlayerApi.PvpCasualMatchedPlayer self = 2;
                    Takasho.Schema.LettuceServer.PlayerApi.PvpCasualMatchedPlayer opponent = 3;
                }
                message PvpCasualMatchedPlayer {
                    string player_id = 1;
                    string nickname = 2;
                    string icon_id = 3;
                    uint64 player_level = 4;
                    repeated string emblem_ids = 5;
                    Takasho.Schema.LettuceServer.PlayerApi.MatchingStance matching_stance = 6;
                }
                enum EmblemEventWinType {
                    EMBLEM_EVENT_WIN_TYPE_COUNT = 0;
                    EMBLEM_EVENT_WIN_TYPE_STREAK = 1;
                }
                message PvpEventRequestEmblemMatchingV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.Resource.Pvp.PvpBattleDeck deck = 1;
                    }
                    message Response {
                        string matching_token = 1;
                        int64 polling_interval_ms = 2;
                        Takasho.Schema.LettuceServer.Resource.Pvp.PvpBattleInfo last_battle = 3;
                    }
                }
                message PvpEventDeleteMatchingV1 {
                    message Request {
                        string matching_token = 1;
                    }
                    message Response {
                    }
                }
                message PvpEventGetMatchingResultV1 {
                    message Request {
                        string matching_token = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Pvp.MatchingStatus status = 1;
                    }
                }
                message PvpEventStartBattleV1 {
                    message Request {
                        string matching_token = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.PlayerApi.PvpEventBattleServerAuthInfo auth_info = 1;
                        Takasho.Schema.LettuceServer.PlayerApi.PvpEventEstablishedMatch match = 2;
                        int64 rental_deck_used_count = 3;
                    }
                }
                message PvpEventBattleServerAuthInfo {
                    string host = 1;
                    int32 port = 2;
                    string auth_token = 3;
                }
                message PvpEventFinishBattleV1 {
                    message Request {
                        string finish_battle_token = 1;
                        Takasho.Schema.LettuceServer.Resource.Pvp.PvpBattleClientReport client_report = 2;
                        bool lose_declaration = 3;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 4;
                        Takasho.Schema.LettuceServer.Resource.Pvp.PvPResult result = 5;
                    }
                }
                message PvpEventEstablishedMatch {
                    string battle_id = 1;
                    Takasho.Schema.LettuceServer.PlayerApi.PvpEventMatchedPlayer self = 2;
                    Takasho.Schema.LettuceServer.PlayerApi.PvpEventMatchedPlayer opponent = 3;
                }
                message PvpEventMatchedPlayer {
                    string player_id = 1;
                    string nickname = 2;
                    string icon_id = 3;
                    uint64 player_level = 4;
                    repeated string emblem_ids = 5;
                    int64 emblem_step_type = 6;
                }
                message PvpEventGetEmblemProfileV1 {
                    message Request {
                        string emblem_event_id = 1;
                    }
                    message Response {
                        string current_emblem_step_id = 1;
                        Takasho.Schema.LettuceServer.PlayerApi.EmblemEventWinType win_type = 2;
                        int64 value = 3;
                        string terminal_emblem_step_id = 4;
                        int64 max_value = 5;
                    }
                }
                message ShopGetNewArrivalV1 {
                    enum Type {
                        TYPE_UNSPECIFIED = 0;
                        TYPE_POKE_GOLD_SHOP = 1;
                        TYPE_ITEM_SHOP = 2;
                        TYPE_POKE_GOLD_SHOP_PRODUCT = 3;
                        TYPE_ITEM_SHOP_PRODUCT = 4;
                    }
                    message NewArrival {
                        Takasho.Schema.LettuceServer.PlayerApi.ShopGetNewArrivalV1.Type type = 1;
                        repeated string ids = 2;
                    }
                    message Request {
                        repeated Takasho.Schema.LettuceServer.PlayerApi.ShopGetNewArrivalV1.NewArrival new_arrivals = 1;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.PlayerApi.ShopGetNewArrivalV1.NewArrival new_arrivals = 2;
                    }
                }
                message ShopGetNewNotificationV1 {
                    enum Type {
                        TYPE_UNSPECIFIED = 0;
                        TYPE_POKE_GOLD_SHOP = 1;
                        TYPE_ITEM_SHOP = 2;
                        TYPE_POKE_GOLD_SHOP_PRODUCT = 3;
                        TYPE_ITEM_SHOP_PRODUCT = 4;
                        TYPE_ITEM_SHOP_CLOSE_SOON = 5;
                        TYPE_NEW_ITEM_SHOP = 6;
                        TYPE_ITEM_SHOP_CAN_PURCHASE_OR_EXCHANGE = 7;
                    }
                    message NewNotification {
                        Takasho.Schema.LettuceServer.PlayerApi.ShopGetNewNotificationV1.Type type = 1;
                        repeated string ids = 2;
                    }
                    message Request {
                        repeated Takasho.Schema.LettuceServer.PlayerApi.ShopGetNewNotificationV1.NewNotification new_notifications = 1;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.PlayerApi.ShopGetNewNotificationV1.NewNotification new_notifications = 2;
                    }
                }
                message ShopMarkAsViewedV1 {
                    enum Type {
                        TYPE_UNSPECIFIED = 0;
                        TYPE_POKE_GOLD_SHOP = 1;
                        TYPE_ITEM_SHOP = 2;
                        TYPE_ITEM_SHOP_CLOSE_SOON = 5;
                        TYPE_NEW_ITEM_SHOP = 6;
                    }
                    message MarkedShop {
                        Takasho.Schema.LettuceServer.PlayerApi.ShopMarkAsViewedV1.Type type = 1;
                        repeated string ids = 2;
                    }
                    message Request {
                        repeated Takasho.Schema.LettuceServer.PlayerApi.ShopMarkAsViewedV1.MarkedShop shops = 1;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.PlayerApi.ShopMarkAsViewedV1.MarkedShop shops = 1;
                        Google.Protobuf.WellKnownTypes.Timestamp last_viewed_at = 2;
                    }
                }
                message SignInWithAppleGenerateTokenV1 {
                    message Request {
                        string code = 1;
                    }
                    message Response {
                    }
                }
                message SoloBattleGetStepupBattlesV1 {
                    message Request {
                        repeated string solo_stepup_battle_ids = 1;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloStepupBattle solo_stepup_battles = 1;
                    }
                }
                message SoloBattleStartStepupBattleV1 {
                    message Request {
                        string solo_stepup_battle_id = 1;
                        Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleDeck deck = 2;
                    }
                    message Response {
                        string battle_session_token = 1;
                        int64 rental_deck_used_count = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleTryProgress battle_tries = 3;
                    }
                }
                message SoloBattleFinishStepupBattleV1 {
                    message Request {
                        string battle_id = 1;
                        Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleResultType result_type = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleTryProgress battle_try_progresses = 3;
                        string battle_session_token = 4;
                        Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleDeck deck = 5;
                        Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleInGameStatistics battle_stats = 6;
                    }
                    message Response {
                        bool is_first_clear = 4;
                        repeated Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleTryProgressResult battle_tries = 5;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 6;
                    }
                }
                message SoloBattleGetEventBattlesV1 {
                    message Request {
                        repeated string solo_event_battle_ids = 1;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloEventBattle solo_event_battles = 1;
                    }
                }
                message SoloBattleStartEventBattleV1 {
                    message Request {
                        string solo_event_battle_id = 1;
                        Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleDeck deck = 2;
                    }
                    message Response {
                        string battle_session_token = 1;
                        int64 rental_deck_used_count = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleTryProgress battle_tries = 3;
                    }
                }
                message SoloBattleFinishEventBattleV1 {
                    message Request {
                        string battle_id = 1;
                        Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleResultType result_type = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleTryProgress battle_try_progresses = 3;
                        string battle_session_token = 4;
                        Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleDeck deck = 5;
                        Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleInGameStatistics battle_stats = 6;
                    }
                    message Response {
                        bool is_first_clear = 4;
                        repeated Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleTryProgressResult battle_tries = 5;
                        repeated string dropped_reward_ids = 6;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 7;
                        Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleEventPower event_power = 8;
                    }
                }
                message SoloBattleHealEventPowerV1 {
                    message Request {
                        string event_id = 1;
                        Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleEventPowerHealItems items = 2;
                        string transaction_id = 3;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleEventPower event_power = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.PokeGold poke_golds = 3;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 4;
                    }
                }
                message SoloBattleGetEventPowersV1 {
                    message Request {
                        repeated string event_ids = 1;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleEventPower event_powers = 1;
                    }
                }
                message SystemAuthorizeV1 {
                    message Request {
                        string device_account = 1;
                        Takasho.Schema.LettuceServer.Resource.System.DeviceInfo device_info = 3;
                        string id_token = 4;
                    }
                    message Response {
                        message SignedCookie {
                            string signed_cookie_ = 1;
                            Google.Protobuf.WellKnownTypes.Timestamp expire_at = 2;
                        }
                        string session_token = 1;
                        string player_id = 2;
                        string asset_base_url = 3;
                        Takasho.Schema.LettuceServer.PlayerApi.SystemAuthorizeV1.Response.SignedCookie signed_cookie = 4;
                    }
                }
                message SystemLoginV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.Resource.Language.Language language_type = 1;
                        bool third_party_data_provision_approved = 4;
                        string third_party_data_provision_version_approved = 5;
                        string privacy_policy_consent_version_approved = 6;
                        string terms_of_service_consent_version_approved = 7;
                        string country_region_code = 8;
                        int64 year_num_of_birth = 9;
                        int64 month_num_of_birth = 10;
                        bool use_of_data_in_game_announcements = 11;
                        bool use_of_last_login_time = 12;
                        bool use_of_login_data = 13;
                        bool use_of_performance_errors = 14;
                        Takasho.Schema.LettuceServer.Resource.PlayerSettings.Info.AgeGateType age_gate_type = 15;
                    }
                    message Response {
                        message TutorialStatus {
                            string tutorial_id = 1;
                            int64 tutorial_step = 2;
                        }
                        Takasho.Schema.LettuceServer.Resource.PlayerSettings.Info player_settings_info = 1;
                        repeated Takasho.Schema.LettuceServer.PlayerApi.SystemLoginV1.Response.TutorialStatus tutorial_completes = 3;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 4;
                    }
                }
                message ThankRewardSendV1 {
                    message Request {
                        string target_player_id = 1;
                        Takasho.Schema.LettuceServer.Resource.ThankReward.RouteType route_type = 2;
                    }
                    message Response {
                    }
                }
                message TradeGetV1 {
                    message Request {
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Trade.TradeSession trade_session = 1;
                        bool rule_has_changed = 5;
                    }
                }
                message TradeSubmitProposalV1 {
                    message Request {
                        string partner_player_id = 1;
                        Takasho.Schema.LettuceServer.Resource.Item.CardInstance trade_submission = 2;
                        Takasho.Schema.LettuceServer.Resource.Item.TradeItem trade_item = 3;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Trade.TradeSession trade_session = 1;
                        Takasho.Schema.LettuceServer.Resource.PlayerResources.PlayerResources item_state = 2;
                        Takasho.Schema.LettuceServer.Resource.Trade.TradePower trade_power = 3;
                    }
                }
                message TradeAcceptProposalV1 {
                    message Request {
                        string trade_session_id = 1;
                        Takasho.Schema.LettuceServer.Resource.Item.CardInstance trade_submission = 2;
                        Takasho.Schema.LettuceServer.Resource.Item.TradeItem trade_item = 3;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Trade.TradeSession trade_session = 1;
                        Takasho.Schema.LettuceServer.Resource.PlayerResources.PlayerResources item_state = 2;
                        Takasho.Schema.LettuceServer.Resource.Trade.TradePower trade_power = 3;
                    }
                }
                message TradeConfirmV1 {
                    message Request {
                        string trade_session_id = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Trade.TradeOutcome outcome = 1;
                    }
                }
                message TradeRejectV1 {
                    message Request {
                        string trade_session_id = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Trade.TradeDeposit deposit = 1;
                    }
                }
                message TradeReceiveOutcomesV1 {
                    message Request {
                        string trade_session_id = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Trade.TradeOutcome outcome = 1;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 2;
                    }
                }
                message TradeReceiveDepositsV1 {
                    message Request {
                        string trade_session_id = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Trade.TradeDeposit deposit = 1;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 2;
                        Takasho.Schema.LettuceServer.Resource.Trade.TradePower trade_power = 3;
                    }
                }
                message TradeGetFriendsV1 {
                    message Request {
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Trade.TradePlayerProfile profiles = 1;
                    }
                }
                message TradeGetSettingV1 {
                    message Request {
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Trade.TradeSettings settings = 1;
                    }
                }
                message TradeSaveSettingV1 {
                    message Request {
                        Takasho.Schema.LettuceServer.Resource.Trade.TradeSettings settings = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Trade.TradeSettings settings = 1;
                    }
                }
                message TradeGetHistoryV1 {
                    message Request {
                        string page_token = 1;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Trade.TradeHistory histories = 1;
                        string next_page_token = 2;
                    }
                }
                message TradeGetTradePowerV1 {
                    message Request {
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Trade.TradePower trade_power = 1;
                    }
                }
                message TradeHealTradePowerV1 {
                    message Request {
                        message HealItems {
                            repeated Takasho.Schema.LettuceServer.Resource.Item.TradePowerCharger chargers = 1;
                            int64 vc_amount = 2;
                        }
                        Takasho.Schema.LettuceServer.PlayerApi.TradeHealTradePowerV1.Request.HealItems items = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Trade.TradePower trade_power = 1;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 2;
                    }
                }
                message TrophyCompleteV1 {
                    message Request {
                        repeated Takasho.Schema.LettuceServer.Resource.Trophy.Trophy trophies = 1;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 4;
                    }
                }
                message TrophyGetStatusV1 {
                    message Request {
                        repeated string trophy_ids = 1;
                        string player_id = 2;
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Trophy.Trophy trophies = 1;
                    }
                }
                message TutorialCompleteV1 {
                    message Request {
                        string tutorial_id = 1;
                        int64 tutorial_step = 2;
                    }
                    message Response {
                        string tutorial_id = 1;
                        int64 tutorial_step = 2;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 3;
                    }
                }
                message TutorialChoiceExchangeRouteV1 {
                    message Request {
                        string pack_id = 1;
                        string tutorial_id = 2;
                        int64 tutorial_step = 3;
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.CardExchange.PlayerCardExchangeRouteType exchange_route_type = 1;
                        Takasho.Schema.LettuceServer.Resource.Pack.PackUnpackOrder unpack_order = 2;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 3;
                        string tutorial_id = 4;
                        int64 tutorial_step = 5;
                    }
                }
                message TutorialPackPurchaseV1 {
                    message Request {
                        string tutorial_id = 1;
                        int64 tutorial_step = 2;
                    }
                    message Response {
                        string tutorial_id = 1;
                        int64 tutorial_step = 2;
                        Takasho.Schema.LettuceServer.Resource.Pack.PackUnpackOrder unpack_order = 3;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 4;
                    }
                }
                message TutorialGetFeedTimelineV1 {
                    message Request {
                    }
                    message Response {
                        Takasho.Schema.LettuceServer.Resource.Feed.FeedTimeline timeline = 1;
                        Takasho.Schema.LettuceServer.Resource.Feed.ChallengePower challenge_power = 2;
                    }
                }
                message TutorialChallengeFeedV1 {
                    message Request {
                    }
                    message Response {
                        repeated Takasho.Schema.LettuceServer.Resource.Item.CardInstance picked_cards = 1;
                        Takasho.Schema.LettuceServer.Resource.Item.InventoryItems picked_substitution_item = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.Card.CardStock updated_card_stocks = 3;
                        Takasho.Schema.LettuceServer.Resource.Feed.ChallengePower challenge_power = 4;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.ItemAcquisitionResult item_acquisition_result = 15;
                    }
                }
            }
            message CustomOption {
                message PlayerApiMethodOption {
                    message MethodErrorDefinition {
                        Takasho.Schema.LettuceServer.Resource.PlayerApiError.Code.Method code = 1;
                        Takasho.Schema.LettuceServer.Resource.PlayerApiError.Severity.Value severity = 2;
                        string message = 3;
                        string description = 4;
                    }
                    bool skip_authenticate = 1;
                    bool skip_client_version = 2;
                    bool skip_api_restrictions = 4;
                    bool skip_player_available = 5;
                    repeated Takasho.Schema.LettuceServer.CustomOption.PlayerApiMethodOption.MethodErrorDefinition method_error_definitions = 3;
                }
            }
            message Resource {
                message Trophy {
                    enum TrophyRank {
                        TROPHY_RANK_UNSPECIFIED = 0;
                        TROPHY_RANK_BRONZE = 1;
                        TROPHY_RANK_SLIVER = 2;
                        TROPHY_RANK_GOLD = 3;
                        TROPHY_RANK_RAINBOW = 4;
                    }
                    message Trophy {
                        string id = 1;
                        Takasho.Schema.LettuceServer.Resource.Trophy.TrophyRank rank = 2;
                    }
                }
                message Trade {
                    enum TradeSessionState {
                        TRADE_SESSION_STATE_UNSPECIFIED = 0;
                        TRADE_SESSION_STATE_WAIT_ANSWER = 1;
                        TRADE_SESSION_STATE_WAIT_CONFIRM = 2;
                        TRADE_SESSION_STATE_HAS_REQUEST = 3;
                        TRADE_SESSION_STATE_HAS_ANSWER = 4;
                        TRADE_SESSION_STATE_READY_READY_TO_RECEIVE_OUTCOME = 5;
                        TRADE_SESSION_STATE_READY_READY_TO_RECEIVE_DEPOSIT = 6;
                    }
                    message TradeSessionStatus {
                        Google.Protobuf.WellKnownTypes.Timestamp expire_at = 1;
                        Takasho.Schema.LettuceServer.Resource.Trade.TradeSessionState state = 2;
                    }
                    message TradeSession {
                        string session_id = 1;
                        Takasho.Schema.LettuceServer.Resource.Item.CardInstance my_submission = 2;
                        Takasho.Schema.LettuceServer.Resource.Item.CardInstance partner_submission = 3;
                        Takasho.Schema.LettuceServer.Resource.PlayerProfile.ProfileSpine partner = 4;
                        Takasho.Schema.LettuceServer.Resource.Trade.TradeSessionStatus status = 5;
                        Takasho.Schema.LettuceServer.Resource.Trade.TradeOutcome outcome = 6;
                        Takasho.Schema.LettuceServer.Resource.Trade.TradeDeposit deposit = 7;
                        bool is_proposer = 8;
                    }
                    message TradePower {
                        int64 amount = 1;
                        Google.Protobuf.WellKnownTypes.Timestamp last_auto_healed_at = 2;
                        int64 over_heal_sec = 3;
                        int64 auto_heal_limit = 4;
                        int64 heal_sec_per_power = 5;
                        int64 manual_heal_limit = 6;
                    }
                    message TradeOutcome {
                        Takasho.Schema.LettuceServer.Resource.Item.CardInstance card = 5;
                    }
                    message TradeDeposit {
                        int64 power_amount = 5;
                        Takasho.Schema.LettuceServer.Resource.Item.TradeItem trade_item = 6;
                    }
                    message TradePlayerProfile {
                        enum TradeStatus {
                            UNSPECIFIED = 0;
                            CAN_TRADE = 1;
                            BLOCKED = 2;
                            TRADING = 3;
                            FEATURE_LOCKED = 4;
                            BANNED = 5;
                        }
                        Takasho.Schema.LettuceServer.Resource.PlayerProfile.ProfileSpine profile = 1;
                        bool can_trade = 2;
                        Takasho.Schema.LettuceServer.Resource.Trade.TradePlayerProfile.TradeStatus status = 3;
                    }
                    message TradeSettings {
                        bool enable_trade_all_block = 1;
                    }
                    message TradeHistory {
                        string trade_session_id = 1;
                        string nickname = 200;
                        string icon_id = 300;
                        Takasho.Schema.LettuceServer.Resource.Item.CardInstance my_submission = 3;
                        Takasho.Schema.LettuceServer.Resource.Item.CardInstance partner_submission = 4;
                        Google.Protobuf.WellKnownTypes.Timestamp completed_at = 5;
                        int64 my_submission_card_last_amount = 6;
                        int64 partner_submission_card_last_amount = 7;
                    }
                }
                message ThankReward {
                    enum RouteType {
                        ROUTE_TYPE_UNSPECIFIED = 0;
                        ROUTE_TYPE_PVP = 1;
                        ROUTE_TYPE_FEED = 2;
                        ROUTE_TYPE_TRADE = 3;
                    }
                }
                message System {
                    enum PlatformType {
                        UNSPECIFIED = 0;
                        GOOGLE = 1;
                        APPLE = 2;
                        EDITOR = 3;
                    }
                    message DeviceInfo {
                        Takasho.Schema.LettuceServer.Resource.System.PlatformType platform = 1;
                        string identifier = 2;
                    }
                }
                message Store {
                    enum Market {
                        UNSPECIFIED = 0;
                        MOCK = 1;
                        APPLE = 2;
                        GOOGLE = 3;
                    }
                }
                message SoloBattle {
                    enum SoloBattleResultType {
                        RESULT_TYPE_UNSPECIFIED = 0;
                        RESULT_TYPE_WIN = 1;
                        RESULT_TYPE_DRAW = 2;
                        RESULT_TYPE_LOSE = 3;
                    }
                    message SoloStepupBattle {
                        string battle_id = 1;
                        bool is_cleared = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleTry battle_tries = 3;
                    }
                    message SoloEventBattle {
                        string battle_id = 1;
                        bool is_cleared = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleTry battle_tries = 3;
                    }
                    message SoloBattleTry {
                        string battle_try_id = 1;
                        int64 current_count = 2;
                    }
                    message SoloBattleTryProgress {
                        string battle_try_id = 1;
                        int64 current_count = 2;
                    }
                    message SoloBattleTryProgressResult {
                        string battle_try_id = 1;
                        int64 current_count = 2;
                        bool is_received_reward = 3;
                    }
                    message SoloBattleDeck {
                        enum DeckType {
                            UNSPECIFIED = 0;
                            MY_DECK = 1;
                            RENTAL_DECK = 2;
                        }
                        Takasho.Schema.LettuceServer.Resource.SoloBattle.SoloBattleDeck.DeckType type = 1;
                        int64 my_deck_id = 2;
                        string rental_deck_id = 3;
                    }
                    message SoloBattleInGameStatistics {
                        bool is_concede = 1;
                        int64 turn_num = 2;
                        bool pre = 3;
                        int64 player_point = 4;
                        int64 target_player_point = 5;
                        bool auto_flg = 7;
                    }
                    message SoloBattleEventPowerHealItems {
                        repeated Takasho.Schema.LettuceServer.Resource.Item.EventPowerCharger chargers = 1;
                        int64 vc_amount = 2;
                    }
                    message SoloBattleEventPower {
                        string event_id = 1;
                        int64 amount = 2;
                        Google.Protobuf.WellKnownTypes.Timestamp last_auto_healed_at = 3;
                        int64 over_heal_sec = 4;
                        int64 auto_heal_limit = 5;
                        int64 heal_sec_per_power = 6;
                        int64 manual_heal_limit = 7;
                    }
                }
                message Pvp {
                    enum MatchingStatus {
                        MATCHING_STATUS_UNSPECIFIED = 0;
                        MATCHING_STATUS_READY = 1;
                        MATCHING_STATUS_ESTABLISHED = 2;
                        MATCHING_STATUS_EXPIRED = 3;
                    }
                    enum EmblemStep {
                        EMBLEM_STEP_NO_EMBLEM = 0;
                        EMBLEM_STEP_WHITE = 1;
                        EMBLEM_STEP_BRONZE = 2;
                        EMBLEM_STEP_SILVER = 3;
                        EMBLEM_STEP_GOLD = 4;
                    }
                    enum PvPResult {
                        PVP_RESULT_DRAW = 0;
                        PVP_RESULT_WIN = 1;
                        PVP_RESULT_LOSE = 2;
                    }
                    enum PvpType {
                        PVP_TYPE_UNSPECIFIED = 0;
                        PVP_TYPE_CASUAL_RANDOM = 1;
                        PVP_TYPE_CASUAL_PRIVATE = 2;
                        PVP_TYPE_EVENT_EMBLEM = 3;
                        PVP_TYPE_RATING = 4;
                    }
                    message PvpBattleDeck {
                        enum DeckType {
                            UNSPECIFIED = 0;
                            MY_DECK = 1;
                            RENTAL_DECK = 2;
                        }
                        Takasho.Schema.LettuceServer.Resource.Pvp.PvpBattleDeck.DeckType type = 1;
                        int64 my_deck_id = 2;
                        string rental_deck_id = 3;
                    }
                    message PvpBattleClientReport {
                        int64 player_acquired_point = 1;
                        int64 player_max_damage = 2;
                        int64 opponent_acquired_point = 3;
                        int64 opponent_max_damage = 4;
                        int64 final_turn_number = 5;
                        Takasho.Schema.LettuceServer.Resource.Pvp.PvpBattleDeck player_deck = 6;
                        bool first_turn_player = 7;
                        bool is_concede = 8;
                        int64 consume_time = 9;
                    }
                    message PvpBattleInfo {
                        Takasho.Schema.LettuceServer.Resource.Pvp.PvpType battle_type = 1;
                        bool require_finish = 2;
                    }
                }
                message Present {
                    message PresentItem {
                        message Sender {
                            string nickname = 1;
                            string icon_id = 2;
                        }
                        string present_id = 1;
                        oneof item {
                            Takasho.Schema.LettuceServer.Resource.Item.CardInstance card = 2;
                            Takasho.Schema.LettuceServer.Resource.Item.RentalDeck rental_deck = 3;
                            Takasho.Schema.LettuceServer.Resource.Item.EventPowerCharger event_power_charger = 4;
                            Takasho.Schema.LettuceServer.Resource.Item.Pack pack = 5;
                            Takasho.Schema.LettuceServer.Resource.Item.PackPowerCharger pack_power_charger = 6;
                            Takasho.Schema.LettuceServer.Resource.Item.ChallengePowerCharger challenge_power_charger = 7;
                            Takasho.Schema.LettuceServer.Resource.Item.PeripheralGoods peripheral_goods = 8;
                            Takasho.Schema.LettuceServer.Resource.Item.ProfileDecoration profile_decoration = 9;
                            Takasho.Schema.LettuceServer.Resource.Item.Currency currency = 10;
                            Takasho.Schema.LettuceServer.Resource.Item.PokeGold poke_gold = 11;
                            Takasho.Schema.LettuceServer.Resource.Item.RewardTicket reward_ticket = 12;
                            Takasho.Schema.LettuceServer.Resource.Item.RevivalClock revival_clock = 13;
                            Takasho.Schema.LettuceServer.Resource.Item.ThemeDeckRecipe theme_deck_recipe = 14;
                            Takasho.Schema.LettuceServer.Resource.Item.TradePowerCharger trade_power_charger = 15;
                            Takasho.Schema.LettuceServer.Resource.Item.TradeItem trade_item = 16;
                            Takasho.Schema.LettuceServer.Resource.CardSkin.CardSkinStock card_skin = 17;
                        }
                        Takasho.Schema.LettuceServer.Resource.Present.PresentItem.Sender sender = 100;
                        string message_msid = 101;
                        bool is_empty = 102;
                        bool is_forever = 200;
                        Google.Protobuf.WellKnownTypes.Timestamp expired_at = 201;
                        Google.Protobuf.WellKnownTypes.Timestamp created_at = 300;
                    }
                }
                message Pokemon {
                    enum EnergyType {
                        ENERGY_TYPE_UNSPECIFIED = 0;
                        ENERGY_TYPE_COLORLESS = 1;
                        ENERGY_TYPE_GRASS = 2;
                        ENERGY_TYPE_FIRE = 3;
                        ENERGY_TYPE_WATER = 4;
                        ENERGY_TYPE_LIGHTNING = 5;
                        ENERGY_TYPE_PSYCHIC = 6;
                        ENERGY_TYPE_FIGHTING = 7;
                        ENERGY_TYPE_DARKNESS = 8;
                        ENERGY_TYPE_METAL = 9;
                        ENERGY_TYPE_DRAGON = 10;
                    }
                }
                message PlayerStorage {
                    message Entry {
                        string player_id = 1;
                        string key = 2;
                        bytes value = 3;
                        Google.Protobuf.WellKnownTypes.Timestamp created_at = 4;
                        Google.Protobuf.WellKnownTypes.Timestamp updated_at = 5;
                    }
                    message Criterion {
                        enum MatchingType {
                            MATCHING_TYPE_UNSPECIFIED = 0;
                            MATCHING_TYPE_EXACT = 1;
                            MATCHING_TYPE_FORWARD = 2;
                        }
                        string key = 1;
                        Takasho.Schema.LettuceDebugServer.Debug.Criterion.MatchingType matching_type = 2;
                    }
                }
                message PlayerSettings {
                    enum AgreementType {
                        UNSPECIFIED = 0;
                        AGREE = 1;
                        DISAGREE = 2;
                    }
                    message Info {
                        enum AgeGateType {
                            UNSPECIFIED = 0;
                            A = 1;
                            B = 2;
                        }
                        Takasho.Schema.LettuceServer.Resource.Language.Language language_type = 1;
                        string third_party_data_provision_version = 5;
                        bool privacy_policy_consent_is_required = 6;
                        bool terms_of_service_consent_is_required = 7;
                        bool third_party_data_provision_is_required = 8;
                        string country_region_code = 9;
                        int64 year_num_of_birth = 10;
                        int64 month_num_of_birth = 11;
                        bool use_of_last_login_time = 13;
                        string support_id = 14;
                        Takasho.Schema.LettuceServer.Resource.PlayerProfile.AvailableType available_type = 15;
                        bool use_of_login_data = 16;
                        bool use_of_performance_errors = 17;
                        string privacy_policy_consent_version = 18;
                        string terms_of_service_consent_version = 19;
                        Takasho.Schema.LettuceServer.Resource.PlayerSettings.Info.AgeGateType age_gate_type = 20;
                    }
                }
                message PlayerResources {
                    message PlayerResources {
                        repeated Takasho.Schema.LettuceServer.Resource.Card.CardStock card_stocks = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.CardSkin.CardSkinStock card_skin_stocks = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.PackPowerCharger pack_power_chargers = 3;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.ChallengePowerCharger challenge_power_chargers = 4;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.PeripheralGoods peripheral_goods = 5;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.Currency currencies = 6;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.ProfileDecoration profile_decorations = 7;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.RewardTicket reward_tickets = 8;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.RevivalClock revival_clocks = 9;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.RentalDeck rental_decks = 10;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.ThemeDeckRecipe theme_deck_recipes = 11;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.EventPowerCharger event_power_chargers = 12;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.PackCeilPoint pack_ceil_points = 13;
                        Takasho.Schema.LettuceServer.Resource.Item.ExpStock exp_stock = 14;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.TradePowerCharger trade_power_chargers = 15;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.TradeItem trade_items = 16;
                    }
                }
                message PlayerProfile {
                    enum AvailableType {
                        UNSPECIFIED = 0;
                        AVAILABLE = 1;
                        SUSPEND = 2;
                        UNAVAILABLE = 3;
                    }
                    enum AvailableTypeForDebug {
                        AVAILABLE_TYPE_FOR_DEBUG_UNSPECIFIED = 0;
                        AVAILABLE_TYPE_FOR_DEBUG_AVAILABLE = 1;
                        AVAILABLE_TYPE_FOR_DEBUG_SUSPEND = 2;
                        AVAILABLE_TYPE_FOR_DEBUG_UNAVAILABLE_BANNED = 3;
                        AVAILABLE_TYPE_FOR_DEBUG_UNAVAILABLE_DELETED = 4;
                    }
                    message ProfileSpine {
                        string player_id = 1;
                        string nickname = 2;
                        string icon_id = 3;
                        uint64 player_level = 4;
                        Google.Protobuf.WellKnownTypes.Timestamp last_logged_in_at = 5;
                        repeated string emblem_ids = 6;
                        Takasho.Schema.LettuceServer.Resource.Collection.MyBestCollection collection = 7;
                        string friend_id = 8;
                        Takasho.Schema.LettuceServer.Resource.PlayerProfile.AvailableType available_type = 9;
                    }
                    message Profile {
                        Takasho.Schema.LettuceServer.Resource.PlayerProfile.ProfileSpine profile_spine = 1;
                        string message_id = 2;
                        uint64 number_of_cards = 3;
                        repeated Takasho.Schema.LettuceServer.Resource.PlayerProfile.ExpansionProgressInfo card_expansion_progress_infos = 4;
                        Takasho.Schema.LettuceServer.Resource.PlayerProfile.BattleRecordSummary battle_record_summary = 5;
                    }
                    message ExpansionProgressInfo {
                        string expansion_id = 1;
                        string pack_id = 2;
                        uint64 number_of_types = 3;
                    }
                    message BattleRecordSummary {
                        uint64 total_win_count = 1;
                        uint64 max_damage = 2;
                        uint64 total_acquired_point = 3;
                    }
                }
                message PlayerApiError {
                    message Code {
                        enum Common {
                            COMMON_UNSPECIFIED = 0;
                            INVALID_SESSION = 1001;
                            SESSION_OVERWRITTEN = 1002;
                            INVALID_CLIENT = 1003;
                            INVALID_PLAYER_AVAILABLE = 1004;
                            DEVICE_RESTRICTED = 1005;
                            UNDER_MAINTENANCE = 1006;
                            DELETED_PLAYER = 1007;
                        }
                        enum Method {
                            METHOD_UNSPECIFIED = 0;
                            ILLEGAL_ARGUMENT = 2001;
                            RESOURCE_NOT_FOUND = 2002;
                            RESOURCE_CONFLICT = 2003;
                            RESOURCE_INSUFFICIENT = 2004;
                            CARD_SKIN_EXCHANGE_IS_OUT_OF_TERM = 3401;
                            FEED_IS_NOT_FOUND = 3800;
                            FEED_CHALLENGE_NUM_IS_INVALID = 3801;
                            FEED_CHALLENGE_POWER_IS_INSUFFICIENT = 3802;
                            FEED_REVIVAL_CLOCK_IS_INSUFFICIENT = 3803;
                            FEED_POKE_GOLD_IS_INSUFFICIENT = 3804;
                            FEED_HEAL_CHALLENGE_POWER_INSUFFICIENT_ITEMS = 3805;
                            FEED_NON_TIME_SHORTENING_HEAL = 3806;
                            FEED_PACK_UNPACK_ORDER_TRANSACTION_ID_IS_NOT_FOUND = 3807;
                            FRIEND_ID_NOT_FOUND = 3901;
                            PLAYER_NICKNAME_NOT_FOUND = 3902;
                            SENDER_FRIEND_LIMIT_EXCEEDED = 3903;
                            RECEIVER_FRIEND_LIMIT_EXCEEDED = 3904;
                            SEND_FRIEND_REQUEST_LIMIT_EXCEEDED = 3905;
                            RECEIVE_FRIEND_REQUEST_LIMIT_EXCEEDED = 3906;
                            ALREADY_FRIENDS = 3907;
                            TRADE_PARTNER_SESSION_CONFLICT = 4000;
                            TRADE_SESSION_IS_EXPIRED = 4001;
                            TRADE_POWER_IS_INSUFFICIENT = 4002;
                            TRADE_CARD_STOCK_IS_INSUFFICIENT = 4003;
                            TRADE_ITEM_STOCK_IS_INSUFFICIENT = 4004;
                            TRADE_SUBMISSION_CARD_IS_NOT_ALLOWED = 4005;
                            TRADE_RULE_HAS_CHANGED = 4006;
                            TRADE_ITEM_CONSUMPTION_DOES_NOT_MATCH_LATEST_MASTER_DATA = 4007;
                            TRADE_FEATURE_LOCKED = 4008;
                            MISSION_ALREADY_CLEARED = 4301;
                            MISSION_IS_OUT_OF_TERM = 4302;
                            MISSION_IS_NOT_FOUND = 4303;
                            INVALID_PREMIUM_MISSION = 4304;
                            PROFILE_NICKNAME_CHANGE_WITHIN_TIME_LIMIT = 5101;
                            PROFILE_EMBLEMS_AMOUNT_EXCEED = 5102;
                            PROFILE_ICON_IS_INSUFFICIENT = 5103;
                            PROFILE_EMBLEM_IS_INSUFFICIENT = 5104;
                            PROFILE_IS_NOT_FOUND = 5105;
                            PROFILE_NICKNAME_LENGTH_EXCEED = 5106;
                            PLAYER_UNAVAILABLE = 5500;
                            MATCHING_HAS_NOT_BEEN_ESTABLISHED = 5803;
                            FAILED_TO_ASSIGN_PVP_BATTLE = 5804;
                            MASTER_VERSION_MISMATCH = 5805;
                            MY_DECK_NOT_FOUND = 6101;
                            RENTAL_DECK_NOT_FOUND = 6102;
                            ID_TOKEN_EXPIRED = 6201;
                            SYSTEM_INVALID_AGREEMENT_VERSION = 6202;
                            TROPHY_ARGUMENT_IS_INVALID = 6401;
                            TROPHY_IS_ALREADY_CLEARED = 6402;
                            TROPHY_IS_NOT_FOUND = 6403;
                            TUTORIAL_INVALID_STEPS = 6501;
                            TUTORIAL_COULD_NOT_CHOICE_ROUTE = 6502;
                            TUTORIAL_ALREADY_PURCHASED_PACK = 6503;
                            PACK_MASTER_VERSION_MISMATCH = 6601;
                            PACK_PURCHASE_MASTER_VERSION_MISMATCH = 6701;
                        }
                        enum HandlingType {
                            UNSPECIFIED = 0;
                            FATAL = 1;
                            TEMPORARY = 2;
                            RECOVERABLE = 3;
                        }
                    }
                    message Severity {
                        enum Value {
                            UNSPECIFIED = 0;
                            EMERGENCY = 1;
                            CRITICAL = 2;
                            ERROR = 3;
                            WARNING = 4;
                            INFO = 5;
                            DEBUG = 6;
                        }
                    }
                }
                message Pass {
                    message PassEntitlement {
                        enum Period {
                            PERIOD_UNSPECIFIED = 0;
                            PERIOD_INITIAL = 1;
                            PERIOD_RENEW = 2;
                            PERIOD_GRACE = 3;
                            PERIOD_ACCOUNT_HOLD = 4;
                            PERIOD_GRADE_CHANGE = 5;
                            PERIOD_RE_SIGN_UP = 6;
                        }
                        enum LinkType {
                            LINK_TYPE_UNSPECIFIED = 0;
                            LINK_TYPE_DEFAULT = 1;
                            LINK_TYPE_UNLINK = 2;
                            LINK_TYPE_OWNERSHIP_CHANGE_FROM = 3;
                            LINK_TYPE_OWNERSHIP_CHANGE_TO = 4;
                        }
                        string pass_id = 1;
                        Takasho.Schema.LettuceServer.Resource.Store.Market market = 2;
                        string product_id = 3;
                        string unique_order_id = 4;
                        Google.Protobuf.WellKnownTypes.Timestamp starts_at = 5;
                        Google.Protobuf.WellKnownTypes.Timestamp ends_at = 6;
                        bool free_trial = 7;
                        bool locked = 8;
                        Google.Protobuf.WellKnownTypes.Timestamp revoked_at = 9;
                        bool auto_renewing = 10;
                        Google.Protobuf.WellKnownTypes.Timestamp auto_renewing_updated_at = 11;
                        Takasho.Schema.LettuceServer.Resource.Pass.PassEntitlement.Period period = 12;
                        Takasho.Schema.LettuceServer.Resource.Pass.PassEntitlement.LinkType link_type = 13;
                    }
                    message AvailablePassEntitlement {
                        Takasho.Schema.LettuceServer.Resource.Pass.PassEntitlement entitlement = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Pass.PassEntitlement histories = 3;
                    }
                    message PassEntitlementHistory {
                        string pass_id = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Pass.PassEntitlement entitlements = 2;
                    }
                }
                message PackShop {
                    message PackShop {
                        string id = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.PackShop.PackShopPack packs = 2;
                    }
                    message PackShopPack {
                        Takasho.Schema.LettuceServer.Resource.Item.Pack pack = 1;
                        repeated string featured_card_ids = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.PackShop.PackShopProduct products = 3;
                    }
                    message PackShopProduct {
                        enum ScheduleType {
                            UNSPECIFIED = 0;
                            FOREVER = 1;
                            NEVER = 2;
                            SINGLE_TERM = 3;
                        }
                        string product_id = 1;
                        int64 produce_pack_amount = 2;
                        Takasho.Schema.LettuceServer.Resource.PackShop.ProductPrice price = 3;
                        repeated Takasho.Schema.LettuceServer.Resource.PackShop.ProductProduce extra_produces = 4;
                        Takasho.Schema.LettuceServer.Resource.PackShop.PackShopProduct.ScheduleType schedule_type = 5;
                        Google.Protobuf.WellKnownTypes.Timestamp opened_at = 6;
                        Google.Protobuf.WellKnownTypes.Timestamp closed_at = 7;
                    }
                    message ProductPrice {
                        enum ProductPriceType {
                            UNSPECIFIED = 0;
                            PACK_STAMINA = 1;
                        }
                        Takasho.Schema.LettuceServer.Resource.PackShop.ProductPrice.ProductPriceType type = 1;
                        uint64 amount = 2;
                    }
                    message ProductProduce {
                        enum ProductProduceType {
                            UNSPECIFIED = 0;
                            CARD = 1;
                            PACK = 2;
                            PACK_STAMINA_CHARGER = 3;
                        }
                        Takasho.Schema.LettuceServer.Resource.PackShop.ProductProduce.ProductProduceType type = 1;
                        string id = 2;
                        uint64 amount = 3;
                    }
                    message PackShopPurchaseOrder {
                        string transaction_id = 1;
                        string order_id = 2;
                        Google.Protobuf.WellKnownTypes.Timestamp ordered_at = 3;
                        string expansion_id = 5;
                        string sku = 6;
                        string product_id = 7;
                        Takasho.Schema.LettuceServer.Resource.Order.OrderResources consumes = 8;
                        Takasho.Schema.LettuceServer.Resource.Order.OrderResources produces = 9;
                    }
                }
                message Pack {
                    enum PackPowerType {
                        UNSPECIFIED = 0;
                        NORMAL = 1;
                        SUBSCRIPTION = 2;
                    }
                    message Pack {
                        string pack_id = 1;
                        string expansion_id = 2;
                    }
                    message PackDetail {
                        message PackTableWeight {
                            string pack_table_id = 1;
                            string probability_string = 4;
                        }
                        message PackTable {
                            message CardTable {
                                message LabelWeight {
                                    string label = 1;
                                    string probability_string = 4;
                                }
                                message CardTableLabelItems {
                                    message CardWeight {
                                        string card_id = 1;
                                        string probability_string = 4;
                                    }
                                    repeated Takasho.Schema.LettuceServer.Resource.Pack.PackDetail.PackTable.CardTable.CardTableLabelItems.CardWeight card_weights = 1;
                                }
                                repeated Takasho.Schema.LettuceServer.Resource.Pack.PackDetail.PackTable.CardTable.LabelWeight label_weights = 1;
                                map<string, Takasho.Schema.LettuceServer.Resource.Pack.PackDetail.PackTable.CardTable.CardTableLabelItems> label_items = 2;
                            }
                            string pack_table_id = 1;
                            repeated string draw_count_labels = 2;
                            map<string, Takasho.Schema.LettuceServer.Resource.Pack.PackDetail.PackTable.CardTable> draw_count_card_tables = 3;
                        }
                        string pack_id = 1;
                        string expansion_id = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.Pack.PackDetail.PackTableWeight pack_table_weights = 4;
                        map<string, Takasho.Schema.LettuceServer.Resource.Pack.PackDetail.PackTable> pack_tables = 5;
                    }
                    message PackUnpackOrder {
                        string transaction_id = 1;
                        string order_id = 2;
                        Google.Protobuf.WellKnownTypes.Timestamp ordered_at = 3;
                        Takasho.Schema.LettuceServer.Resource.Order.OrderResources consumes = 4;
                        Takasho.Schema.LettuceServer.Resource.Order.OrderResources produces = 5;
                        Takasho.Schema.LettuceServer.Resource.Language.Language lang = 6;
                    }
                    message PackPower {
                        int64 amount = 1;
                        Google.Protobuf.WellKnownTypes.Timestamp last_auto_healed_at = 2;
                        int64 over_heal_sec = 3;
                        int64 auto_heal_limit = 4;
                        int64 heal_sec_per_power = 5;
                        int64 poke_gold_used = 6;
                        int64 manual_heal_limit = 7;
                        string pack_power_id = 8;
                    }
                    message PackPowerToUse {
                        string power_id = 1;
                        int64 amount = 2;
                    }
                    message PackPowerHealItems {
                        repeated Takasho.Schema.LettuceServer.Resource.Item.PackPowerCharger chargers = 1;
                        int64 vc_amount = 2;
                    }
                }
                message Order {
                    message OrderResources {
                        message PackStamina {
                            int64 value = 1;
                            int64 value_t = 2;
                        }
                        repeated Takasho.Schema.LettuceServer.Resource.Item.Pack packs = 2;
                        Takasho.Schema.LettuceServer.Resource.Order.OrderResources.PackStamina pack_stamina = 3;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.CardInstance card_instances = 5;
                    }
                }
                message Mount {
                    message MountSlot {
                        uint64 slot_number = 1;
                        Takasho.Schema.LettuceServer.Resource.Item.CardInstance card_instance = 2;
                    }
                    message Mount {
                        uint64 mount_id = 1;
                        string mount_template_id = 2;
                        uint64 mount_template_num = 3;
                        Takasho.Schema.LettuceServer.Resource.Album.PublicSetting public_setting = 4;
                        repeated Takasho.Schema.LettuceServer.Resource.Mount.MountSlot slots = 5;
                        uint64 display_order = 6;
                        repeated string hash_tag_ids = 7;
                    }
                }
                message Language {
                    enum Language {
                        UNSPECIFIED = 0;
                        JA = 1;
                        EN = 2;
                        CN = 3;
                        FR = 4;
                        IT = 5;
                        DE = 6;
                        ES = 7;
                        BR = 8;
                        KR = 9;
                    }
                }
                message ItemShop {
                    enum ProductType {
                        UNSPECIFIED = 0;
                        CURRENCY = 1;
                        REWARD = 2;
                    }
                    message PurchaseSummary {
                        string shop_id = 1;
                        string product_id = 2;
                        int64 purchase_amount = 3;
                    }
                }
                message ItemAcquisition {
                    message ItemAcquisitionResult {
                        Takasho.Schema.LettuceServer.Resource.Item.InventoryItems acquired_items = 1;
                        Takasho.Schema.LettuceServer.Resource.Item.InventoryItems accepted_items = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.Present.PresentItem presents = 3;
                        Takasho.Schema.LettuceServer.Resource.ItemAcquisition.AcquiredItemStats acquired_item_stats = 6;
                        Takasho.Schema.LettuceServer.Resource.PlayerResources.PlayerResources item_state = 4;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.PokeGold poke_gold_states = 5;
                    }
                    message AcquiredItemStats {
                        uint64 dropped_bright_sand_amount = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.CardInstance first_acquired_cards_in_expansions = 2;
                    }
                }
                message Item {
                    message CardInstance {
                        Takasho.Schema.LettuceServer.Resource.Item.CardInstance card_instance_ = 1;
                        int64 amount = 2;
                    }
                    message RentalDeck {
                        string rental_deck_id = 1;
                        int64 amount = 2;
                    }
                    message EventPowerCharger {
                        enum Type {
                            UNSPECIFIED = 0;
                            PVP = 1;
                            PVE = 2;
                        }
                        Takasho.Schema.LettuceServer.Resource.Item.EventPowerCharger.Type type = 1;
                        string id = 2;
                        uint64 amount = 3;
                        Google.Protobuf.WellKnownTypes.Timestamp expire_at = 4;
                    }
                    message Pack {
                        string id = 1;
                        uint64 amount = 2;
                    }
                    message PackPowerCharger {
                        enum Type {
                            UNSPECIFIED = 0;
                            LARGE = 1;
                            MEDIUM = 2;
                            SMALL = 3;
                        }
                        Takasho.Schema.LettuceServer.Resource.Item.PackPowerCharger.Type type = 1;
                        uint64 amount = 2;
                    }
                    message ChallengePowerCharger {
                        enum Type {
                            UNSPECIFIED = 0;
                            LARGE = 1;
                            MEDIUM = 2;
                            SMALL = 3;
                        }
                        Takasho.Schema.LettuceServer.Resource.Item.ChallengePowerCharger.Type type = 1;
                        uint64 amount = 2;
                    }
                    message TradePowerCharger {
                        string id = 1;
                        int64 amount = 2;
                    }
                    message TradeItem {
                        string id = 1;
                        uint64 amount = 2;
                    }
                    message PeripheralGoods {
                        enum Type {
                            UNSPECIFIED = 0;
                            DECK_SHIELD = 1;
                            PLAY_MAT = 2;
                            COIN_SKIN = 3;
                            COLLECTION_FILE = 4;
                            COLLECTION_BOARD = 5;
                        }
                        Takasho.Schema.LettuceServer.Resource.Item.PeripheralGoods.Type type = 1;
                        string id = 2;
                        uint64 amount = 3;
                    }
                    message ProfileDecoration {
                        enum Type {
                            UNSPECIFIED = 0;
                            EMBLEM = 1;
                            ICON = 2;
                        }
                        Takasho.Schema.LettuceServer.Resource.Item.ProfileDecoration.Type type = 1;
                        string id = 2;
                        uint64 amount = 3;
                    }
                    message Currency {
                        enum Type {
                            UNSPECIFIED = 0;
                            SHOP_TICKET = 3;
                            BRIGHT_SAND = 4;
                            PREMIER_SHOP_TICKET = 5;
                            SUBSCRIPTION_TICKET = 6;
                        }
                        Takasho.Schema.LettuceServer.Resource.Item.Currency.Type type = 1;
                        uint64 amount = 2;
                    }
                    message PokeGold {
                        bool paid = 1;
                        uint64 amount = 2;
                    }
                    message RewardTicket {
                        enum Type {
                            UNSPECIFIED = 0;
                            EVENT_SHOP_TICKET = 1;
                            LIMITED_SHOP_TICKET = 2;
                            EMBLEM_TICKET = 3;
                            SOMEDAY_TICKET = 4;
                        }
                        Takasho.Schema.LettuceServer.Resource.Item.RewardTicket.Type type = 1;
                        string id = 2;
                        uint64 amount = 3;
                        Google.Protobuf.WellKnownTypes.Timestamp expire_at = 4;
                    }
                    message RevivalClock {
                        uint64 amount = 1;
                    }
                    message ThemeDeckRecipe {
                        string id = 1;
                        int64 amount = 2;
                        bool has_cards = 3;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.CardInstance cards = 4;
                    }
                    message Exp {
                        int64 amount = 1;
                    }
                    message ExpStock {
                        int64 current_level = 1;
                        int64 exp = 2;
                    }
                    message PackCeilPoint {
                        int64 amount = 2;
                        string pack_ceil_point_shared_group_id = 3;
                    }
                    message InventoryItems {
                        repeated Takasho.Schema.LettuceServer.Resource.CardSkin.CardSkinStock card_skin_stocks = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.EventPowerCharger event_power_chargers = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.PackPowerCharger pack_power_chargers = 3;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.ChallengePowerCharger challenge_power_chargers = 4;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.PeripheralGoods peripheral_goods = 5;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.Currency currencies = 7;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.ProfileDecoration profile_decorations = 8;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.CardInstance card_instances = 9;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.RewardTicket reward_tickets = 10;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.RevivalClock revival_clocks = 11;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.RentalDeck rental_decks = 12;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.ThemeDeckRecipe theme_deck_recipes = 13;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.Exp exps = 14;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.PackCeilPoint pack_ceil_points = 15;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.PokeGold poke_golds = 16;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.TradePowerCharger trade_power_chargers = 17;
                        repeated Takasho.Schema.LettuceServer.Resource.Item.TradeItem trade_items = 18;
                    }
                }
                message Friend {
                    enum FriendStatus {
                        UNSPECIFIED = 0;
                        FRIEND = 1;
                        SENT_REQUEST = 2;
                        RECEIVED_REQUEST = 3;
                    }
                    message Friend {
                        string player_id = 1;
                        Google.Protobuf.WellKnownTypes.Timestamp became_friends_at = 2;
                        Takasho.Schema.LettuceServer.Resource.PlayerProfile.ProfileSpine profile = 3;
                    }
                    message FriendRequest {
                        string from_player_id = 1;
                        string to_player_id = 2;
                        Google.Protobuf.WellKnownTypes.Timestamp created_at = 3;
                    }
                    message SearchResult {
                        string player_id = 1;
                        Takasho.Schema.LettuceServer.Resource.Friend.FriendStatus friend_status = 2;
                        Takasho.Schema.LettuceServer.Resource.PlayerProfile.ProfileSpine profile = 3;
                    }
                }
                message Feed {
                    enum FeedType {
                        FEED_TYPE_UNSPECIFIED = 0;
                        FEED_TYPE_SOMEONE = 1;
                        FEED_TYPE_LUCKY = 2;
                        FEED_TYPE_FREE = 3;
                    }
                    message FeedElementCard {
                        string card_id = 1;
                        Takasho.Schema.LettuceServer.Resource.Language.Language lang = 2;
                        bool disable = 3;
                        string expansion_id = 4;
                    }
                    message FeedElementSubstitutionItem {
                        Takasho.Schema.LettuceServer.Resource.Item.InventoryItems item = 1;
                        bool disable = 2;
                    }
                    message FeedContents {
                        repeated Takasho.Schema.LettuceServer.Resource.Feed.FeedElementCard cards = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Feed.FeedElementSubstitutionItem substitution_items = 2;
                        Takasho.Schema.LettuceServer.Resource.Language.Language lang = 3;
                    }
                    message FeedChallengeInfo {
                        Google.Protobuf.WellKnownTypes.Timestamp start_at = 1;
                        Google.Protobuf.WellKnownTypes.Timestamp end_at = 2;
                        int64 remaining_count = 3;
                        int64 require_feed_stamina = 4;
                        int64 next_challenge_num = 5;
                    }
                    message FeedSharedPlayer {
                        string player_id = 1;
                        string nickname = 2;
                        string icon_id = 3;
                        bool is_friend = 4;
                        bool is_requesting_friend = 5;
                    }
                    message SomeoneFeed {
                        string someone_feed_id = 1;
                        Takasho.Schema.LettuceServer.Resource.Feed.FeedContents contents = 2;
                        Takasho.Schema.LettuceServer.Resource.Feed.FeedChallengeInfo challenge_info = 3;
                        string pack_id = 10;
                        Takasho.Schema.LettuceServer.Resource.Feed.FeedSharedPlayer player = 11;
                    }
                    message LuckyFeed {
                        enum LuckyFeedType {
                            UNSPECIFIED = 0;
                            NORMAL = 1;
                            EVENT = 2;
                        }
                        string lucky_feed_id = 1;
                        Takasho.Schema.LettuceServer.Resource.Feed.FeedContents contents = 2;
                        Takasho.Schema.LettuceServer.Resource.Feed.FeedChallengeInfo challenge_info = 3;
                        Takasho.Schema.LettuceServer.Resource.Feed.LuckyFeed.LuckyFeedType lucky_feed_type = 10;
                    }
                    message FreeFeed {
                        string free_feed_id = 1;
                        Takasho.Schema.LettuceServer.Resource.Feed.FeedContents contents = 2;
                        Takasho.Schema.LettuceServer.Resource.Feed.FeedChallengeInfo challenge_info = 3;
                    }
                    message FeedTimeline {
                        string timeline_id = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Feed.SomeoneFeed someone_feeds = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.Feed.LuckyFeed lucky_feeds = 3;
                        repeated Takasho.Schema.LettuceServer.Resource.Feed.FreeFeed free_feeds = 4;
                        Google.Protobuf.WellKnownTypes.Timestamp renew_after = 10;
                    }
                    message FeedElementCardSerializableModel {
                        int64 feed_element_index = 1;
                        Takasho.Schema.LettuceServer.Resource.Item.CardInstance card = 2;
                        int64 rarity = 4;
                        int64 wt = 5;
                    }
                    message FeedElementSubstitutionItemSerializableModel {
                        int64 feed_element_index = 1;
                        Takasho.Schema.LettuceServer.Resource.Item.InventoryItems item = 2;
                        int64 probability_weight = 3;
                        int64 wt = 4;
                    }
                    message FeedElementsSerializableModel {
                        repeated Takasho.Schema.LettuceServer.Resource.Feed.FeedElementCardSerializableModel cards = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.Feed.FeedElementSubstitutionItemSerializableModel substitution_items = 2;
                    }
                    message ChallengePowerHealItems {
                        repeated Takasho.Schema.LettuceServer.Resource.Item.ChallengePowerCharger chargers = 1;
                        int64 vc_amount = 2;
                    }
                    message ChallengePower {
                        int64 amount = 1;
                        Google.Protobuf.WellKnownTypes.Timestamp last_auto_healed_at = 2;
                        int64 over_heal_sec = 3;
                        int64 auto_heal_limit = 4;
                        int64 heal_sec_per_power = 5;
                        int64 manual_heal_limit = 6;
                    }
                    message FeedRevivalItems {
                        Takasho.Schema.LettuceServer.Resource.Item.RevivalClock revival_clock = 1;
                        int64 vc_amount = 2;
                    }
                }
                message Deck {
                    enum DeckCaseType {
                        DECK_CASE_TYPE_UNSPECIFIED = 0;
                        DECK_CASE_TYPE_COLORLESS = 1;
                        DECK_CASE_TYPE_GRASS = 2;
                        DECK_CASE_TYPE_FIRE = 3;
                        DECK_CASE_TYPE_WATER = 4;
                        DECK_CASE_TYPE_LIGHTNING = 5;
                        DECK_CASE_TYPE_PSYCHIC = 6;
                        DECK_CASE_TYPE_FIGHTING = 7;
                        DECK_CASE_TYPE_DARKNESS = 8;
                        DECK_CASE_TYPE_METAL = 9;
                        DECK_CASE_TYPE_DRAGON = 10;
                        DECK_CASE_TYPE_MULTIPLE = 11;
                    }
                    enum DeckMainCardType {
                        DECK_MAIN_CARD_TYPE_UNSPECIFIED = 0;
                        DECK_MAIN_CARD_TYPE_MAIN = 1;
                        DECK_MAIN_CARD_TYPE_SUB1 = 2;
                        DECK_MAIN_CARD_TYPE_SUB2 = 3;
                    }
                    message DeckSlot {
                        uint64 slot_number = 1;
                        Takasho.Schema.LettuceServer.Resource.Item.CardInstance card_instance = 2;
                        Takasho.Schema.LettuceServer.Resource.Deck.DeckMainCardType main_card_type = 3;
                    }
                    message Deck {
                        int64 deck_id = 1;
                        string deck_name = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.Deck.DeckSlot slots = 3;
                        repeated Lettuce.BattleEngine.Schema.EnergyType energy_types = 4;
                        Takasho.Schema.LettuceServer.Resource.Deck.DeckCaseType deck_case_type = 5;
                        string deck_shield_id = 6;
                        string coin_skin_id = 7;
                        string play_mat_id = 8;
                    }
                    message RentalDeckStatus {
                        string rental_deck_id = 1;
                        uint64 used_count = 2;
                    }
                }
                message Date {
                    message Date {
                        int32 year = 1;
                        int32 month = 2;
                        int32 day = 3;
                    }
                }
                message Collection {
                    enum CollectionType {
                        COLLECTION_TYPE_UNSPECIFIED = 0;
                        COLLECTION_TYPE_COLLECTION_FILE = 1;
                        COLLECTION_TYPE_COLLECTION_BOARD = 2;
                    }
                    message CollectionSlot {
                        uint64 slot_number = 1;
                        Takasho.Schema.LettuceServer.Resource.Item.CardInstance card_instance = 2;
                    }
                    message SomeoneCollectionPlayerInfo {
                        string player_id = 1;
                        string nickname = 2;
                        string icon_id = 3;
                        uint64 like_count = 4;
                        string thumbnail_id = 5;
                        Takasho.Schema.LettuceServer.Resource.Collection.CollectionType type = 6;
                        uint64 collection_id = 7;
                        repeated Takasho.Schema.LettuceServer.Resource.Collection.CollectionSlot slots = 8;
                        Google.Protobuf.WellKnownTypes.Timestamp like_history_expired_at = 10;
                        repeated string hash_tag_ids = 11;
                    }
                    message MyBestCollection {
                        Takasho.Schema.LettuceServer.Resource.Collection.CollectionType my_best_type = 1;
                        uint64 collection_id = 2;
                        string thumbnail_id = 3;
                        repeated Takasho.Schema.LettuceServer.Resource.Collection.CollectionSlot slots = 5;
                        repeated string hash_tag_ids = 6;
                    }
                }
                message CardSkin {
                    enum CardSkinType {
                        CARD_SKIN_TYPE_UNSPECIFIED = 0;
                        CARD_SKIN_TYPE_DECORATION = 1;
                        CARD_SKIN_TYPE_BATTLE_EFFECT = 2;
                    }
                    message CardSkinStock {
                        string card_id = 1;
                        string card_skin_id = 2;
                        uint64 amount = 3;
                    }
                    message CardSkin {
                        string card_id = 1;
                        string card_skin_id = 2;
                    }
                }
                message CardExchange {
                    enum PlayerCardExchangeRouteType {
                        PLAYER_CARD_EXCHANGE_ROUTE_UNSPECIFIED = 0;
                        PLAYER_CARD_EXCHANGE_ROUTE_TYPE_A = 1;
                        PLAYER_CARD_EXCHANGE_ROUTE_TYPE_B = 2;
                        PLAYER_CARD_EXCHANGE_ROUTE_TYPE_C = 3;
                    }
                    message CardExchangeCatalog {
                        string catalog_id = 1;
                        int64 exchanged_count = 2;
                    }
                }
                message Card {
                    message CardStock {
                        message LangTag {
                            Takasho.Schema.LettuceServer.Resource.Language.Language lang = 1;
                            uint64 amount = 2;
                        }
                        string card_id = 1;
                        uint64 card_amount = 2;
                        repeated Takasho.Schema.LettuceServer.Resource.Card.CardStock.LangTag language_tags = 3;
                        repeated string expansion_ids = 4;
                        Google.Protobuf.WellKnownTypes.Timestamp first_received_at = 98;
                        Google.Protobuf.WellKnownTypes.Timestamp last_received_at = 99;
                    }
                    message CardInstance {
                        string card_id = 1;
                        Takasho.Schema.LettuceServer.Resource.Language.Language lang = 2;
                        string expansion_id = 3;
                        Takasho.Schema.LettuceServer.Resource.CardSkin.CardSkin card_skin = 4;
                    }
                }
                message AnalyticsLog {
                    message BattleConfig {
                        int64 bgm_volume = 1;
                        bool bgm_mute_flg = 2;
                        int64 se_volume = 3;
                        bool se_mute_flg = 4;
                        bool notice_operation_flg = 5;
                        bool next_energy_flg = 6;
                    }
                    message CardFavorite {
                        message TargetCard {
                            string card_id = 1;
                            bool card_favorite_flg = 2;
                        }
                        repeated Takasho.Schema.LettuceServer.Resource.AnalyticsLog.CardFavorite.TargetCard target_cards = 1;
                    }
                    message CardWish {
                        string card_id = 1;
                        bool card_wish_flg = 2;
                    }
                    message ChangeConfig {
                        int64 speaker_bgm_volume = 1;
                        int64 speaker_se_volume = 2;
                        int64 headphone_bgm_volume = 3;
                        int64 headphone_se_volume = 4;
                        int64 screen_quality = 5;
                        int64 fps = 6;
                        Takasho.Schema.LettuceServer.Resource.Language.Language language = 7;
                        string region = 8;
                        bool vibration = 9;
                        bool confirm_operation = 10;
                        bool share_pack = 11;
                        bool push_notice_recover_stamina = 12;
                        bool push_notice_recover_stamina2 = 13;
                        bool push_notice_trade = 14;
                        bool push_notice_worldcard = 15;
                        bool push_notice_news = 16;
                        bool push_notice_all = 17;
                        bool bgm_mute_flg = 18;
                        bool se_mute_flg = 19;
                        int64 trade_auto_reject = 20;
                    }
                    message CollectionGood {
                        repeated string target_player_ids = 1;
                    }
                    message CollectionFileDelete {
                        string file_id = 1;
                    }
                    message CollectionBoardDelete {
                        string board_id = 1;
                    }
                    message CollectionFileFavorite {
                        string file_id = 1;
                        repeated string cards = 2;
                        bool file_favorite_flg = 3;
                    }
                    message CollectionFileFavoriteFromClient {
                        int64 album_id = 1;
                        repeated string cards = 2;
                        bool favorite_flg = 3;
                    }
                    message CollectionBoardFavorite {
                        string board_id = 1;
                        repeated string cards = 2;
                        bool board_favorite_flg = 3;
                    }
                    message CollectionBoardFavoriteFromClient {
                        int64 mount_id = 1;
                        repeated string cards = 2;
                        bool favorite_flg = 3;
                    }
                    message CollectionFileSave {
                        string file_id = 1;
                        string file_cover_id = 4;
                        int64 file_cover_flg = 5;
                        int64 file_public_flg = 6;
                        repeated string cards = 7;
                        string file_name = 8;
                        repeated string hash_tag_ids = 9;
                    }
                    message CollectionFileSkinEffect {
                        message CardSkin {
                            string card_id = 1;
                            string skin_id = 2;
                        }
                        string file_id = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.AnalyticsLog.CollectionFileSkinEffect.CardSkin card_skins = 2;
                    }
                    message CollectionMyBest {
                        enum CollectionType {
                            UNSPECIFIED = 0;
                            COLLECTION_FILE = 1;
                            COLLECTION_BOARD = 2;
                        }
                        Takasho.Schema.LettuceServer.Resource.AnalyticsLog.CollectionMyBest.CollectionType collection_type = 1;
                        string file_id = 2;
                        string board_id = 3;
                        int64 mybest_flg = 4;
                        repeated string cards = 5;
                    }
                    message CollectionBoardSave {
                        string board_id = 1;
                        string board_type_id = 4;
                        int64 board_public_flg = 6;
                        repeated string cards = 7;
                        repeated string hash_tag_ids = 8;
                    }
                    message CollectionBoardSkinEffect {
                        message CardSkin {
                            string card_id = 1;
                            string skin_id = 2;
                        }
                        string board_id = 1;
                        repeated Takasho.Schema.LettuceServer.Resource.AnalyticsLog.CollectionBoardSkinEffect.CardSkin card_skins = 2;
                    }
                    message EventSettings {
                        string category = 1;
                        string id = 2;
                    }
                    message HomeScreen {
                    }
                    message HomeIconTap {
                        string icon_id = 1;
                    }
                    message ImmersivePlay {
                        string card_id = 1;
                    }
                    message MissionClear {
                        string mission_id = 1;
                    }
                    message PackShareConfig {
                        bool change_share = 1;
                    }
                    message GameTutorial {
                        int64 step_no = 1;
                    }
                    message BattleTutorial {
                        string tutorial_stage_id = 1;
                        int64 step_no = 2;
                    }
                    message FeatureTutorial {
                        int64 feature_type_id = 1;
                        int64 step_no = 2;
                    }
                }
                message Album {
                    enum PublicSetting {
                        UNSPECIFIED = 0;
                        ALL_USERS = 1;
                        FRIEND_ONLY = 2;
                        PRIVATE = 3;
                    }
                    message AlbumSlot {
                        uint64 slot_number = 1;
                        Takasho.Schema.LettuceServer.Resource.Item.CardInstance card_instance = 2;
                    }
                    message Album {
                        enum BackgroundColor {
                            UNSPECIFIED = 0;
                            GREEN = 1;
                            RED = 2;
                            BLUE = 3;
                            YELLOW = 4;
                            PURPLE = 5;
                            BROWN = 6;
                            BLACK = 7;
                            SILVER = 8;
                            GOLD = 9;
                            WHITE = 10;
                        }
                        uint64 album_id = 1;
                        string cover_id = 2;
                        Takasho.Schema.LettuceServer.Resource.Album.Album.BackgroundColor background_color = 3;
                        repeated Takasho.Schema.LettuceServer.Resource.Album.AlbumSlot slots = 5;
                        Takasho.Schema.LettuceServer.Resource.Album.PublicSetting public_setting = 6;
                        uint64 display_order = 7;
                        string file_name = 9;
                        repeated string hash_tag_ids = 10;
                    }
                }
                message Action {
                    message ActionState {
                        enum ActionKey {
                            UNSPECIFIED = 0;
                            GET_CARDS = 1;
                            LOGIN = 2;
                            PVP_TRY = 3;
                            PVP_WON = 4;
                            PVE_TRY = 5;
                            PVE_WON = 6;
                            PACK_OPENED = 7;
                            FEED_CHALLENGED = 8;
                            GET_SKINS = 9;
                            FIRST_TUTORIAL_CLEARED = 10;
                            PLAYER_LEVEL = 11;
                            CARD_COLLECTION_MISSION_CLEARED_TOTAL = 12;
                            NA_FEDERATION = 13;
                            RENTAL_DECK_WON = 14;
                            RENTAL_DECK_USE = 15;
                            FRIEND_ADDED = 16;
                            DECK_CREATED = 17;
                            PLAY_MAT_SET = 18;
                            DECK_SHIELD_SET = 19;
                            THANK_SENT = 20;
                            TRADE_TOTAL = 21;
                            TRADE_PARTNER_TOTAL = 22;
                            TRADE_PARTNER = 23;
                            PACK_OPEN_TOTAL = 24;
                            PACK_OPEN_BY_EXPANSION_ID = 25;
                            CARD_GET_TOTAL = 26;
                            CARD_GET_DEX_TOTAL = 27;
                            CARD_GET_RARITY_TOTAL = 28;
                            CARD_GET_RARITY_DEX_TOTAL = 29;
                            CARD_GET_TYPE_TOTAL = 30;
                            CARD_GET_TYPE_DEX_TOTAL = 31;
                            TRAINERS_CARD_GET_TYPE_TOTAL = 32;
                            SKIN_EXCHANGED_TOTAL = 33;
                            RENTAL_DECK_TOTAL_WON = 34;
                            RENTAL_DECK_TOTAL_USED = 35;
                            PVE_PLAY_TOTAL = 36;
                            PVE_WON_TOTAL = 37;
                            CARD_GET_EXPANSION_TOTAL = 38;
                            CARD_GET_EXPANSION_DEX_TOTAL = 39;
                            CARD_GET_EXPANSION_IN_NUMBER_TOTAL = 40;
                            CARD_GET_EXPANSION_DEX_IN_NUMBER_TOTAL = 41;
                        }
                        Takasho.Schema.LettuceServer.Resource.Action.ActionState.ActionKey action_key = 1;
                        string action_target = 2;
                        Takasho.Schema.LettuceServer.Resource.Date.Date date = 3;
                        int64 count = 4;
                    }
                }
            }
        }
        message Framework {
            message PlayerApiError {
                int64 error_code = 1;
                int64 retry_delay_duration_seconds = 2;
                string maintenance_message = 3;
            }
            message SerializedDeviceContext {
                string account = 1;
                string password = 2;
            }
        }
    }
}
message Google {
    message Protobuf {
        message WellKnownTypes {
            message Any {
                string type_url = 1;
                bytes value = 2;
            }
            message Api {
                string name = 1;
                repeated Google.Protobuf.WellKnownTypes.Method methods = 2;
                repeated Google.Protobuf.WellKnownTypes.Option options = 3;
                string version = 4;
                Google.Protobuf.WellKnownTypes.SourceContext source_context = 5;
                repeated Google.Protobuf.WellKnownTypes.Mixin mixins = 6;
                Google.Protobuf.WellKnownTypes.Syntax syntax = 7;
            }
            message Method {
                string name = 1;
                string request_type_url = 2;
                bool request_streaming = 3;
                string response_type_url = 4;
                bool response_streaming = 5;
                repeated Google.Protobuf.WellKnownTypes.Option options = 6;
                Google.Protobuf.WellKnownTypes.Syntax syntax = 7;
            }
            message Mixin {
                string name = 1;
                string root = 2;
            }
            message Duration {
                int64 seconds = 1;
                int32 nanos = 2;
            }
            message Empty {
            }
            message FieldMask {
                repeated string paths = 1;
            }
            message SourceContext {
                string file_name = 1;
            }
            enum NullValue {
                NULL_VALUE = 0;
            }
            message Struct {
                map<string, Google.Protobuf.WellKnownTypes.Value> fields = 1;
            }
            message Value {
                oneof kind {
                    Google.Protobuf.WellKnownTypes.NullValue null_value = 1;
                    double number_value = 2;
                    string string_value = 3;
                    bool bool_value = 4;
                    Google.Protobuf.WellKnownTypes.Struct struct_value = 5;
                    Google.Protobuf.WellKnownTypes.ListValue list_value = 6;
                }
            }
            message ListValue {
                repeated Google.Protobuf.WellKnownTypes.Value values = 1;
            }
            message Timestamp {
                int64 seconds = 1;
                int32 nanos = 2;
            }
            enum Syntax {
                SYNTAX_PROTO2 = 0;
                SYNTAX_PROTO3 = 1;
            }
            message Type {
                string name = 1;
                repeated Lettuce.BattleEngine.Schema.Field fields = 2;
                repeated string oneofs = 3;
                repeated Google.Protobuf.WellKnownTypes.Option options = 4;
                Google.Protobuf.WellKnownTypes.SourceContext source_context = 5;
                Google.Protobuf.WellKnownTypes.Syntax syntax = 6;
            }
            message Field {
                enum Kind {
                    TYPE_UNKNOWN = 0;
                    TYPE_DOUBLE = 1;
                    TYPE_FLOAT = 2;
                    TYPE_INT64 = 3;
                    TYPE_UINT64 = 4;
                    TYPE_INT32 = 5;
                    TYPE_FIXED64 = 6;
                    TYPE_FIXED32 = 7;
                    TYPE_BOOL = 8;
                    TYPE_STRING = 9;
                    TYPE_GROUP = 10;
                    TYPE_MESSAGE = 11;
                    TYPE_BYTES = 12;
                    TYPE_UINT32 = 13;
                    TYPE_ENUM = 14;
                    TYPE_SFIXED32 = 15;
                    TYPE_SFIXED64 = 16;
                    TYPE_SINT32 = 17;
                    TYPE_SINT64 = 18;
                }
                enum Cardinality {
                    CARDINALITY_UNKNOWN = 0;
                    CARDINALITY_OPTIONAL = 1;
                    CARDINALITY_REQUIRED = 2;
                    CARDINALITY_REPEATED = 3;
                }
                Google.Protobuf.WellKnownTypes.Field.Kind kind = 1;
                Google.Protobuf.WellKnownTypes.Field.Cardinality cardinality = 2;
                int32 number = 3;
                string name = 4;
                string type_url = 6;
                int32 oneof_index = 7;
                bool packed = 8;
                repeated Google.Protobuf.WellKnownTypes.Option options = 9;
                string json_name = 10;
                string default_value = 11;
            }
            message Enum {
                string name = 1;
                repeated Google.Protobuf.WellKnownTypes.EnumValue enumvalue = 2;
                repeated Google.Protobuf.WellKnownTypes.Option options = 3;
                Google.Protobuf.WellKnownTypes.SourceContext source_context = 4;
                Google.Protobuf.WellKnownTypes.Syntax syntax = 5;
            }
            message EnumValue {
                string name = 1;
                int32 number = 2;
                repeated Google.Protobuf.WellKnownTypes.Option options = 3;
            }
            message Option {
                string name = 1;
                Google.Protobuf.WellKnownTypes.Any value = 2;
            }
            message DoubleValue {
                double value = 1;
            }
            message FloatValue {
                float value = 1;
            }
            message Int64Value {
                int64 value = 1;
            }
            message UInt64Value {
                uint64 value = 1;
            }
            message Int32Value {
                int32 value = 1;
            }
            message UInt32Value {
                uint32 value = 1;
            }
            message BoolValue {
                bool value = 1;
            }
            message StringValue {
                string value = 1;
            }
            message BytesValue {
                bytes value = 1;
            }
        }
        message Reflection {
            message FileDescriptorSet {
                repeated Google.Protobuf.Reflection.FileDescriptorProto file = 1;
            }
            message FileDescriptorProto {
                string name = 1;
                string package = 2;
                repeated string dependency = 3;
                repeated int32 public_dependency = 10;
                repeated int32 weak_dependency = 11;
                repeated Google.Protobuf.Reflection.DescriptorProto message_type = 4;
                repeated Google.Protobuf.Reflection.EnumDescriptorProto enum_type = 5;
                repeated Google.Protobuf.Reflection.ServiceDescriptorProto service = 6;
                repeated Google.Protobuf.Reflection.FieldDescriptorProto extension = 7;
                Lettuce.BattleEngine.ProtocPlugin.FileOptions options = 8;
                Google.Protobuf.Reflection.SourceCodeInfo source_code_info = 9;
                string syntax = 12;
            }
            message DescriptorProto {
                message ExtensionRange {
                    int32 start = 1;
                    int32 end = 2;
                    Google.Protobuf.Reflection.ExtensionRangeOptions options = 3;
                }
                message ReservedRange {
                    int32 start = 1;
                    int32 end = 2;
                }
                string name = 1;
                repeated Google.Protobuf.Reflection.FieldDescriptorProto field = 2;
                repeated Google.Protobuf.Reflection.FieldDescriptorProto extension = 6;
                repeated Google.Protobuf.Reflection.DescriptorProto nested_type = 3;
                repeated Google.Protobuf.Reflection.EnumDescriptorProto enum_type = 4;
                repeated Google.Protobuf.Reflection.DescriptorProto.ExtensionRange extension_range = 5;
                repeated Google.Protobuf.Reflection.OneofDescriptorProto oneof_decl = 8;
                Lettuce.BattleEngine.ProtocPlugin.MessageOptions options = 7;
                repeated Google.Protobuf.Reflection.DescriptorProto.ReservedRange reserved_range = 9;
                repeated string reserved_name = 10;
            }
            message ExtensionRangeOptions {
                repeated Google.Protobuf.Reflection.UninterpretedOption uninterpreted_option = 999;
            }
            message FieldDescriptorProto {
                enum Type {
                    TYPE_UNKNOWN = 0;
                    TYPE_DOUBLE = 1;
                    TYPE_FLOAT = 2;
                    TYPE_INT64 = 3;
                    TYPE_UINT64 = 4;
                    TYPE_INT32 = 5;
                    TYPE_FIXED64 = 6;
                    TYPE_FIXED32 = 7;
                    TYPE_BOOL = 8;
                    TYPE_STRING = 9;
                    TYPE_GROUP = 10;
                    TYPE_MESSAGE = 11;
                    TYPE_BYTES = 12;
                    TYPE_UINT32 = 13;
                    TYPE_ENUM = 14;
                    TYPE_SFIXED32 = 15;
                    TYPE_SFIXED64 = 16;
                    TYPE_SINT32 = 17;
                    TYPE_SINT64 = 18;
                }
                enum Label {
                    LABEL_UNKNOWN = 0;
                    LABEL_OPTIONAL = 1;
                    LABEL_REQUIRED = 2;
                    LABEL_REPEATED = 3;
                }
                string name = 1;
                int32 number = 3;
                Google.Protobuf.Reflection.FieldDescriptorProto.Label label = 4;
                Google.Protobuf.Reflection.FieldDescriptorProto.Type type = 5;
                string type_name = 6;
                string extendee = 2;
                string default_value = 7;
                int32 oneof_index = 9;
                string json_name = 10;
                Lettuce.BattleEngine.ProtocPlugin.FieldOptions options = 8;
                bool proto3_optional = 17;
            }
            message OneofDescriptorProto {
                string name = 1;
                Google.Protobuf.Reflection.OneofOptions options = 2;
            }
            message EnumDescriptorProto {
                message EnumReservedRange {
                    int32 start = 1;
                    int32 end = 2;
                }
                string name = 1;
                repeated Google.Protobuf.Reflection.EnumValueDescriptorProto value = 2;
                Lettuce.BattleEngine.ProtocPlugin.EnumOptions options = 3;
                repeated Google.Protobuf.Reflection.EnumDescriptorProto.EnumReservedRange reserved_range = 4;
                repeated string reserved_name = 5;
            }
            message EnumValueDescriptorProto {
                string name = 1;
                int32 number = 2;
                Google.Protobuf.Reflection.EnumValueOptions options = 3;
            }
            message ServiceDescriptorProto {
                string name = 1;
                repeated Google.Protobuf.Reflection.MethodDescriptorProto method = 2;
                Google.Protobuf.Reflection.ServiceOptions options = 3;
            }
            message MethodDescriptorProto {
                string name = 1;
                string input_type = 2;
                string output_type = 3;
                Google.Protobuf.Reflection.MethodOptions options = 4;
                bool client_streaming = 5;
                bool server_streaming = 6;
            }
            message FileOptions {
                enum OptimizeMode {
                    OPTIMIZE_MODE_UNKNOWN = 0;
                    SPEED = 1;
                    CODE_SIZE = 2;
                    LITE_RUNTIME = 3;
                }
                string java_package = 1;
                string java_outer_classname = 8;
                bool java_multiple_files = 10;
                bool java_generate_equals_and_hash = 20;
                bool java_string_check_utf8 = 27;
                Google.Protobuf.Reflection.FileOptions.OptimizeMode optimize_for = 9;
                string go_package = 11;
                bool cc_generic_services = 16;
                bool java_generic_services = 17;
                bool py_generic_services = 18;
                bool php_generic_services = 42;
                bool deprecated = 23;
                bool cc_enable_arenas = 31;
                string objc_class_prefix = 36;
                string csharp_namespace = 37;
                string swift_prefix = 39;
                string php_class_prefix = 40;
                string php_namespace = 41;
                string php_metadata_namespace = 44;
                string ruby_package = 45;
                repeated Google.Protobuf.Reflection.UninterpretedOption uninterpreted_option = 999;
            }
            message MessageOptions {
                bool message_set_wire_format = 1;
                bool no_standard_descriptor_accessor = 2;
                bool deprecated = 3;
                bool map_entry = 7;
                repeated Google.Protobuf.Reflection.UninterpretedOption uninterpreted_option = 999;
            }
            message FieldOptions {
                enum CType {
                    STRING = 0;
                    CORD = 1;
                    STRING_PIECE = 2;
                }
                enum JSType {
                    JS_NORMAL = 0;
                    JS_STRING = 1;
                    JS_NUMBER = 2;
                }
                Google.Protobuf.Reflection.FieldOptions.CType ctype = 1;
                bool packed = 2;
                Google.Protobuf.Reflection.FieldOptions.JSType jstype = 6;
                bool lazy = 5;
                bool deprecated = 3;
                bool weak = 10;
                repeated Google.Protobuf.Reflection.UninterpretedOption uninterpreted_option = 999;
            }
            message OneofOptions {
                repeated Google.Protobuf.Reflection.UninterpretedOption uninterpreted_option = 999;
            }
            message EnumOptions {
                bool allow_alias = 2;
                bool deprecated = 3;
                repeated Google.Protobuf.Reflection.UninterpretedOption uninterpreted_option = 999;
            }
            message EnumValueOptions {
                bool deprecated = 1;
                repeated Google.Protobuf.Reflection.UninterpretedOption uninterpreted_option = 999;
            }
            message ServiceOptions {
                bool deprecated = 33;
                repeated Google.Protobuf.Reflection.UninterpretedOption uninterpreted_option = 999;
            }
            message MethodOptions {
                enum IdempotencyLevel {
                    IDEMPOTENCY_UNKNOWN = 0;
                    NO_SIDE_EFFECTS = 1;
                    IDEMPOTENT = 2;
                }
                bool deprecated = 33;
                Google.Protobuf.Reflection.MethodOptions.IdempotencyLevel idempotency_level = 34;
                repeated Google.Protobuf.Reflection.UninterpretedOption uninterpreted_option = 999;
            }
            message UninterpretedOption {
                message NamePart {
                    string name_part_ = 1;
                    bool is_extension = 2;
                }
                repeated Google.Protobuf.Reflection.UninterpretedOption.NamePart name = 2;
                string identifier_value = 3;
                uint64 positive_int_value = 4;
                int64 negative_int_value = 5;
                double double_value = 6;
                bytes string_value = 7;
                string aggregate_value = 8;
            }
            message SourceCodeInfo {
                message Location {
                    repeated int32 path = 1;
                    repeated int32 span = 2;
                    string leading_comments = 3;
                    string trailing_comments = 4;
                    repeated string leading_detached_comments = 6;
                }
                repeated Google.Protobuf.Reflection.SourceCodeInfo.Location location = 1;
            }
            message GeneratedCodeInfo {
                message Annotation {
                    repeated int32 path = 1;
                    string source_file = 2;
                    int32 begin = 3;
                    int32 end = 4;
                }
                repeated Google.Protobuf.Reflection.GeneratedCodeInfo.Annotation annotation = 1;
            }
        }
    }
    message Rpc {
        message Status {
            int32 code = 1;
            string message = 2;
            repeated Google.Protobuf.WellKnownTypes.Any details = 3;
        }
    }
}
message Sharin {
    message UserPreferences {
        message ProtobufPreferenceData {
        }
    }
}